
LIGHT_TEMP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  000043fc  00004490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008001ac  008001ac  000045dc  2**0
                  ALLOC
  3 .stab         00003b34  00000000  00000000  000045dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a75  00000000  00000000  00008110  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00009b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00009d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00009f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000c56b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000da39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000ed44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000ef24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000f22b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fc45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <__vector_6>
      1c:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__vector_7>
      20:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__vector_8>
      24:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 40 1c 	jmp	0x3880	; 0x3880 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3b       	cpi	r26, 0xBC	; 188
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <main>
      8a:	0c 94 fc 21 	jmp	0x43f8	; 0x43f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 21 	jmp	0x438a	; 0x438a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 21 	jmp	0x43c2	; 0x43c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 21 	jmp	0x438a	; 0x438a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 21 	jmp	0x43c2	; 0x43c2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cd 21 	jmp	0x439a	; 0x439a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e7       	ldi	r22, 0x77	; 119
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e9 21 	jmp	0x43d2	; 0x43d2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 ea 21 	jmp	0x43d4	; 0x43d4 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 d5 21 	jmp	0x43aa	; 0x43aa <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 cd 21 	jmp	0x439a	; 0x439a <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 e9 21 	jmp	0x43d2	; 0x43d2 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e1 58       	subi	r30, 0x81	; 129
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <ADC_voidInit>:

void Dummy(void);
pf ADC_pfCallback;
uint16 ADC_ReadValue;
void ADC_voidInit(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
#if ADC_VOLTAGE_REFERENCE == AVCC
	CLR_BIT(ADMUX, REFS1);
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8f 77       	andi	r24, 0x7F	; 127
     efe:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
     f00:	a7 e2       	ldi	r26, 0x27	; 39
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e2       	ldi	r30, 0x27	; 39
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	80 64       	ori	r24, 0x40	; 64
     f0c:	8c 93       	st	X, r24
#endif

#if ADC_ADJUSTMENT_MODE == ADC_LEFT
	SET_BIT(ADMUX, ADLAR);
#else
	CLR_BIT(ADMUX, ADLAR);
     f0e:	a7 e2       	ldi	r26, 0x27	; 39
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e2       	ldi	r30, 0x27	; 39
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7d       	andi	r24, 0xDF	; 223
     f1a:	8c 93       	st	X, r24
#endif
	// selecting from ADC0 to ADC 7
	ADMUX |= ADC_CHANNEL_NUM;
     f1c:	a7 e2       	ldi	r26, 0x27	; 39
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e7 e2       	ldi	r30, 0x27	; 39
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8c 93       	st	X, r24
// The ADC will start a conversion on a positive edge of the selected trigger signal
#if ADC_AUTO_TRIGGIR_MODE == AUTO_TRIGGIR_ENABLE
	SET_BIT(ADCSRA, ADATE);
     f28:	a6 e2       	ldi	r26, 0x26	; 38
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e6 e2       	ldi	r30, 0x26	; 38
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	80 62       	ori	r24, 0x20	; 32
     f34:	8c 93       	st	X, r24
	SFIOR |= ADC_AUTO_TRIGGIR_SOURCE;
     f36:	a0 e5       	ldi	r26, 0x50	; 80
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e0 e5       	ldi	r30, 0x50	; 80
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8c 93       	st	X, r24
#else
	CLR_BIT(ADCSRA, ADATE);
#endif
	// setting prescaler value
	ADCSRA |= ADC_PRESCALLER;
     f42:	a6 e2       	ldi	r26, 0x26	; 38
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e6 e2       	ldi	r30, 0x26	; 38
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	// do nothing if the pointer to function was not assigned an address.
	ADC_pfCallback = Dummy;
     f50:	85 ee       	ldi	r24, 0xE5	; 229
     f52:	98 e0       	ldi	r25, 0x08	; 8
     f54:	90 93 ad 01 	sts	0x01AD, r25
     f58:	80 93 ac 01 	sts	0x01AC, r24

	CLR_BIT(ADCSRA, ADIE); /* Disable interrupt  */
     f5c:	a6 e2       	ldi	r26, 0x26	; 38
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e6 e2       	ldi	r30, 0x26	; 38
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	87 7f       	andi	r24, 0xF7	; 247
     f68:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADIF); /* Clear interrupt flag */
     f6a:	a6 e2       	ldi	r26, 0x26	; 38
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e6 e2       	ldi	r30, 0x26	; 38
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	80 61       	ori	r24, 0x10	; 16
     f76:	8c 93       	st	X, r24
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <ADC_voidEnable>:
void ADC_voidEnable(void)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADEN);
     f86:	a6 e2       	ldi	r26, 0x26	; 38
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e6 e2       	ldi	r30, 0x26	; 38
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 68       	ori	r24, 0x80	; 128
     f92:	8c 93       	st	X, r24
}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <ADC_voidDisable>:
void ADC_voidDisable(void)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA, ADEN);
     fa2:	a6 e2       	ldi	r26, 0x26	; 38
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e6 e2       	ldi	r30, 0x26	; 38
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8f 77       	andi	r24, 0x7F	; 127
     fae:	8c 93       	st	X, r24
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <ADC_voidInterruptEnable>:
void ADC_voidInterruptEnable(void)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADIE);
     fbe:	a6 e2       	ldi	r26, 0x26	; 38
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e6 e2       	ldi	r30, 0x26	; 38
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	88 60       	ori	r24, 0x08	; 8
     fca:	8c 93       	st	X, r24
}
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <ADC_voidInterruptDisable>:
void ADC_voidInterruptDisable(void)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA, ADIE);
     fda:	a6 e2       	ldi	r26, 0x26	; 38
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e6 e2       	ldi	r30, 0x26	; 38
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	87 7f       	andi	r24, 0xF7	; 247
     fe6:	8c 93       	st	X, r24
}
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <ADC_voidSetCallback>:
void ADC_voidSetCallback(pf pfCallbackCpy)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <ADC_voidSetCallback+0x6>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
	ADC_pfCallback = pfCallbackCpy;
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    1000:	90 93 ad 01 	sts	0x01AD, r25
    1004:	80 93 ac 01 	sts	0x01AC, r24
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <ADC_u16ReadSync>:
uint16 ADC_u16ReadSync(void)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <ADC_u16ReadSync+0x6>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	uint16 u16ReadValueLoc;

		SET_BIT(ADCSRA, ADSC); /*Start conversion */
    101c:	a6 e2       	ldi	r26, 0x26	; 38
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e6 e2       	ldi	r30, 0x26	; 38
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 64       	ori	r24, 0x40	; 64
    1028:	8c 93       	st	X, r24


	/*Polling IF */
	// the interrupt flag is set when the conversion ends.

	while (GET_BIT(ADCSRA, ADIF) == 0)
    102a:	e6 e2       	ldi	r30, 0x26	; 38
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	82 95       	swap	r24
    1032:	8f 70       	andi	r24, 0x0F	; 15
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	81 70       	andi	r24, 0x01	; 1
    103a:	90 70       	andi	r25, 0x00	; 0
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	a9 f3       	breq	.-22     	; 0x102a <ADC_u16ReadSync+0x18>


#if ADC_ADJUSTMENT_MODE == ADC_LEFT
	u16ReadValueLoc = ADCH;
#else
	u16ReadValueLoc = ADCL|ADCH << 8  ;
    1040:	e4 e2       	ldi	r30, 0x24	; 36
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	e5 e2       	ldi	r30, 0x25	; 37
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	98 2f       	mov	r25, r24
    1056:	88 27       	eor	r24, r24
    1058:	82 2b       	or	r24, r18
    105a:	93 2b       	or	r25, r19
    105c:	9a 83       	std	Y+2, r25	; 0x02
    105e:	89 83       	std	Y+1, r24	; 0x01
#endif
	SET_BIT(ADCSRA, ADIF); /* Clear event flag */
    1060:	a6 e2       	ldi	r26, 0x26	; 38
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e6 e2       	ldi	r30, 0x26	; 38
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	80 61       	ori	r24, 0x10	; 16
    106c:	8c 93       	st	X, r24
	return u16ReadValueLoc;
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <ADC_voidStartConversion>:
void ADC_voidStartConversion(void)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, 6);
    1084:	a6 e2       	ldi	r26, 0x26	; 38
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e6 e2       	ldi	r30, 0x26	; 38
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 64       	ori	r24, 0x40	; 64
    1090:	8c 93       	st	X, r24
}
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <ADC_u16ReadASync>:

uint16 ADC_u16ReadASync(void)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
	return ADC_ReadValue;
    10a0:	80 91 ae 01 	lds	r24, 0x01AE
    10a4:	90 91 af 01 	lds	r25, 0x01AF
}
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <ADC_f32NumtoVolt>:
float32 ADC_f32NumtoVolt(uint16 u16ReadCpy)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <ADC_f32NumtoVolt+0x6>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <ADC_f32NumtoVolt+0x8>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <ADC_f32NumtoVolt+0xa>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	9e 83       	std	Y+6, r25	; 0x06
    10be:	8d 83       	std	Y+5, r24	; 0x05
	//assuming AREF = VCC
	float32 volt;

	volt =(float32)u16ReadCpy * 5 / 1023;
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	cc 01       	movw	r24, r24
    10c6:	a0 e0       	ldi	r26, 0x00	; 0
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	bc 01       	movw	r22, r24
    10cc:	cd 01       	movw	r24, r26
    10ce:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 ea       	ldi	r20, 0xA0	; 160
    10e0:	50 e4       	ldi	r21, 0x40	; 64
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 ec       	ldi	r19, 0xC0	; 192
    10f2:	4f e7       	ldi	r20, 0x7F	; 127
    10f4:	54 e4       	ldi	r21, 0x44	; 68
    10f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	9a 83       	std	Y+2, r25	; 0x02
    1102:	ab 83       	std	Y+3, r26	; 0x03
    1104:	bc 83       	std	Y+4, r27	; 0x04
	return volt;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	ab 81       	ldd	r26, Y+3	; 0x03
    110c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    110e:	bc 01       	movw	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	26 96       	adiw	r28, 0x06	; 6
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <ADC_voidPinSwitch>:
void ADC_voidPinSwitch(uint8 u8DataCpy)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0xE0) | u8DataCpy;
    1130:	a7 e2       	ldi	r26, 0x27	; 39
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e7 e2       	ldi	r30, 0x27	; 39
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	98 2f       	mov	r25, r24
    113c:	90 7e       	andi	r25, 0xE0	; 224
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	89 2b       	or	r24, r25
    1142:	8c 93       	st	X, r24
}
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <__vector_16>:
void __vector_16(void) __attribute__((signal, used));
void __vector_16(void)
{
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	11 24       	eor	r1, r1
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	4f 93       	push	r20
    115c:	5f 93       	push	r21
    115e:	6f 93       	push	r22
    1160:	7f 93       	push	r23
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
    116a:	ef 93       	push	r30
    116c:	ff 93       	push	r31
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62

#if ADC_ADJUSTMENT_MODE == ADC_LEFT
	ADC_ReadValue = ADCH;
#else
	ADC_ReadValue = ADCH << 8 | ADCL;
    1176:	e5 e2       	ldi	r30, 0x25	; 37
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	38 2f       	mov	r19, r24
    1182:	22 27       	eor	r18, r18
    1184:	e4 e2       	ldi	r30, 0x24	; 36
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	82 2b       	or	r24, r18
    1190:	93 2b       	or	r25, r19
    1192:	90 93 af 01 	sts	0x01AF, r25
    1196:	80 93 ae 01 	sts	0x01AE, r24
#endif
	ADC_pfCallback();
    119a:	e0 91 ac 01 	lds	r30, 0x01AC
    119e:	f0 91 ad 01 	lds	r31, 0x01AD
    11a2:	09 95       	icall
}
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	ff 91       	pop	r31
    11aa:	ef 91       	pop	r30
    11ac:	bf 91       	pop	r27
    11ae:	af 91       	pop	r26
    11b0:	9f 91       	pop	r25
    11b2:	8f 91       	pop	r24
    11b4:	7f 91       	pop	r23
    11b6:	6f 91       	pop	r22
    11b8:	5f 91       	pop	r21
    11ba:	4f 91       	pop	r20
    11bc:	3f 91       	pop	r19
    11be:	2f 91       	pop	r18
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	0f 90       	pop	r0
    11c6:	1f 90       	pop	r1
    11c8:	18 95       	reti

000011ca <Dummy>:

void Dummy(void) {}
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <DIO_voidInit>:
#include  "DIO_priv.h"



void DIO_voidInit(void)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = CONC(DIO_u8DIR_PIN_7,DIO_u8DIR_PIN_6,DIO_u8DIR_PIN_5,DIO_u8DIR_PIN_4,DIO_u8DIR_PIN_3,DIO_u8DIR_PIN_2,DIO_u8DIR_PIN_1,DIO_u8DIR_PIN_0);
    11e0:	ea e3       	ldi	r30, 0x3A	; 58
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	8c ef       	ldi	r24, 0xFC	; 252
    11e6:	80 83       	st	Z, r24
	DDRB = CONC(DIO_u8DIR_PIN_15,DIO_u8DIR_PIN_14,DIO_u8DIR_PIN_13,DIO_u8DIR_PIN_12,DIO_u8DIR_PIN_11,DIO_u8DIR_PIN_10,DIO_u8DIR_PIN_9,DIO_u8DIR_PIN_8);
    11e8:	e7 e3       	ldi	r30, 0x37	; 55
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8f e4       	ldi	r24, 0x4F	; 79
    11ee:	80 83       	st	Z, r24
	DDRC = CONC(DIO_u8DIR_PIN_23,DIO_u8DIR_PIN_22,DIO_u8DIR_PIN_21,DIO_u8DIR_PIN_20,DIO_u8DIR_PIN_19,DIO_u8DIR_PIN_18,DIO_u8DIR_PIN_17,DIO_u8DIR_PIN_16);
    11f0:	e4 e3       	ldi	r30, 0x34	; 52
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	80 83       	st	Z, r24
	DDRD = CONC(DIO_u8DIR_PIN_31,DIO_u8DIR_PIN_30,DIO_u8DIR_PIN_29,DIO_u8DIR_PIN_28,DIO_u8DIR_PIN_27,DIO_u8DIR_PIN_26,DIO_u8DIR_PIN_25,DIO_u8DIR_PIN_24);
    11f8:	e1 e3       	ldi	r30, 0x31	; 49
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	8d ef       	ldi	r24, 0xFD	; 253
    11fe:	80 83       	st	Z, r24
	
	
}
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <DIO_enuWritePin>:

/* Description : function write DIO_u8HIGH or DIO_u8LOW on Pin start 0 to 31 */
tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy , uint8 u8PinValueCpy)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <DIO_enuWritePin+0x6>
    120c:	00 d0       	rcall	.+0      	; 0x120e <DIO_enuWritePin+0x8>
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	8a 83       	std	Y+2, r24	; 0x02
    1216:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStatusLoc = E_OK ;
    1218:	19 82       	std	Y+1, r1	; 0x01
	
	switch (u8PinValueCpy)
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3d 83       	std	Y+5, r19	; 0x05
    1222:	2c 83       	std	Y+4, r18	; 0x04
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	09 f4       	brne	.+2      	; 0x122e <DIO_enuWritePin+0x28>
    122c:	77 c0       	rjmp	.+238    	; 0x131c <DIO_enuWritePin+0x116>
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	21 30       	cpi	r18, 0x01	; 1
    1234:	31 05       	cpc	r19, r1
    1236:	09 f0       	breq	.+2      	; 0x123a <DIO_enuWritePin+0x34>
    1238:	e6 c0       	rjmp	.+460    	; 0x1406 <DIO_enuWritePin+0x200>
		{
			case DIO_u8HIGH :
				if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	88 30       	cpi	r24, 0x08	; 8
    123e:	a0 f4       	brcc	.+40     	; 0x1268 <DIO_enuWritePin+0x62>
				{
					SET_BIT(ODRA , u8PinNumCpy ) ;	
    1240:	ab e3       	ldi	r26, 0x3B	; 59
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	eb e3       	ldi	r30, 0x3B	; 59
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_enuWritePin+0x58>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_enuWritePin+0x54>
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	d1 c0       	rjmp	.+418    	; 0x140a <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	88 30       	cpi	r24, 0x08	; 8
    126c:	d0 f0       	brcs	.+52     	; 0x12a2 <DIO_enuWritePin+0x9c>
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	80 31       	cpi	r24, 0x10	; 16
    1272:	b8 f4       	brcc	.+46     	; 0x12a2 <DIO_enuWritePin+0x9c>
				{
					SET_BIT(ODRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    1274:	a8 e3       	ldi	r26, 0x38	; 56
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e8 e3       	ldi	r30, 0x38	; 56
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	9c 01       	movw	r18, r24
    1288:	27 70       	andi	r18, 0x07	; 7
    128a:	30 70       	andi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_enuWritePin+0x92>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_enuWritePin+0x8e>
    129c:	84 2b       	or	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	b4 c0       	rjmp	.+360    	; 0x140a <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	80 31       	cpi	r24, 0x10	; 16
    12a6:	d0 f0       	brcs	.+52     	; 0x12dc <DIO_enuWritePin+0xd6>
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	88 31       	cpi	r24, 0x18	; 24
    12ac:	b8 f4       	brcc	.+46     	; 0x12dc <DIO_enuWritePin+0xd6>
				{
					SET_BIT(ODRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    12ae:	a5 e3       	ldi	r26, 0x35	; 53
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e5 e3       	ldi	r30, 0x35	; 53
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	9c 01       	movw	r18, r24
    12c2:	27 70       	andi	r18, 0x07	; 7
    12c4:	30 70       	andi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_enuWritePin+0xcc>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_enuWritePin+0xc8>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	97 c0       	rjmp	.+302    	; 0x140a <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	88 31       	cpi	r24, 0x18	; 24
    12e0:	d0 f0       	brcs	.+52     	; 0x1316 <DIO_enuWritePin+0x110>
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	80 32       	cpi	r24, 0x20	; 32
    12e6:	b8 f4       	brcc	.+46     	; 0x1316 <DIO_enuWritePin+0x110>
				{
					SET_BIT(ODRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    12e8:	a2 e3       	ldi	r26, 0x32	; 50
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e2 e3       	ldi	r30, 0x32	; 50
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	9c 01       	movw	r18, r24
    12fc:	27 70       	andi	r18, 0x07	; 7
    12fe:	30 70       	andi	r19, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 2e       	mov	r0, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO_enuWritePin+0x106>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	0a 94       	dec	r0
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <DIO_enuWritePin+0x102>
    1310:	84 2b       	or	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	7a c0       	rjmp	.+244    	; 0x140a <DIO_enuWritePin+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	77 c0       	rjmp	.+238    	; 0x140a <DIO_enuWritePin+0x204>
				}
			break ;
			case DIO_u8LOW :
				if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	88 30       	cpi	r24, 0x08	; 8
    1320:	a8 f4       	brcc	.+42     	; 0x134c <DIO_enuWritePin+0x146>
				{		
					CLR_BIT(ODRA , u8PinNumCpy ) ;
    1322:	ab e3       	ldi	r26, 0x3B	; 59
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	eb e3       	ldi	r30, 0x3B	; 59
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_enuWritePin+0x13a>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_enuWritePin+0x136>
    1344:	80 95       	com	r24
    1346:	84 23       	and	r24, r20
    1348:	8c 93       	st	X, r24
    134a:	5f c0       	rjmp	.+190    	; 0x140a <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	88 30       	cpi	r24, 0x08	; 8
    1350:	d8 f0       	brcs	.+54     	; 0x1388 <DIO_enuWritePin+0x182>
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	80 31       	cpi	r24, 0x10	; 16
    1356:	c0 f4       	brcc	.+48     	; 0x1388 <DIO_enuWritePin+0x182>
				{
					CLR_BIT(ODRB , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    1358:	a8 e3       	ldi	r26, 0x38	; 56
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e8 e3       	ldi	r30, 0x38	; 56
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9c 01       	movw	r18, r24
    136c:	27 70       	andi	r18, 0x07	; 7
    136e:	30 70       	andi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_enuWritePin+0x176>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_enuWritePin+0x172>
    1380:	80 95       	com	r24
    1382:	84 23       	and	r24, r20
    1384:	8c 93       	st	X, r24
    1386:	41 c0       	rjmp	.+130    	; 0x140a <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	80 31       	cpi	r24, 0x10	; 16
    138c:	d8 f0       	brcs	.+54     	; 0x13c4 <DIO_enuWritePin+0x1be>
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	88 31       	cpi	r24, 0x18	; 24
    1392:	c0 f4       	brcc	.+48     	; 0x13c4 <DIO_enuWritePin+0x1be>
				{
					CLR_BIT(ODRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    1394:	a5 e3       	ldi	r26, 0x35	; 53
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e5 e3       	ldi	r30, 0x35	; 53
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	9c 01       	movw	r18, r24
    13a8:	27 70       	andi	r18, 0x07	; 7
    13aa:	30 70       	andi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_enuWritePin+0x1b2>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_enuWritePin+0x1ae>
    13bc:	80 95       	com	r24
    13be:	84 23       	and	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	23 c0       	rjmp	.+70     	; 0x140a <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	88 31       	cpi	r24, 0x18	; 24
    13c8:	d8 f0       	brcs	.+54     	; 0x1400 <DIO_enuWritePin+0x1fa>
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	80 32       	cpi	r24, 0x20	; 32
    13ce:	c0 f4       	brcc	.+48     	; 0x1400 <DIO_enuWritePin+0x1fa>
				{
					CLR_BIT(ODRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    13d0:	a2 e3       	ldi	r26, 0x32	; 50
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e2 e3       	ldi	r30, 0x32	; 50
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9c 01       	movw	r18, r24
    13e4:	27 70       	andi	r18, 0x07	; 7
    13e6:	30 70       	andi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_enuWritePin+0x1ee>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_enuWritePin+0x1ea>
    13f8:	80 95       	com	r24
    13fa:	84 23       	and	r24, r20
    13fc:	8c 93       	st	X, r24
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <DIO_enuWritePin+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO_enuWritePin+0x204>
				}
			
			break ;
			default :
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	89 83       	std	Y+1, r24	; 0x01
			break ;
			
		}
	
	return enuReturnStatusLoc ;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <DIO_enuReadPin>:

tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy , uint8 * pu8PinValueCpy)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <DIO_enuReadPin+0x6>
    1422:	00 d0       	rcall	.+0      	; 0x1424 <DIO_enuReadPin+0x8>
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	7c 83       	std	Y+4, r23	; 0x04
    142c:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    142e:	19 82       	std	Y+1, r1	; 0x01
	
	if (pu8PinValueCpy != NULL_PTR)
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	09 f4       	brne	.+2      	; 0x143a <DIO_enuReadPin+0x1e>
    1438:	6e c0       	rjmp	.+220    	; 0x1516 <DIO_enuReadPin+0xfa>
	{
		     if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	88 30       	cpi	r24, 0x08	; 8
    143e:	a0 f4       	brcc	.+40     	; 0x1468 <DIO_enuReadPin+0x4c>
				{
					*pu8PinValueCpy = GET_BIT(IDRA , u8PinNumCpy ) ;	
    1440:	e9 e3       	ldi	r30, 0x39	; 57
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a9 01       	movw	r20, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_enuReadPin+0x3c>
    1454:	55 95       	asr	r21
    1456:	47 95       	ror	r20
    1458:	8a 95       	dec	r24
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_enuReadPin+0x38>
    145c:	ca 01       	movw	r24, r20
    145e:	81 70       	andi	r24, 0x01	; 1
    1460:	eb 81       	ldd	r30, Y+3	; 0x03
    1462:	fc 81       	ldd	r31, Y+4	; 0x04
    1464:	80 83       	st	Z, r24
    1466:	59 c0       	rjmp	.+178    	; 0x151a <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	88 30       	cpi	r24, 0x08	; 8
    146c:	c8 f0       	brcs	.+50     	; 0x14a0 <DIO_enuReadPin+0x84>
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	80 31       	cpi	r24, 0x10	; 16
    1472:	b0 f4       	brcc	.+44     	; 0x14a0 <DIO_enuReadPin+0x84>
				{
					*pu8PinValueCpy = GET_BIT(IDRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    1474:	e6 e3       	ldi	r30, 0x36	; 54
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	87 70       	andi	r24, 0x07	; 7
    1486:	90 70       	andi	r25, 0x00	; 0
    1488:	a9 01       	movw	r20, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <DIO_enuReadPin+0x74>
    148c:	55 95       	asr	r21
    148e:	47 95       	ror	r20
    1490:	8a 95       	dec	r24
    1492:	e2 f7       	brpl	.-8      	; 0x148c <DIO_enuReadPin+0x70>
    1494:	ca 01       	movw	r24, r20
    1496:	81 70       	andi	r24, 0x01	; 1
    1498:	eb 81       	ldd	r30, Y+3	; 0x03
    149a:	fc 81       	ldd	r31, Y+4	; 0x04
    149c:	80 83       	st	Z, r24
    149e:	3d c0       	rjmp	.+122    	; 0x151a <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	80 31       	cpi	r24, 0x10	; 16
    14a4:	c8 f0       	brcs	.+50     	; 0x14d8 <DIO_enuReadPin+0xbc>
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	88 31       	cpi	r24, 0x18	; 24
    14aa:	b0 f4       	brcc	.+44     	; 0x14d8 <DIO_enuReadPin+0xbc>
				{
					*pu8PinValueCpy = GET_BIT(IDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    14ac:	e3 e3       	ldi	r30, 0x33	; 51
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	87 70       	andi	r24, 0x07	; 7
    14be:	90 70       	andi	r25, 0x00	; 0
    14c0:	a9 01       	movw	r20, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_enuReadPin+0xac>
    14c4:	55 95       	asr	r21
    14c6:	47 95       	ror	r20
    14c8:	8a 95       	dec	r24
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_enuReadPin+0xa8>
    14cc:	ca 01       	movw	r24, r20
    14ce:	81 70       	andi	r24, 0x01	; 1
    14d0:	eb 81       	ldd	r30, Y+3	; 0x03
    14d2:	fc 81       	ldd	r31, Y+4	; 0x04
    14d4:	80 83       	st	Z, r24
    14d6:	21 c0       	rjmp	.+66     	; 0x151a <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	88 31       	cpi	r24, 0x18	; 24
    14dc:	c8 f0       	brcs	.+50     	; 0x1510 <DIO_enuReadPin+0xf4>
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	80 32       	cpi	r24, 0x20	; 32
    14e2:	b0 f4       	brcc	.+44     	; 0x1510 <DIO_enuReadPin+0xf4>
				{
					*pu8PinValueCpy = GET_BIT(IDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    14e4:	e0 e3       	ldi	r30, 0x30	; 48
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	87 70       	andi	r24, 0x07	; 7
    14f6:	90 70       	andi	r25, 0x00	; 0
    14f8:	a9 01       	movw	r20, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_enuReadPin+0xe4>
    14fc:	55 95       	asr	r21
    14fe:	47 95       	ror	r20
    1500:	8a 95       	dec	r24
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_enuReadPin+0xe0>
    1504:	ca 01       	movw	r24, r20
    1506:	81 70       	andi	r24, 0x01	; 1
    1508:	eb 81       	ldd	r30, Y+3	; 0x03
    150a:	fc 81       	ldd	r31, Y+4	; 0x04
    150c:	80 83       	st	Z, r24
    150e:	05 c0       	rjmp	.+10     	; 0x151a <DIO_enuReadPin+0xfe>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_enuReadPin+0xfe>
				}
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    1516:	83 e0       	ldi	r24, 0x03	; 3
    1518:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStatusLoc ;
    151a:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <DIO_enuPullWrite>:

tenuErrorStatus DIO_enuPullWrite(uint8 u8PinNumCpy , uint8 u8PinStateCpy)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	00 d0       	rcall	.+0      	; 0x1530 <DIO_enuPullWrite+0x6>
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enuWritePin(u8PinNumCpy , u8PinStateCpy );
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	6a 81       	ldd	r22, Y+2	; 0x02
    153c:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>
}
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <DIO_enuWriteBus>:

tenuErrorStatus DIO_enuWriteBus(tstrPinMapping * pastrPinMappingCpy , uint8 u8SizeCpy )
{
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	00 d0       	rcall	.+0      	; 0x1554 <DIO_enuWriteBus+0xa>
    1554:	00 d0       	rcall	.+0      	; 0x1556 <DIO_enuWriteBus+0xc>
    1556:	0f 92       	push	r0
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	9c 83       	std	Y+4, r25	; 0x04
    155e:	8b 83       	std	Y+3, r24	; 0x03
    1560:	6d 83       	std	Y+5, r22	; 0x05
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    1562:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	if(pastrPinMappingCpy !=NULL_PTR)
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	09 f4       	brne	.+2      	; 0x156e <DIO_enuWriteBus+0x24>
    156c:	3f c0       	rjmp	.+126    	; 0x15ec <DIO_enuWriteBus+0xa2>
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS )
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	81 32       	cpi	r24, 0x21	; 33
    1572:	c8 f5       	brcc	.+114    	; 0x15e6 <DIO_enuWriteBus+0x9c>
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    1574:	19 82       	std	Y+1, r1	; 0x01
    1576:	32 c0       	rjmp	.+100    	; 0x15dc <DIO_enuWriteBus+0x92>
			{
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuWritePin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , pastrPinMappingCpy[u8CntrLoc].u8PinValue );
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	c9 01       	movw	r24, r18
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	28 0f       	add	r18, r24
    1586:	39 1f       	adc	r19, r25
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	8c 01       	movw	r16, r24
    158e:	02 0f       	add	r16, r18
    1590:	13 1f       	adc	r17, r19
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	c9 01       	movw	r24, r18
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	28 0f       	add	r18, r24
    15a0:	39 1f       	adc	r19, r25
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	fc 01       	movw	r30, r24
    15a8:	e2 0f       	add	r30, r18
    15aa:	f3 1f       	adc	r31, r19
    15ac:	40 81       	ld	r20, Z
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	c9 01       	movw	r24, r18
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	28 0f       	add	r18, r24
    15bc:	39 1f       	adc	r19, r25
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	fc 01       	movw	r30, r24
    15c4:	e2 0f       	add	r30, r18
    15c6:	f3 1f       	adc	r31, r19
    15c8:	91 81       	ldd	r25, Z+1	; 0x01
    15ca:	84 2f       	mov	r24, r20
    15cc:	69 2f       	mov	r22, r25
    15ce:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>
    15d2:	f8 01       	movw	r30, r16
    15d4:	82 83       	std	Z+2, r24	; 0x02
	uint8 u8CntrLoc ;
	if(pastrPinMappingCpy !=NULL_PTR)
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS )
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	8f 5f       	subi	r24, 0xFF	; 255
    15da:	89 83       	std	Y+1, r24	; 0x01
    15dc:	99 81       	ldd	r25, Y+1	; 0x01
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	98 17       	cp	r25, r24
    15e2:	50 f2       	brcs	.-108    	; 0x1578 <DIO_enuWriteBus+0x2e>
    15e4:	05 c0       	rjmp	.+10     	; 0x15f0 <DIO_enuWriteBus+0xa6>
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuWritePin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , pastrPinMappingCpy[u8CntrLoc].u8PinValue );
			}
		}
		else
		{
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	8a 83       	std	Y+2, r24	; 0x02
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_enuWriteBus+0xa6>
		}
		
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    15ec:	83 e0       	ldi	r24, 0x03	; 3
    15ee:	8a 83       	std	Y+2, r24	; 0x02
	}
	return enuReturnStatusLoc ;
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	08 95       	ret

00001606 <DIO_enuReadBus>:

tenuErrorStatus DIO_enuReadBus(tstrPinMapping * pastrPinMappingCpy , uint8 u8SizeCpy )
{
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	00 d0       	rcall	.+0      	; 0x1610 <DIO_enuReadBus+0xa>
    1610:	00 d0       	rcall	.+0      	; 0x1612 <DIO_enuReadBus+0xc>
    1612:	0f 92       	push	r0
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	9c 83       	std	Y+4, r25	; 0x04
    161a:	8b 83       	std	Y+3, r24	; 0x03
    161c:	6d 83       	std	Y+5, r22	; 0x05
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    161e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	
	if(pastrPinMappingCpy != NULL_PTR )
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	09 f4       	brne	.+2      	; 0x162a <DIO_enuReadBus+0x24>
    1628:	40 c0       	rjmp	.+128    	; 0x16aa <DIO_enuReadBus+0xa4>
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS)
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	81 32       	cpi	r24, 0x21	; 33
    162e:	d0 f5       	brcc	.+116    	; 0x16a4 <DIO_enuReadBus+0x9e>
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    1630:	19 82       	std	Y+1, r1	; 0x01
    1632:	33 c0       	rjmp	.+102    	; 0x169a <DIO_enuReadBus+0x94>
			{
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuReadPin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , &(pastrPinMappingCpy[u8CntrLoc].u8PinValue) );
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	c9 01       	movw	r24, r18
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	28 0f       	add	r18, r24
    1642:	39 1f       	adc	r19, r25
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	8c 01       	movw	r16, r24
    164a:	02 0f       	add	r16, r18
    164c:	13 1f       	adc	r17, r19
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	c9 01       	movw	r24, r18
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	28 0f       	add	r18, r24
    165c:	39 1f       	adc	r19, r25
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	9c 81       	ldd	r25, Y+4	; 0x04
    1662:	fc 01       	movw	r30, r24
    1664:	e2 0f       	add	r30, r18
    1666:	f3 1f       	adc	r31, r19
    1668:	40 81       	ld	r20, Z
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	c9 01       	movw	r24, r18
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	28 0f       	add	r18, r24
    1678:	39 1f       	adc	r19, r25
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	9c 81       	ldd	r25, Y+4	; 0x04
    167e:	82 0f       	add	r24, r18
    1680:	93 1f       	adc	r25, r19
    1682:	9c 01       	movw	r18, r24
    1684:	2f 5f       	subi	r18, 0xFF	; 255
    1686:	3f 4f       	sbci	r19, 0xFF	; 255
    1688:	84 2f       	mov	r24, r20
    168a:	b9 01       	movw	r22, r18
    168c:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_enuReadPin>
    1690:	f8 01       	movw	r30, r16
    1692:	82 83       	std	Z+2, r24	; 0x02
	
	if(pastrPinMappingCpy != NULL_PTR )
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS)
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	8f 5f       	subi	r24, 0xFF	; 255
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	99 81       	ldd	r25, Y+1	; 0x01
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	98 17       	cp	r25, r24
    16a0:	48 f2       	brcs	.-110    	; 0x1634 <DIO_enuReadBus+0x2e>
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <DIO_enuReadBus+0xa8>
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuReadPin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , &(pastrPinMappingCpy[u8CntrLoc].u8PinValue) );
			}
		}
		else
		{
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	8a 83       	std	Y+2, r24	; 0x02
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_enuReadBus+0xa8>
		}
		
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	8a 83       	std	Y+2, r24	; 0x02
	}
	return enuReturnStatusLoc ;
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	08 95       	ret

000016c4 <DIO_enuWritePinDir>:

tenuErrorStatus DIO_enuWritePinDir(uint8 u8PinNumCpy , uint8 u8PinDirCpy)
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <DIO_enuWritePinDir+0x6>
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <DIO_enuWritePinDir+0x8>
    16cc:	0f 92       	push	r0
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	8a 83       	std	Y+2, r24	; 0x02
    16d4:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStatusLoc = E_OK ;
    16d6:	19 82       	std	Y+1, r1	; 0x01
	
	switch (u8PinDirCpy)
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3d 83       	std	Y+5, r19	; 0x05
    16e0:	2c 83       	std	Y+4, r18	; 0x04
    16e2:	8c 81       	ldd	r24, Y+4	; 0x04
    16e4:	9d 81       	ldd	r25, Y+5	; 0x05
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	09 f4       	brne	.+2      	; 0x16ec <DIO_enuWritePinDir+0x28>
    16ea:	77 c0       	rjmp	.+238    	; 0x17da <DIO_enuWritePinDir+0x116>
    16ec:	2c 81       	ldd	r18, Y+4	; 0x04
    16ee:	3d 81       	ldd	r19, Y+5	; 0x05
    16f0:	21 30       	cpi	r18, 0x01	; 1
    16f2:	31 05       	cpc	r19, r1
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <DIO_enuWritePinDir+0x34>
    16f6:	e6 c0       	rjmp	.+460    	; 0x18c4 <DIO_enuWritePinDir+0x200>
		{
			case DIO_u8OUTPUT :
			     if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	88 30       	cpi	r24, 0x08	; 8
    16fc:	a0 f4       	brcc	.+40     	; 0x1726 <DIO_enuWritePinDir+0x62>
				{
					SET_BIT(DDRA , u8PinNumCpy ) ;	
    16fe:	aa e3       	ldi	r26, 0x3A	; 58
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ea e3       	ldi	r30, 0x3A	; 58
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <DIO_enuWritePinDir+0x58>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <DIO_enuWritePinDir+0x54>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	d1 c0       	rjmp	.+418    	; 0x18c8 <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	88 30       	cpi	r24, 0x08	; 8
    172a:	d0 f0       	brcs	.+52     	; 0x1760 <DIO_enuWritePinDir+0x9c>
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	80 31       	cpi	r24, 0x10	; 16
    1730:	b8 f4       	brcc	.+46     	; 0x1760 <DIO_enuWritePinDir+0x9c>
				{
					SET_BIT(DDRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    1732:	a7 e3       	ldi	r26, 0x37	; 55
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e7 e3       	ldi	r30, 0x37	; 55
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9c 01       	movw	r18, r24
    1746:	27 70       	andi	r18, 0x07	; 7
    1748:	30 70       	andi	r19, 0x00	; 0
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	02 2e       	mov	r0, r18
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <DIO_enuWritePinDir+0x92>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	0a 94       	dec	r0
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <DIO_enuWritePinDir+0x8e>
    175a:	84 2b       	or	r24, r20
    175c:	8c 93       	st	X, r24
    175e:	b4 c0       	rjmp	.+360    	; 0x18c8 <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	80 31       	cpi	r24, 0x10	; 16
    1764:	d0 f0       	brcs	.+52     	; 0x179a <DIO_enuWritePinDir+0xd6>
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	88 31       	cpi	r24, 0x18	; 24
    176a:	b8 f4       	brcc	.+46     	; 0x179a <DIO_enuWritePinDir+0xd6>
				{
					SET_BIT(DDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    176c:	a4 e3       	ldi	r26, 0x34	; 52
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e4 e3       	ldi	r30, 0x34	; 52
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9c 01       	movw	r18, r24
    1780:	27 70       	andi	r18, 0x07	; 7
    1782:	30 70       	andi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_enuWritePinDir+0xcc>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <DIO_enuWritePinDir+0xc8>
    1794:	84 2b       	or	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	97 c0       	rjmp	.+302    	; 0x18c8 <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	88 31       	cpi	r24, 0x18	; 24
    179e:	d0 f0       	brcs	.+52     	; 0x17d4 <DIO_enuWritePinDir+0x110>
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	80 32       	cpi	r24, 0x20	; 32
    17a4:	b8 f4       	brcc	.+46     	; 0x17d4 <DIO_enuWritePinDir+0x110>
				{
					SET_BIT(DDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    17a6:	a1 e3       	ldi	r26, 0x31	; 49
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e1 e3       	ldi	r30, 0x31	; 49
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	9c 01       	movw	r18, r24
    17ba:	27 70       	andi	r18, 0x07	; 7
    17bc:	30 70       	andi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_enuWritePinDir+0x106>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_enuWritePinDir+0x102>
    17ce:	84 2b       	or	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	7a c0       	rjmp	.+244    	; 0x18c8 <DIO_enuWritePinDir+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	77 c0       	rjmp	.+238    	; 0x18c8 <DIO_enuWritePinDir+0x204>
				}
			
			break ;
			case DIO_u8INPUT :
			   if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	88 30       	cpi	r24, 0x08	; 8
    17de:	a8 f4       	brcc	.+42     	; 0x180a <DIO_enuWritePinDir+0x146>
				{		
					CLR_BIT(DDRA , u8PinNumCpy ) ;
    17e0:	aa e3       	ldi	r26, 0x3A	; 58
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	ea e3       	ldi	r30, 0x3A	; 58
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_enuWritePinDir+0x13a>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <DIO_enuWritePinDir+0x136>
    1802:	80 95       	com	r24
    1804:	84 23       	and	r24, r20
    1806:	8c 93       	st	X, r24
    1808:	5f c0       	rjmp	.+190    	; 0x18c8 <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	88 30       	cpi	r24, 0x08	; 8
    180e:	d8 f0       	brcs	.+54     	; 0x1846 <DIO_enuWritePinDir+0x182>
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	80 31       	cpi	r24, 0x10	; 16
    1814:	c0 f4       	brcc	.+48     	; 0x1846 <DIO_enuWritePinDir+0x182>
				{
					CLR_BIT(DDRB , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    1816:	a7 e3       	ldi	r26, 0x37	; 55
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e7 e3       	ldi	r30, 0x37	; 55
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	48 2f       	mov	r20, r24
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9c 01       	movw	r18, r24
    182a:	27 70       	andi	r18, 0x07	; 7
    182c:	30 70       	andi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <DIO_enuWritePinDir+0x176>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <DIO_enuWritePinDir+0x172>
    183e:	80 95       	com	r24
    1840:	84 23       	and	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	41 c0       	rjmp	.+130    	; 0x18c8 <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	80 31       	cpi	r24, 0x10	; 16
    184a:	d8 f0       	brcs	.+54     	; 0x1882 <DIO_enuWritePinDir+0x1be>
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	88 31       	cpi	r24, 0x18	; 24
    1850:	c0 f4       	brcc	.+48     	; 0x1882 <DIO_enuWritePinDir+0x1be>
				{
					CLR_BIT(DDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    1852:	a4 e3       	ldi	r26, 0x34	; 52
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e4 e3       	ldi	r30, 0x34	; 52
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9c 01       	movw	r18, r24
    1866:	27 70       	andi	r18, 0x07	; 7
    1868:	30 70       	andi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <DIO_enuWritePinDir+0x1b2>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <DIO_enuWritePinDir+0x1ae>
    187a:	80 95       	com	r24
    187c:	84 23       	and	r24, r20
    187e:	8c 93       	st	X, r24
    1880:	23 c0       	rjmp	.+70     	; 0x18c8 <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	88 31       	cpi	r24, 0x18	; 24
    1886:	d8 f0       	brcs	.+54     	; 0x18be <DIO_enuWritePinDir+0x1fa>
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	80 32       	cpi	r24, 0x20	; 32
    188c:	c0 f4       	brcc	.+48     	; 0x18be <DIO_enuWritePinDir+0x1fa>
				{
					CLR_BIT(DDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    188e:	a1 e3       	ldi	r26, 0x31	; 49
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e1 e3       	ldi	r30, 0x31	; 49
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	48 2f       	mov	r20, r24
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9c 01       	movw	r18, r24
    18a2:	27 70       	andi	r18, 0x07	; 7
    18a4:	30 70       	andi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <DIO_enuWritePinDir+0x1ee>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <DIO_enuWritePinDir+0x1ea>
    18b6:	80 95       	com	r24
    18b8:	84 23       	and	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <DIO_enuWritePinDir+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <DIO_enuWritePinDir+0x204>
				}
			break ;
			default :
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	89 83       	std	Y+1, r24	; 0x01
			break ;
			
		}
	
	return enuReturnStatusLoc ;
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <DIO_enuTogglePin>:

tenuErrorStatus DIO_enuTogglePin(uint8 u8PinNumCpy)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <DIO_enuTogglePin+0x6>
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    18e6:	19 82       	std	Y+1, r1	; 0x01
    if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	88 30       	cpi	r24, 0x08	; 8
    18ec:	a0 f4       	brcc	.+40     	; 0x1916 <DIO_enuTogglePin+0x3c>
	{
		TGL_BIT(ODRA , u8PinNumCpy ) ;
    18ee:	ab e3       	ldi	r26, 0x3B	; 59
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	eb e3       	ldi	r30, 0x3B	; 59
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 2e       	mov	r0, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <DIO_enuTogglePin+0x32>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	0a 94       	dec	r0
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <DIO_enuTogglePin+0x2e>
    1910:	84 27       	eor	r24, r20
    1912:	8c 93       	st	X, r24
    1914:	59 c0       	rjmp	.+178    	; 0x19c8 <DIO_enuTogglePin+0xee>
	}
	else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	88 30       	cpi	r24, 0x08	; 8
    191a:	d0 f0       	brcs	.+52     	; 0x1950 <DIO_enuTogglePin+0x76>
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	80 31       	cpi	r24, 0x10	; 16
    1920:	b8 f4       	brcc	.+46     	; 0x1950 <DIO_enuTogglePin+0x76>
	{
		TGL_BIT(ODRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    1922:	a8 e3       	ldi	r26, 0x38	; 56
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e8 e3       	ldi	r30, 0x38	; 56
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9c 01       	movw	r18, r24
    1936:	27 70       	andi	r18, 0x07	; 7
    1938:	30 70       	andi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_enuTogglePin+0x6c>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_enuTogglePin+0x68>
    194a:	84 27       	eor	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	3c c0       	rjmp	.+120    	; 0x19c8 <DIO_enuTogglePin+0xee>
	}
	else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	80 31       	cpi	r24, 0x10	; 16
    1954:	d0 f0       	brcs	.+52     	; 0x198a <DIO_enuTogglePin+0xb0>
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	88 31       	cpi	r24, 0x18	; 24
    195a:	b8 f4       	brcc	.+46     	; 0x198a <DIO_enuTogglePin+0xb0>
	{
		TGL_BIT(ODRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    195c:	a5 e3       	ldi	r26, 0x35	; 53
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e3       	ldi	r30, 0x35	; 53
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	48 2f       	mov	r20, r24
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9c 01       	movw	r18, r24
    1970:	27 70       	andi	r18, 0x07	; 7
    1972:	30 70       	andi	r19, 0x00	; 0
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 2e       	mov	r0, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <DIO_enuTogglePin+0xa6>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	0a 94       	dec	r0
    1982:	e2 f7       	brpl	.-8      	; 0x197c <DIO_enuTogglePin+0xa2>
    1984:	84 27       	eor	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	1f c0       	rjmp	.+62     	; 0x19c8 <DIO_enuTogglePin+0xee>
	}
	else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	88 31       	cpi	r24, 0x18	; 24
    198e:	d0 f0       	brcs	.+52     	; 0x19c4 <DIO_enuTogglePin+0xea>
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	80 32       	cpi	r24, 0x20	; 32
    1994:	b8 f4       	brcc	.+46     	; 0x19c4 <DIO_enuTogglePin+0xea>
	{
		TGL_BIT(ODRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    1996:	a2 e3       	ldi	r26, 0x32	; 50
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e2 e3       	ldi	r30, 0x32	; 50
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	88 2f       	mov	r24, r24
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9c 01       	movw	r18, r24
    19aa:	27 70       	andi	r18, 0x07	; 7
    19ac:	30 70       	andi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 2e       	mov	r0, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <DIO_enuTogglePin+0xe0>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	0a 94       	dec	r0
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <DIO_enuTogglePin+0xdc>
    19be:	84 27       	eor	r24, r20
    19c0:	8c 93       	st	X, r24
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <DIO_enuTogglePin+0xee>
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	89 83       	std	Y+1, r24	; 0x01
	}

	
	return enuReturnStatusLoc ;
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <LCD_voidInit>:


static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy) ;

void LCD_voidInit(void)
{
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	c6 5c       	subi	r28, 0xC6	; 198
    19e2:	d0 40       	sbci	r29, 0x00	; 0
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
    19ee:	fe 01       	movw	r30, r28
    19f0:	ea 53       	subi	r30, 0x3A	; 58
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	10 82       	st	Z, r1
    19f6:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <LCD_voidInit+0x15f4>
    19fa:	fe 01       	movw	r30, r28
    19fc:	ef 53       	subi	r30, 0x3F	; 63
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a0 ef       	ldi	r26, 0xF0	; 240
    1a06:	b1 e4       	ldi	r27, 0x41	; 65
    1a08:	80 83       	st	Z, r24
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	a2 83       	std	Z+2, r26	; 0x02
    1a0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a10:	8e 01       	movw	r16, r28
    1a12:	03 54       	subi	r16, 0x43	; 67
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	fe 01       	movw	r30, r28
    1a18:	ef 53       	subi	r30, 0x3F	; 63
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	93 81       	ldd	r25, Z+3	; 0x03
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	4a ef       	ldi	r20, 0xFA	; 250
    1a2a:	54 e4       	ldi	r21, 0x44	; 68
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	f8 01       	movw	r30, r16
    1a36:	80 83       	st	Z, r24
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	a2 83       	std	Z+2, r26	; 0x02
    1a3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e3 54       	subi	r30, 0x43	; 67
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e8       	ldi	r20, 0x80	; 128
    1a52:	5f e3       	ldi	r21, 0x3F	; 63
    1a54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a58:	88 23       	and	r24, r24
    1a5a:	44 f4       	brge	.+16     	; 0x1a6c <LCD_voidInit+0x98>
		__ticks = 1;
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e5 54       	subi	r30, 0x45	; 69
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
    1a6a:	64 c0       	rjmp	.+200    	; 0x1b34 <LCD_voidInit+0x160>
	else if (__tmp > 65535)
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e3 54       	subi	r30, 0x43	; 67
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	0c f0       	brlt	.+2      	; 0x1a8c <LCD_voidInit+0xb8>
    1a8a:	43 c0       	rjmp	.+134    	; 0x1b12 <LCD_voidInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	ef 53       	subi	r30, 0x3F	; 63
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	8e 01       	movw	r16, r28
    1aac:	05 54       	subi	r16, 0x45	; 69
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	f8 01       	movw	r30, r16
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
    1ac2:	1f c0       	rjmp	.+62     	; 0x1b02 <LCD_voidInit+0x12e>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e7 54       	subi	r30, 0x47	; 71
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	88 ec       	ldi	r24, 0xC8	; 200
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e7 54       	subi	r30, 0x47	; 71
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <LCD_voidInit+0x108>
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e7 54       	subi	r30, 0x47	; 71
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aea:	de 01       	movw	r26, r28
    1aec:	a5 54       	subi	r26, 0x45	; 69
    1aee:	bf 4f       	sbci	r27, 0xFF	; 255
    1af0:	fe 01       	movw	r30, r28
    1af2:	e5 54       	subi	r30, 0x45	; 69
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	11 96       	adiw	r26, 0x01	; 1
    1afe:	9c 93       	st	X, r25
    1b00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b02:	fe 01       	movw	r30, r28
    1b04:	e5 54       	subi	r30, 0x45	; 69
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 81       	ld	r24, Z
    1b0a:	91 81       	ldd	r25, Z+1	; 0x01
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	d1 f6       	brne	.-76     	; 0x1ac4 <LCD_voidInit+0xf0>
    1b10:	28 c0       	rjmp	.+80     	; 0x1b62 <LCD_voidInit+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	8e 01       	movw	r16, r28
    1b14:	05 54       	subi	r16, 0x45	; 69
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	fe 01       	movw	r30, r28
    1b1a:	e3 54       	subi	r30, 0x43	; 67
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	f8 01       	movw	r30, r16
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
    1b34:	de 01       	movw	r26, r28
    1b36:	a9 54       	subi	r26, 0x49	; 73
    1b38:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e5 54       	subi	r30, 0x45	; 69
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	91 81       	ldd	r25, Z+1	; 0x01
    1b44:	11 96       	adiw	r26, 0x01	; 1
    1b46:	9c 93       	st	X, r25
    1b48:	8e 93       	st	-X, r24
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e9 54       	subi	r30, 0x49	; 73
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <LCD_voidInit+0x180>
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e9 54       	subi	r30, 0x49	; 73
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	80 83       	st	Z, r24
	{
		_delay_ms(30);
		if (LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
    1b62:	fe 01       	movw	r30, r28
    1b64:	ea 53       	subi	r30, 0x3A	; 58
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	80 81       	ld	r24, Z
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	c9 01       	movw	r24, r18
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	82 0f       	add	r24, r18
    1b76:	93 1f       	adc	r25, r19
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	fc 01       	movw	r30, r24
    1b82:	e1 58       	subi	r30, 0x81	; 129
    1b84:	fe 4f       	sbci	r31, 0xFE	; 254
    1b86:	80 81       	ld	r24, Z
    1b88:	82 95       	swap	r24
    1b8a:	86 95       	lsr	r24
    1b8c:	87 70       	andi	r24, 0x07	; 7
    1b8e:	81 70       	andi	r24, 0x01	; 1
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <LCD_voidInit+0x1c2>
    1b94:	bf c3       	rjmp	.+1918   	; 0x2314 <LCD_voidInit+0x940>
		{
			u8CmdLoc = 0x30|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<3 |
    1b96:	fe 01       	movw	r30, r28
    1b98:	ea 53       	subi	r30, 0x3A	; 58
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	80 81       	ld	r24, Z
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	c9 01       	movw	r24, r18
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	82 0f       	add	r24, r18
    1baa:	93 1f       	adc	r25, r19
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	e1 58       	subi	r30, 0x81	; 129
    1bb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bba:	80 81       	ld	r24, Z
    1bbc:	81 70       	andi	r24, 0x01	; 1
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	48 2f       	mov	r20, r24
    1bd0:	40 63       	ori	r20, 0x30	; 48
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ea 53       	subi	r30, 0x3A	; 58
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 81       	ld	r24, Z
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	c9 01       	movw	r24, r18
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	82 0f       	add	r24, r18
    1be6:	93 1f       	adc	r25, r19
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	e1 58       	subi	r30, 0x81	; 129
    1bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf6:	80 81       	ld	r24, Z
    1bf8:	86 95       	lsr	r24
    1bfa:	81 70       	andi	r24, 0x01	; 1
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	84 2b       	or	r24, r20
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	eb 53       	subi	r30, 0x3B	; 59
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	80 83       	st	Z, r24
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<2 ;

			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    1c12:	fe 01       	movw	r30, r28
    1c14:	ea 53       	subi	r30, 0x3A	; 58
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	de 01       	movw	r26, r28
    1c1a:	ab 53       	subi	r26, 0x3B	; 59
    1c1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c1e:	80 81       	ld	r24, Z
    1c20:	6c 91       	ld	r22, X
    1c22:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    1c26:	fe 01       	movw	r30, r28
    1c28:	ed 54       	subi	r30, 0x4D	; 77
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a0 e8       	ldi	r26, 0x80	; 128
    1c32:	bf e3       	ldi	r27, 0x3F	; 63
    1c34:	80 83       	st	Z, r24
    1c36:	91 83       	std	Z+1, r25	; 0x01
    1c38:	a2 83       	std	Z+2, r26	; 0x02
    1c3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3c:	8e 01       	movw	r16, r28
    1c3e:	01 55       	subi	r16, 0x51	; 81
    1c40:	1f 4f       	sbci	r17, 0xFF	; 255
    1c42:	fe 01       	movw	r30, r28
    1c44:	ed 54       	subi	r30, 0x4D	; 77
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4a ef       	ldi	r20, 0xFA	; 250
    1c56:	54 e4       	ldi	r21, 0x44	; 68
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	f8 01       	movw	r30, r16
    1c62:	80 83       	st	Z, r24
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	a2 83       	std	Z+2, r26	; 0x02
    1c68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e1 55       	subi	r30, 0x51	; 81
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	60 81       	ld	r22, Z
    1c72:	71 81       	ldd	r23, Z+1	; 0x01
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	93 81       	ldd	r25, Z+3	; 0x03
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e8       	ldi	r20, 0x80	; 128
    1c7e:	5f e3       	ldi	r21, 0x3F	; 63
    1c80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c84:	88 23       	and	r24, r24
    1c86:	44 f4       	brge	.+16     	; 0x1c98 <LCD_voidInit+0x2c4>
		__ticks = 1;
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e3 55       	subi	r30, 0x53	; 83
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	80 83       	st	Z, r24
    1c96:	64 c0       	rjmp	.+200    	; 0x1d60 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e1 55       	subi	r30, 0x51	; 81
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	3f ef       	ldi	r19, 0xFF	; 255
    1caa:	4f e7       	ldi	r20, 0x7F	; 127
    1cac:	57 e4       	ldi	r21, 0x47	; 71
    1cae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb2:	18 16       	cp	r1, r24
    1cb4:	0c f0       	brlt	.+2      	; 0x1cb8 <LCD_voidInit+0x2e4>
    1cb6:	43 c0       	rjmp	.+134    	; 0x1d3e <LCD_voidInit+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb8:	fe 01       	movw	r30, r28
    1cba:	ed 54       	subi	r30, 0x4D	; 77
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e2       	ldi	r20, 0x20	; 32
    1ccc:	51 e4       	ldi	r21, 0x41	; 65
    1cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	8e 01       	movw	r16, r28
    1cd8:	03 55       	subi	r16, 0x53	; 83
    1cda:	1f 4f       	sbci	r17, 0xFF	; 255
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	f8 01       	movw	r30, r16
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	80 83       	st	Z, r24
    1cee:	1f c0       	rjmp	.+62     	; 0x1d2e <LCD_voidInit+0x35a>
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	e5 55       	subi	r30, 0x55	; 85
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	88 ec       	ldi	r24, 0xC8	; 200
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	80 83       	st	Z, r24
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e5 55       	subi	r30, 0x55	; 85
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_voidInit+0x334>
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e5 55       	subi	r30, 0x55	; 85
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d16:	de 01       	movw	r26, r28
    1d18:	a3 55       	subi	r26, 0x53	; 83
    1d1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e3 55       	subi	r30, 0x53	; 83
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	80 81       	ld	r24, Z
    1d24:	91 81       	ldd	r25, Z+1	; 0x01
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	11 96       	adiw	r26, 0x01	; 1
    1d2a:	9c 93       	st	X, r25
    1d2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e3 55       	subi	r30, 0x53	; 83
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	91 81       	ldd	r25, Z+1	; 0x01
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	d1 f6       	brne	.-76     	; 0x1cf0 <LCD_voidInit+0x31c>
    1d3c:	27 c0       	rjmp	.+78     	; 0x1d8c <LCD_voidInit+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3e:	8e 01       	movw	r16, r28
    1d40:	03 55       	subi	r16, 0x53	; 83
    1d42:	1f 4f       	sbci	r17, 0xFF	; 255
    1d44:	fe 01       	movw	r30, r28
    1d46:	e1 55       	subi	r30, 0x51	; 81
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	91 83       	std	Z+1, r25	; 0x01
    1d5e:	80 83       	st	Z, r24
    1d60:	de 01       	movw	r26, r28
    1d62:	a7 55       	subi	r26, 0x57	; 87
    1d64:	bf 4f       	sbci	r27, 0xFF	; 255
    1d66:	fe 01       	movw	r30, r28
    1d68:	e3 55       	subi	r30, 0x53	; 83
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 81       	ld	r24, Z
    1d6e:	91 81       	ldd	r25, Z+1	; 0x01
    1d70:	8d 93       	st	X+, r24
    1d72:	9c 93       	st	X, r25
    1d74:	fe 01       	movw	r30, r28
    1d76:	e7 55       	subi	r30, 0x57	; 87
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	80 81       	ld	r24, Z
    1d7c:	91 81       	ldd	r25, Z+1	; 0x01
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_voidInit+0x3aa>
    1d82:	fe 01       	movw	r30, r28
    1d84:	e7 55       	subi	r30, 0x57	; 87
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	80 83       	st	Z, r24
		    _delay_ms(1);

			u8CmdLoc = 0x08 |LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<2 |
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	ea 53       	subi	r30, 0x3A	; 58
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	80 81       	ld	r24, Z
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	c9 01       	movw	r24, r18
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	82 0f       	add	r24, r18
    1da0:	93 1f       	adc	r25, r19
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	fc 01       	movw	r30, r24
    1dac:	e1 58       	subi	r30, 0x81	; 129
    1dae:	fe 4f       	sbci	r31, 0xFE	; 254
    1db0:	80 81       	ld	r24, Z
    1db2:	86 95       	lsr	r24
    1db4:	86 95       	lsr	r24
    1db6:	81 70       	andi	r24, 0x01	; 1
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	48 60       	ori	r20, 0x08	; 8
    1dc8:	fe 01       	movw	r30, r28
    1dca:	ea 53       	subi	r30, 0x3A	; 58
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	c9 01       	movw	r24, r18
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	82 0f       	add	r24, r18
    1ddc:	93 1f       	adc	r25, r19
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	fc 01       	movw	r30, r24
    1de8:	e1 58       	subi	r30, 0x81	; 129
    1dea:	fe 4f       	sbci	r31, 0xFE	; 254
    1dec:	80 81       	ld	r24, Z
    1dee:	86 95       	lsr	r24
    1df0:	86 95       	lsr	r24
    1df2:	86 95       	lsr	r24
    1df4:	81 70       	andi	r24, 0x01	; 1
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	48 2b       	or	r20, r24
    1e00:	fe 01       	movw	r30, r28
    1e02:	ea 53       	subi	r30, 0x3A	; 58
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 81       	ld	r24, Z
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	c9 01       	movw	r24, r18
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	82 0f       	add	r24, r18
    1e14:	93 1f       	adc	r25, r19
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	fc 01       	movw	r30, r24
    1e20:	e1 58       	subi	r30, 0x81	; 129
    1e22:	fe 4f       	sbci	r31, 0xFE	; 254
    1e24:	80 81       	ld	r24, Z
    1e26:	82 95       	swap	r24
    1e28:	8f 70       	andi	r24, 0x0F	; 15
    1e2a:	81 70       	andi	r24, 0x01	; 1
    1e2c:	84 2b       	or	r24, r20
    1e2e:	fe 01       	movw	r30, r28
    1e30:	eb 53       	subi	r30, 0x3B	; 59
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	80 83       	st	Z, r24
                             LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<1 |
							 LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<0 ;

			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    1e36:	fe 01       	movw	r30, r28
    1e38:	ea 53       	subi	r30, 0x3A	; 58
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	de 01       	movw	r26, r28
    1e3e:	ab 53       	subi	r26, 0x3B	; 59
    1e40:	bf 4f       	sbci	r27, 0xFF	; 255
    1e42:	80 81       	ld	r24, Z
    1e44:	6c 91       	ld	r22, X
    1e46:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	eb 55       	subi	r30, 0x5B	; 91
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e8       	ldi	r26, 0x80	; 128
    1e56:	bf e3       	ldi	r27, 0x3F	; 63
    1e58:	80 83       	st	Z, r24
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	a2 83       	std	Z+2, r26	; 0x02
    1e5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e60:	8e 01       	movw	r16, r28
    1e62:	0f 55       	subi	r16, 0x5F	; 95
    1e64:	1f 4f       	sbci	r17, 0xFF	; 255
    1e66:	fe 01       	movw	r30, r28
    1e68:	eb 55       	subi	r30, 0x5B	; 91
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	60 81       	ld	r22, Z
    1e6e:	71 81       	ldd	r23, Z+1	; 0x01
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	4a ef       	ldi	r20, 0xFA	; 250
    1e7a:	54 e4       	ldi	r21, 0x44	; 68
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	f8 01       	movw	r30, r16
    1e86:	80 83       	st	Z, r24
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	a2 83       	std	Z+2, r26	; 0x02
    1e8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e8e:	fe 01       	movw	r30, r28
    1e90:	ef 55       	subi	r30, 0x5F	; 95
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	60 81       	ld	r22, Z
    1e96:	71 81       	ldd	r23, Z+1	; 0x01
    1e98:	82 81       	ldd	r24, Z+2	; 0x02
    1e9a:	93 81       	ldd	r25, Z+3	; 0x03
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	44 f4       	brge	.+16     	; 0x1ebc <LCD_voidInit+0x4e8>
		__ticks = 1;
    1eac:	fe 01       	movw	r30, r28
    1eae:	e1 56       	subi	r30, 0x61	; 97
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	80 83       	st	Z, r24
    1eba:	64 c0       	rjmp	.+200    	; 0x1f84 <LCD_voidInit+0x5b0>
	else if (__tmp > 65535)
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	ef 55       	subi	r30, 0x5F	; 95
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	60 81       	ld	r22, Z
    1ec4:	71 81       	ldd	r23, Z+1	; 0x01
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	57 e4       	ldi	r21, 0x47	; 71
    1ed2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	0c f0       	brlt	.+2      	; 0x1edc <LCD_voidInit+0x508>
    1eda:	43 c0       	rjmp	.+134    	; 0x1f62 <LCD_voidInit+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1edc:	fe 01       	movw	r30, r28
    1ede:	eb 55       	subi	r30, 0x5B	; 91
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	60 81       	ld	r22, Z
    1ee4:	71 81       	ldd	r23, Z+1	; 0x01
    1ee6:	82 81       	ldd	r24, Z+2	; 0x02
    1ee8:	93 81       	ldd	r25, Z+3	; 0x03
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e2       	ldi	r20, 0x20	; 32
    1ef0:	51 e4       	ldi	r21, 0x41	; 65
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	8e 01       	movw	r16, r28
    1efc:	01 56       	subi	r16, 0x61	; 97
    1efe:	1f 4f       	sbci	r17, 0xFF	; 255
    1f00:	bc 01       	movw	r22, r24
    1f02:	cd 01       	movw	r24, r26
    1f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	f8 01       	movw	r30, r16
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	80 83       	st	Z, r24
    1f12:	1f c0       	rjmp	.+62     	; 0x1f52 <LCD_voidInit+0x57e>
    1f14:	fe 01       	movw	r30, r28
    1f16:	e3 56       	subi	r30, 0x63	; 99
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	88 ec       	ldi	r24, 0xC8	; 200
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
    1f22:	fe 01       	movw	r30, r28
    1f24:	e3 56       	subi	r30, 0x63	; 99
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_voidInit+0x558>
    1f30:	fe 01       	movw	r30, r28
    1f32:	e3 56       	subi	r30, 0x63	; 99
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	de 01       	movw	r26, r28
    1f3c:	a1 56       	subi	r26, 0x61	; 97
    1f3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f40:	fe 01       	movw	r30, r28
    1f42:	e1 56       	subi	r30, 0x61	; 97
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	80 81       	ld	r24, Z
    1f48:	91 81       	ldd	r25, Z+1	; 0x01
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	11 96       	adiw	r26, 0x01	; 1
    1f4e:	9c 93       	st	X, r25
    1f50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f52:	fe 01       	movw	r30, r28
    1f54:	e1 56       	subi	r30, 0x61	; 97
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	d1 f6       	brne	.-76     	; 0x1f14 <LCD_voidInit+0x540>
    1f60:	27 c0       	rjmp	.+78     	; 0x1fb0 <LCD_voidInit+0x5dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f62:	8e 01       	movw	r16, r28
    1f64:	01 56       	subi	r16, 0x61	; 97
    1f66:	1f 4f       	sbci	r17, 0xFF	; 255
    1f68:	fe 01       	movw	r30, r28
    1f6a:	ef 55       	subi	r30, 0x5F	; 95
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	f8 01       	movw	r30, r16
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	80 83       	st	Z, r24
    1f84:	de 01       	movw	r26, r28
    1f86:	a5 56       	subi	r26, 0x65	; 101
    1f88:	bf 4f       	sbci	r27, 0xFF	; 255
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e1 56       	subi	r30, 0x61	; 97
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	80 81       	ld	r24, Z
    1f92:	91 81       	ldd	r25, Z+1	; 0x01
    1f94:	8d 93       	st	X+, r24
    1f96:	9c 93       	st	X, r25
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e5 56       	subi	r30, 0x65	; 101
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	80 81       	ld	r24, Z
    1fa0:	91 81       	ldd	r25, Z+1	; 0x01
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_voidInit+0x5ce>
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e5 56       	subi	r30, 0x65	; 101
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	91 83       	std	Z+1, r25	; 0x01
    1fae:	80 83       	st	Z, r24
		    _delay_ms(1);

			LCD_enuWriteCmd(u8CntrLoc , LCD_u8CLEAR);
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	ea 53       	subi	r30, 0x3A	; 58
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 81       	ld	r24, Z
    1fb8:	61 e0       	ldi	r22, 0x01	; 1
    1fba:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e9 56       	subi	r30, 0x69	; 105
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	a0 e0       	ldi	r26, 0x00	; 0
    1fca:	b0 e4       	ldi	r27, 0x40	; 64
    1fcc:	80 83       	st	Z, r24
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	a2 83       	std	Z+2, r26	; 0x02
    1fd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd4:	8e 01       	movw	r16, r28
    1fd6:	0d 56       	subi	r16, 0x6D	; 109
    1fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e9 56       	subi	r30, 0x69	; 105
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	60 81       	ld	r22, Z
    1fe2:	71 81       	ldd	r23, Z+1	; 0x01
    1fe4:	82 81       	ldd	r24, Z+2	; 0x02
    1fe6:	93 81       	ldd	r25, Z+3	; 0x03
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	4a ef       	ldi	r20, 0xFA	; 250
    1fee:	54 e4       	ldi	r21, 0x44	; 68
    1ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	f8 01       	movw	r30, r16
    1ffa:	80 83       	st	Z, r24
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	a2 83       	std	Z+2, r26	; 0x02
    2000:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2002:	fe 01       	movw	r30, r28
    2004:	ed 56       	subi	r30, 0x6D	; 109
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e8       	ldi	r20, 0x80	; 128
    2016:	5f e3       	ldi	r21, 0x3F	; 63
    2018:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    201c:	88 23       	and	r24, r24
    201e:	44 f4       	brge	.+16     	; 0x2030 <LCD_voidInit+0x65c>
		__ticks = 1;
    2020:	fe 01       	movw	r30, r28
    2022:	ef 56       	subi	r30, 0x6F	; 111
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	91 83       	std	Z+1, r25	; 0x01
    202c:	80 83       	st	Z, r24
    202e:	64 c0       	rjmp	.+200    	; 0x20f8 <LCD_voidInit+0x724>
	else if (__tmp > 65535)
    2030:	fe 01       	movw	r30, r28
    2032:	ed 56       	subi	r30, 0x6D	; 109
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	0c f0       	brlt	.+2      	; 0x2050 <LCD_voidInit+0x67c>
    204e:	43 c0       	rjmp	.+134    	; 0x20d6 <LCD_voidInit+0x702>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2050:	fe 01       	movw	r30, r28
    2052:	e9 56       	subi	r30, 0x69	; 105
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	60 81       	ld	r22, Z
    2058:	71 81       	ldd	r23, Z+1	; 0x01
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e2       	ldi	r20, 0x20	; 32
    2064:	51 e4       	ldi	r21, 0x41	; 65
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	8e 01       	movw	r16, r28
    2070:	0f 56       	subi	r16, 0x6F	; 111
    2072:	1f 4f       	sbci	r17, 0xFF	; 255
    2074:	bc 01       	movw	r22, r24
    2076:	cd 01       	movw	r24, r26
    2078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	f8 01       	movw	r30, r16
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
    2086:	1f c0       	rjmp	.+62     	; 0x20c6 <LCD_voidInit+0x6f2>
    2088:	fe 01       	movw	r30, r28
    208a:	e1 57       	subi	r30, 0x71	; 113
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	88 ec       	ldi	r24, 0xC8	; 200
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	80 83       	st	Z, r24
    2096:	fe 01       	movw	r30, r28
    2098:	e1 57       	subi	r30, 0x71	; 113
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 81       	ld	r24, Z
    209e:	91 81       	ldd	r25, Z+1	; 0x01
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <LCD_voidInit+0x6cc>
    20a4:	fe 01       	movw	r30, r28
    20a6:	e1 57       	subi	r30, 0x71	; 113
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	91 83       	std	Z+1, r25	; 0x01
    20ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ae:	de 01       	movw	r26, r28
    20b0:	af 56       	subi	r26, 0x6F	; 111
    20b2:	bf 4f       	sbci	r27, 0xFF	; 255
    20b4:	fe 01       	movw	r30, r28
    20b6:	ef 56       	subi	r30, 0x6F	; 111
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 81       	ld	r24, Z
    20bc:	91 81       	ldd	r25, Z+1	; 0x01
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	11 96       	adiw	r26, 0x01	; 1
    20c2:	9c 93       	st	X, r25
    20c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c6:	fe 01       	movw	r30, r28
    20c8:	ef 56       	subi	r30, 0x6F	; 111
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	80 81       	ld	r24, Z
    20ce:	91 81       	ldd	r25, Z+1	; 0x01
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	d1 f6       	brne	.-76     	; 0x2088 <LCD_voidInit+0x6b4>
    20d4:	27 c0       	rjmp	.+78     	; 0x2124 <LCD_voidInit+0x750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d6:	8e 01       	movw	r16, r28
    20d8:	0f 56       	subi	r16, 0x6F	; 111
    20da:	1f 4f       	sbci	r17, 0xFF	; 255
    20dc:	fe 01       	movw	r30, r28
    20de:	ed 56       	subi	r30, 0x6D	; 109
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	60 81       	ld	r22, Z
    20e4:	71 81       	ldd	r23, Z+1	; 0x01
    20e6:	82 81       	ldd	r24, Z+2	; 0x02
    20e8:	93 81       	ldd	r25, Z+3	; 0x03
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	f8 01       	movw	r30, r16
    20f4:	91 83       	std	Z+1, r25	; 0x01
    20f6:	80 83       	st	Z, r24
    20f8:	de 01       	movw	r26, r28
    20fa:	a3 57       	subi	r26, 0x73	; 115
    20fc:	bf 4f       	sbci	r27, 0xFF	; 255
    20fe:	fe 01       	movw	r30, r28
    2100:	ef 56       	subi	r30, 0x6F	; 111
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	80 81       	ld	r24, Z
    2106:	91 81       	ldd	r25, Z+1	; 0x01
    2108:	8d 93       	st	X+, r24
    210a:	9c 93       	st	X, r25
    210c:	fe 01       	movw	r30, r28
    210e:	e3 57       	subi	r30, 0x73	; 115
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	80 81       	ld	r24, Z
    2114:	91 81       	ldd	r25, Z+1	; 0x01
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f1 f7       	brne	.-4      	; 0x2116 <LCD_voidInit+0x742>
    211a:	fe 01       	movw	r30, r28
    211c:	e3 57       	subi	r30, 0x73	; 115
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	80 83       	st	Z, r24
		    _delay_ms(2);

			u8CmdLoc = 0x04|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment   <<1 |
    2124:	fe 01       	movw	r30, r28
    2126:	ea 53       	subi	r30, 0x3A	; 58
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	c9 01       	movw	r24, r18
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	82 0f       	add	r24, r18
    2138:	93 1f       	adc	r25, r19
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	fc 01       	movw	r30, r24
    2144:	e1 58       	subi	r30, 0x81	; 129
    2146:	fe 4f       	sbci	r31, 0xFE	; 254
    2148:	80 81       	ld	r24, Z
    214a:	82 95       	swap	r24
    214c:	86 95       	lsr	r24
    214e:	86 95       	lsr	r24
    2150:	83 70       	andi	r24, 0x03	; 3
    2152:	81 70       	andi	r24, 0x01	; 1
    2154:	88 2f       	mov	r24, r24
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	48 2f       	mov	r20, r24
    215e:	44 60       	ori	r20, 0x04	; 4
    2160:	fe 01       	movw	r30, r28
    2162:	ea 53       	subi	r30, 0x3A	; 58
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 81       	ld	r24, Z
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	c9 01       	movw	r24, r18
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	82 0f       	add	r24, r18
    2174:	93 1f       	adc	r25, r19
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	fc 01       	movw	r30, r24
    2180:	e1 58       	subi	r30, 0x81	; 129
    2182:	fe 4f       	sbci	r31, 0xFE	; 254
    2184:	80 81       	ld	r24, Z
    2186:	88 1f       	adc	r24, r24
    2188:	88 27       	eor	r24, r24
    218a:	88 1f       	adc	r24, r24
    218c:	84 2b       	or	r24, r20
    218e:	fe 01       	movw	r30, r28
    2190:	eb 53       	subi	r30, 0x3B	; 59
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	80 83       	st	Z, r24
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift<<0 ;

			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    2196:	fe 01       	movw	r30, r28
    2198:	ea 53       	subi	r30, 0x3A	; 58
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	de 01       	movw	r26, r28
    219e:	ab 53       	subi	r26, 0x3B	; 59
    21a0:	bf 4f       	sbci	r27, 0xFF	; 255
    21a2:	80 81       	ld	r24, Z
    21a4:	6c 91       	ld	r22, X
    21a6:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    21aa:	fe 01       	movw	r30, r28
    21ac:	e7 57       	subi	r30, 0x77	; 119
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	a0 e0       	ldi	r26, 0x00	; 0
    21b6:	b0 e4       	ldi	r27, 0x40	; 64
    21b8:	80 83       	st	Z, r24
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	a2 83       	std	Z+2, r26	; 0x02
    21be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c0:	8e 01       	movw	r16, r28
    21c2:	0b 57       	subi	r16, 0x7B	; 123
    21c4:	1f 4f       	sbci	r17, 0xFF	; 255
    21c6:	fe 01       	movw	r30, r28
    21c8:	e7 57       	subi	r30, 0x77	; 119
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	60 81       	ld	r22, Z
    21ce:	71 81       	ldd	r23, Z+1	; 0x01
    21d0:	82 81       	ldd	r24, Z+2	; 0x02
    21d2:	93 81       	ldd	r25, Z+3	; 0x03
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	4a ef       	ldi	r20, 0xFA	; 250
    21da:	54 e4       	ldi	r21, 0x44	; 68
    21dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	f8 01       	movw	r30, r16
    21e6:	80 83       	st	Z, r24
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	a2 83       	std	Z+2, r26	; 0x02
    21ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21ee:	fe 01       	movw	r30, r28
    21f0:	eb 57       	subi	r30, 0x7B	; 123
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e8       	ldi	r20, 0x80	; 128
    2202:	5f e3       	ldi	r21, 0x3F	; 63
    2204:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2208:	88 23       	and	r24, r24
    220a:	44 f4       	brge	.+16     	; 0x221c <LCD_voidInit+0x848>
		__ticks = 1;
    220c:	fe 01       	movw	r30, r28
    220e:	ed 57       	subi	r30, 0x7D	; 125
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	80 83       	st	Z, r24
    221a:	64 c0       	rjmp	.+200    	; 0x22e4 <LCD_voidInit+0x910>
	else if (__tmp > 65535)
    221c:	fe 01       	movw	r30, r28
    221e:	eb 57       	subi	r30, 0x7B	; 123
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	60 81       	ld	r22, Z
    2224:	71 81       	ldd	r23, Z+1	; 0x01
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	0c f0       	brlt	.+2      	; 0x223c <LCD_voidInit+0x868>
    223a:	43 c0       	rjmp	.+134    	; 0x22c2 <LCD_voidInit+0x8ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223c:	fe 01       	movw	r30, r28
    223e:	e7 57       	subi	r30, 0x77	; 119
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	60 81       	ld	r22, Z
    2244:	71 81       	ldd	r23, Z+1	; 0x01
    2246:	82 81       	ldd	r24, Z+2	; 0x02
    2248:	93 81       	ldd	r25, Z+3	; 0x03
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e2       	ldi	r20, 0x20	; 32
    2250:	51 e4       	ldi	r21, 0x41	; 65
    2252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	8e 01       	movw	r16, r28
    225c:	0d 57       	subi	r16, 0x7D	; 125
    225e:	1f 4f       	sbci	r17, 0xFF	; 255
    2260:	bc 01       	movw	r22, r24
    2262:	cd 01       	movw	r24, r26
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	f8 01       	movw	r30, r16
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
    2272:	1f c0       	rjmp	.+62     	; 0x22b2 <LCD_voidInit+0x8de>
    2274:	fe 01       	movw	r30, r28
    2276:	ef 57       	subi	r30, 0x7F	; 127
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	88 ec       	ldi	r24, 0xC8	; 200
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	80 83       	st	Z, r24
    2282:	fe 01       	movw	r30, r28
    2284:	ef 57       	subi	r30, 0x7F	; 127
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 81       	ld	r24, Z
    228a:	91 81       	ldd	r25, Z+1	; 0x01
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <LCD_voidInit+0x8b8>
    2290:	fe 01       	movw	r30, r28
    2292:	ef 57       	subi	r30, 0x7F	; 127
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229a:	de 01       	movw	r26, r28
    229c:	ad 57       	subi	r26, 0x7D	; 125
    229e:	bf 4f       	sbci	r27, 0xFF	; 255
    22a0:	fe 01       	movw	r30, r28
    22a2:	ed 57       	subi	r30, 0x7D	; 125
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 81       	ld	r24, Z
    22a8:	91 81       	ldd	r25, Z+1	; 0x01
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	11 96       	adiw	r26, 0x01	; 1
    22ae:	9c 93       	st	X, r25
    22b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b2:	fe 01       	movw	r30, r28
    22b4:	ed 57       	subi	r30, 0x7D	; 125
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 81       	ld	r24, Z
    22ba:	91 81       	ldd	r25, Z+1	; 0x01
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	d1 f6       	brne	.-76     	; 0x2274 <LCD_voidInit+0x8a0>
    22c0:	7a c6       	rjmp	.+3316   	; 0x2fb6 <LCD_voidInit+0x15e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c2:	8e 01       	movw	r16, r28
    22c4:	0d 57       	subi	r16, 0x7D	; 125
    22c6:	1f 4f       	sbci	r17, 0xFF	; 255
    22c8:	fe 01       	movw	r30, r28
    22ca:	eb 57       	subi	r30, 0x7B	; 123
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	60 81       	ld	r22, Z
    22d0:	71 81       	ldd	r23, Z+1	; 0x01
    22d2:	82 81       	ldd	r24, Z+2	; 0x02
    22d4:	93 81       	ldd	r25, Z+3	; 0x03
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	f8 01       	movw	r30, r16
    22e0:	91 83       	std	Z+1, r25	; 0x01
    22e2:	80 83       	st	Z, r24
    22e4:	de 01       	movw	r26, r28
    22e6:	a1 58       	subi	r26, 0x81	; 129
    22e8:	bf 4f       	sbci	r27, 0xFF	; 255
    22ea:	fe 01       	movw	r30, r28
    22ec:	ed 57       	subi	r30, 0x7D	; 125
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	80 81       	ld	r24, Z
    22f2:	91 81       	ldd	r25, Z+1	; 0x01
    22f4:	11 96       	adiw	r26, 0x01	; 1
    22f6:	9c 93       	st	X, r25
    22f8:	8e 93       	st	-X, r24
    22fa:	fe 01       	movw	r30, r28
    22fc:	e1 58       	subi	r30, 0x81	; 129
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_voidInit+0x930>
    2308:	fe 01       	movw	r30, r28
    230a:	e1 58       	subi	r30, 0x81	; 129
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	80 83       	st	Z, r24
    2312:	51 c6       	rjmp	.+3234   	; 0x2fb6 <LCD_voidInit+0x15e2>
			 _delay_ms(2);

		}
		else
		{
				LCD_enuWriteCmd(u8CntrLoc , 0x20);
    2314:	fe 01       	movw	r30, r28
    2316:	ea 53       	subi	r30, 0x3A	; 58
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 81       	ld	r24, Z
    231c:	60 e2       	ldi	r22, 0x20	; 32
    231e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    2322:	fe 01       	movw	r30, r28
    2324:	e5 58       	subi	r30, 0x85	; 133
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	a0 e8       	ldi	r26, 0x80	; 128
    232e:	bf e3       	ldi	r27, 0x3F	; 63
    2330:	80 83       	st	Z, r24
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	a2 83       	std	Z+2, r26	; 0x02
    2336:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2338:	8e 01       	movw	r16, r28
    233a:	09 58       	subi	r16, 0x89	; 137
    233c:	1f 4f       	sbci	r17, 0xFF	; 255
    233e:	fe 01       	movw	r30, r28
    2340:	e5 58       	subi	r30, 0x85	; 133
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	60 81       	ld	r22, Z
    2346:	71 81       	ldd	r23, Z+1	; 0x01
    2348:	82 81       	ldd	r24, Z+2	; 0x02
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	4a ef       	ldi	r20, 0xFA	; 250
    2352:	54 e4       	ldi	r21, 0x44	; 68
    2354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	f8 01       	movw	r30, r16
    235e:	80 83       	st	Z, r24
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	a2 83       	std	Z+2, r26	; 0x02
    2364:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2366:	fe 01       	movw	r30, r28
    2368:	e9 58       	subi	r30, 0x89	; 137
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e8       	ldi	r20, 0x80	; 128
    237a:	5f e3       	ldi	r21, 0x3F	; 63
    237c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2380:	88 23       	and	r24, r24
    2382:	44 f4       	brge	.+16     	; 0x2394 <LCD_voidInit+0x9c0>
		__ticks = 1;
    2384:	fe 01       	movw	r30, r28
    2386:	eb 58       	subi	r30, 0x8B	; 139
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	91 83       	std	Z+1, r25	; 0x01
    2390:	80 83       	st	Z, r24
    2392:	64 c0       	rjmp	.+200    	; 0x245c <LCD_voidInit+0xa88>
	else if (__tmp > 65535)
    2394:	fe 01       	movw	r30, r28
    2396:	e9 58       	subi	r30, 0x89	; 137
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	60 81       	ld	r22, Z
    239c:	71 81       	ldd	r23, Z+1	; 0x01
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	0c f0       	brlt	.+2      	; 0x23b4 <LCD_voidInit+0x9e0>
    23b2:	43 c0       	rjmp	.+134    	; 0x243a <LCD_voidInit+0xa66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	fe 01       	movw	r30, r28
    23b6:	e5 58       	subi	r30, 0x85	; 133
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	60 81       	ld	r22, Z
    23bc:	71 81       	ldd	r23, Z+1	; 0x01
    23be:	82 81       	ldd	r24, Z+2	; 0x02
    23c0:	93 81       	ldd	r25, Z+3	; 0x03
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e2       	ldi	r20, 0x20	; 32
    23c8:	51 e4       	ldi	r21, 0x41	; 65
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	8e 01       	movw	r16, r28
    23d4:	0b 58       	subi	r16, 0x8B	; 139
    23d6:	1f 4f       	sbci	r17, 0xFF	; 255
    23d8:	bc 01       	movw	r22, r24
    23da:	cd 01       	movw	r24, r26
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	f8 01       	movw	r30, r16
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	80 83       	st	Z, r24
    23ea:	1f c0       	rjmp	.+62     	; 0x242a <LCD_voidInit+0xa56>
    23ec:	fe 01       	movw	r30, r28
    23ee:	ed 58       	subi	r30, 0x8D	; 141
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	88 ec       	ldi	r24, 0xC8	; 200
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	91 83       	std	Z+1, r25	; 0x01
    23f8:	80 83       	st	Z, r24
    23fa:	fe 01       	movw	r30, r28
    23fc:	ed 58       	subi	r30, 0x8D	; 141
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 81       	ld	r24, Z
    2402:	91 81       	ldd	r25, Z+1	; 0x01
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <LCD_voidInit+0xa30>
    2408:	fe 01       	movw	r30, r28
    240a:	ed 58       	subi	r30, 0x8D	; 141
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	91 83       	std	Z+1, r25	; 0x01
    2410:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2412:	de 01       	movw	r26, r28
    2414:	ab 58       	subi	r26, 0x8B	; 139
    2416:	bf 4f       	sbci	r27, 0xFF	; 255
    2418:	fe 01       	movw	r30, r28
    241a:	eb 58       	subi	r30, 0x8B	; 139
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	80 81       	ld	r24, Z
    2420:	91 81       	ldd	r25, Z+1	; 0x01
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	11 96       	adiw	r26, 0x01	; 1
    2426:	9c 93       	st	X, r25
    2428:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242a:	fe 01       	movw	r30, r28
    242c:	eb 58       	subi	r30, 0x8B	; 139
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	80 81       	ld	r24, Z
    2432:	91 81       	ldd	r25, Z+1	; 0x01
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	d1 f6       	brne	.-76     	; 0x23ec <LCD_voidInit+0xa18>
    2438:	27 c0       	rjmp	.+78     	; 0x2488 <LCD_voidInit+0xab4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243a:	8e 01       	movw	r16, r28
    243c:	0b 58       	subi	r16, 0x8B	; 139
    243e:	1f 4f       	sbci	r17, 0xFF	; 255
    2440:	fe 01       	movw	r30, r28
    2442:	e9 58       	subi	r30, 0x89	; 137
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	60 81       	ld	r22, Z
    2448:	71 81       	ldd	r23, Z+1	; 0x01
    244a:	82 81       	ldd	r24, Z+2	; 0x02
    244c:	93 81       	ldd	r25, Z+3	; 0x03
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	f8 01       	movw	r30, r16
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	80 83       	st	Z, r24
    245c:	de 01       	movw	r26, r28
    245e:	af 58       	subi	r26, 0x8F	; 143
    2460:	bf 4f       	sbci	r27, 0xFF	; 255
    2462:	fe 01       	movw	r30, r28
    2464:	eb 58       	subi	r30, 0x8B	; 139
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	91 81       	ldd	r25, Z+1	; 0x01
    246c:	8d 93       	st	X+, r24
    246e:	9c 93       	st	X, r25
    2470:	fe 01       	movw	r30, r28
    2472:	ef 58       	subi	r30, 0x8F	; 143
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	80 81       	ld	r24, Z
    2478:	91 81       	ldd	r25, Z+1	; 0x01
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <LCD_voidInit+0xaa6>
    247e:	fe 01       	movw	r30, r28
    2480:	ef 58       	subi	r30, 0x8F	; 143
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	91 83       	std	Z+1, r25	; 0x01
    2486:	80 83       	st	Z, r24
				 _delay_ms(1);
				LCD_enuWriteCmd(u8CntrLoc , 0x20);
    2488:	fe 01       	movw	r30, r28
    248a:	ea 53       	subi	r30, 0x3A	; 58
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	60 e2       	ldi	r22, 0x20	; 32
    2492:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    2496:	fe 01       	movw	r30, r28
    2498:	e3 59       	subi	r30, 0x93	; 147
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	a0 e8       	ldi	r26, 0x80	; 128
    24a2:	bf e3       	ldi	r27, 0x3F	; 63
    24a4:	80 83       	st	Z, r24
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	a2 83       	std	Z+2, r26	; 0x02
    24aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ac:	8e 01       	movw	r16, r28
    24ae:	07 59       	subi	r16, 0x97	; 151
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	fe 01       	movw	r30, r28
    24b4:	e3 59       	subi	r30, 0x93	; 147
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a ef       	ldi	r20, 0xFA	; 250
    24c6:	54 e4       	ldi	r21, 0x44	; 68
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	f8 01       	movw	r30, r16
    24d2:	80 83       	st	Z, r24
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	a2 83       	std	Z+2, r26	; 0x02
    24d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24da:	fe 01       	movw	r30, r28
    24dc:	e7 59       	subi	r30, 0x97	; 151
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	60 81       	ld	r22, Z
    24e2:	71 81       	ldd	r23, Z+1	; 0x01
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	44 f4       	brge	.+16     	; 0x2508 <LCD_voidInit+0xb34>
		__ticks = 1;
    24f8:	fe 01       	movw	r30, r28
    24fa:	e9 59       	subi	r30, 0x99	; 153
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
    2506:	64 c0       	rjmp	.+200    	; 0x25d0 <LCD_voidInit+0xbfc>
	else if (__tmp > 65535)
    2508:	fe 01       	movw	r30, r28
    250a:	e7 59       	subi	r30, 0x97	; 151
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	3f ef       	ldi	r19, 0xFF	; 255
    251a:	4f e7       	ldi	r20, 0x7F	; 127
    251c:	57 e4       	ldi	r21, 0x47	; 71
    251e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2522:	18 16       	cp	r1, r24
    2524:	0c f0       	brlt	.+2      	; 0x2528 <LCD_voidInit+0xb54>
    2526:	43 c0       	rjmp	.+134    	; 0x25ae <LCD_voidInit+0xbda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	fe 01       	movw	r30, r28
    252a:	e3 59       	subi	r30, 0x93	; 147
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	60 81       	ld	r22, Z
    2530:	71 81       	ldd	r23, Z+1	; 0x01
    2532:	82 81       	ldd	r24, Z+2	; 0x02
    2534:	93 81       	ldd	r25, Z+3	; 0x03
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	8e 01       	movw	r16, r28
    2548:	09 59       	subi	r16, 0x99	; 153
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	f8 01       	movw	r30, r16
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	80 83       	st	Z, r24
    255e:	1f c0       	rjmp	.+62     	; 0x259e <LCD_voidInit+0xbca>
    2560:	fe 01       	movw	r30, r28
    2562:	eb 59       	subi	r30, 0x9B	; 155
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	88 ec       	ldi	r24, 0xC8	; 200
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
    256e:	fe 01       	movw	r30, r28
    2570:	eb 59       	subi	r30, 0x9B	; 155
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_voidInit+0xba4>
    257c:	fe 01       	movw	r30, r28
    257e:	eb 59       	subi	r30, 0x9B	; 155
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	de 01       	movw	r26, r28
    2588:	a9 59       	subi	r26, 0x99	; 153
    258a:	bf 4f       	sbci	r27, 0xFF	; 255
    258c:	fe 01       	movw	r30, r28
    258e:	e9 59       	subi	r30, 0x99	; 153
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	11 96       	adiw	r26, 0x01	; 1
    259a:	9c 93       	st	X, r25
    259c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	fe 01       	movw	r30, r28
    25a0:	e9 59       	subi	r30, 0x99	; 153
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	d1 f6       	brne	.-76     	; 0x2560 <LCD_voidInit+0xb8c>
    25ac:	27 c0       	rjmp	.+78     	; 0x25fc <LCD_voidInit+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	8e 01       	movw	r16, r28
    25b0:	09 59       	subi	r16, 0x99	; 153
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	fe 01       	movw	r30, r28
    25b6:	e7 59       	subi	r30, 0x97	; 151
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	f8 01       	movw	r30, r16
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
    25d0:	de 01       	movw	r26, r28
    25d2:	ad 59       	subi	r26, 0x9D	; 157
    25d4:	bf 4f       	sbci	r27, 0xFF	; 255
    25d6:	fe 01       	movw	r30, r28
    25d8:	e9 59       	subi	r30, 0x99	; 153
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	8d 93       	st	X+, r24
    25e2:	9c 93       	st	X, r25
    25e4:	fe 01       	movw	r30, r28
    25e6:	ed 59       	subi	r30, 0x9D	; 157
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_voidInit+0xc1a>
    25f2:	fe 01       	movw	r30, r28
    25f4:	ed 59       	subi	r30, 0x9D	; 157
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	80 83       	st	Z, r24
				 _delay_ms(1);
				u8CmdLoc = 0x00|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<7 |
    25fc:	fe 01       	movw	r30, r28
    25fe:	ea 53       	subi	r30, 0x3A	; 58
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 81       	ld	r24, Z
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	c9 01       	movw	r24, r18
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	82 0f       	add	r24, r18
    2610:	93 1f       	adc	r25, r19
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	fc 01       	movw	r30, r24
    261c:	e1 58       	subi	r30, 0x81	; 129
    261e:	fe 4f       	sbci	r31, 0xFE	; 254
    2620:	80 81       	ld	r24, Z
    2622:	81 70       	andi	r24, 0x01	; 1
    2624:	88 2f       	mov	r24, r24
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	96 95       	lsr	r25
    262a:	98 2f       	mov	r25, r24
    262c:	88 27       	eor	r24, r24
    262e:	97 95       	ror	r25
    2630:	87 95       	ror	r24
    2632:	48 2f       	mov	r20, r24
    2634:	fe 01       	movw	r30, r28
    2636:	ea 53       	subi	r30, 0x3A	; 58
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	80 81       	ld	r24, Z
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	c9 01       	movw	r24, r18
    2642:	88 0f       	add	r24, r24
    2644:	99 1f       	adc	r25, r25
    2646:	82 0f       	add	r24, r18
    2648:	93 1f       	adc	r25, r19
    264a:	88 0f       	add	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	fc 01       	movw	r30, r24
    2654:	e1 58       	subi	r30, 0x81	; 129
    2656:	fe 4f       	sbci	r31, 0xFE	; 254
    2658:	80 81       	ld	r24, Z
    265a:	86 95       	lsr	r24
    265c:	81 70       	andi	r24, 0x01	; 1
    265e:	88 2f       	mov	r24, r24
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	00 24       	eor	r0, r0
    2664:	96 95       	lsr	r25
    2666:	87 95       	ror	r24
    2668:	07 94       	ror	r0
    266a:	96 95       	lsr	r25
    266c:	87 95       	ror	r24
    266e:	07 94       	ror	r0
    2670:	98 2f       	mov	r25, r24
    2672:	80 2d       	mov	r24, r0
    2674:	84 2b       	or	r24, r20
    2676:	fe 01       	movw	r30, r28
    2678:	eb 53       	subi	r30, 0x3B	; 59
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<6 ;

				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    267e:	fe 01       	movw	r30, r28
    2680:	ea 53       	subi	r30, 0x3A	; 58
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	de 01       	movw	r26, r28
    2686:	ab 53       	subi	r26, 0x3B	; 59
    2688:	bf 4f       	sbci	r27, 0xFF	; 255
    268a:	80 81       	ld	r24, Z
    268c:	6c 91       	ld	r22, X
    268e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    2692:	fe 01       	movw	r30, r28
    2694:	e1 5a       	subi	r30, 0xA1	; 161
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	a0 e8       	ldi	r26, 0x80	; 128
    269e:	bf e3       	ldi	r27, 0x3F	; 63
    26a0:	80 83       	st	Z, r24
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	a2 83       	std	Z+2, r26	; 0x02
    26a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a8:	8e 01       	movw	r16, r28
    26aa:	05 5a       	subi	r16, 0xA5	; 165
    26ac:	1f 4f       	sbci	r17, 0xFF	; 255
    26ae:	fe 01       	movw	r30, r28
    26b0:	e1 5a       	subi	r30, 0xA1	; 161
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	4a ef       	ldi	r20, 0xFA	; 250
    26c2:	54 e4       	ldi	r21, 0x44	; 68
    26c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	f8 01       	movw	r30, r16
    26ce:	80 83       	st	Z, r24
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	a2 83       	std	Z+2, r26	; 0x02
    26d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26d6:	fe 01       	movw	r30, r28
    26d8:	e5 5a       	subi	r30, 0xA5	; 165
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	93 81       	ldd	r25, Z+3	; 0x03
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e8       	ldi	r20, 0x80	; 128
    26ea:	5f e3       	ldi	r21, 0x3F	; 63
    26ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f0:	88 23       	and	r24, r24
    26f2:	44 f4       	brge	.+16     	; 0x2704 <LCD_voidInit+0xd30>
		__ticks = 1;
    26f4:	fe 01       	movw	r30, r28
    26f6:	e7 5a       	subi	r30, 0xA7	; 167
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
    2702:	64 c0       	rjmp	.+200    	; 0x27cc <LCD_voidInit+0xdf8>
	else if (__tmp > 65535)
    2704:	fe 01       	movw	r30, r28
    2706:	e5 5a       	subi	r30, 0xA5	; 165
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	60 81       	ld	r22, Z
    270c:	71 81       	ldd	r23, Z+1	; 0x01
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	93 81       	ldd	r25, Z+3	; 0x03
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	3f ef       	ldi	r19, 0xFF	; 255
    2716:	4f e7       	ldi	r20, 0x7F	; 127
    2718:	57 e4       	ldi	r21, 0x47	; 71
    271a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    271e:	18 16       	cp	r1, r24
    2720:	0c f0       	brlt	.+2      	; 0x2724 <LCD_voidInit+0xd50>
    2722:	43 c0       	rjmp	.+134    	; 0x27aa <LCD_voidInit+0xdd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2724:	fe 01       	movw	r30, r28
    2726:	e1 5a       	subi	r30, 0xA1	; 161
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	60 81       	ld	r22, Z
    272c:	71 81       	ldd	r23, Z+1	; 0x01
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	93 81       	ldd	r25, Z+3	; 0x03
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e2       	ldi	r20, 0x20	; 32
    2738:	51 e4       	ldi	r21, 0x41	; 65
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	8e 01       	movw	r16, r28
    2744:	07 5a       	subi	r16, 0xA7	; 167
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	f8 01       	movw	r30, r16
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24
    275a:	1f c0       	rjmp	.+62     	; 0x279a <LCD_voidInit+0xdc6>
    275c:	fe 01       	movw	r30, r28
    275e:	e9 5a       	subi	r30, 0xA9	; 169
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	88 ec       	ldi	r24, 0xC8	; 200
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	80 83       	st	Z, r24
    276a:	fe 01       	movw	r30, r28
    276c:	e9 5a       	subi	r30, 0xA9	; 169
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	80 81       	ld	r24, Z
    2772:	91 81       	ldd	r25, Z+1	; 0x01
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <LCD_voidInit+0xda0>
    2778:	fe 01       	movw	r30, r28
    277a:	e9 5a       	subi	r30, 0xA9	; 169
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	91 83       	std	Z+1, r25	; 0x01
    2780:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	de 01       	movw	r26, r28
    2784:	a7 5a       	subi	r26, 0xA7	; 167
    2786:	bf 4f       	sbci	r27, 0xFF	; 255
    2788:	fe 01       	movw	r30, r28
    278a:	e7 5a       	subi	r30, 0xA7	; 167
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	11 96       	adiw	r26, 0x01	; 1
    2796:	9c 93       	st	X, r25
    2798:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279a:	fe 01       	movw	r30, r28
    279c:	e7 5a       	subi	r30, 0xA7	; 167
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 81       	ld	r24, Z
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	d1 f6       	brne	.-76     	; 0x275c <LCD_voidInit+0xd88>
    27a8:	27 c0       	rjmp	.+78     	; 0x27f8 <LCD_voidInit+0xe24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	8e 01       	movw	r16, r28
    27ac:	07 5a       	subi	r16, 0xA7	; 167
    27ae:	1f 4f       	sbci	r17, 0xFF	; 255
    27b0:	fe 01       	movw	r30, r28
    27b2:	e5 5a       	subi	r30, 0xA5	; 165
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	60 81       	ld	r22, Z
    27b8:	71 81       	ldd	r23, Z+1	; 0x01
    27ba:	82 81       	ldd	r24, Z+2	; 0x02
    27bc:	93 81       	ldd	r25, Z+3	; 0x03
    27be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	f8 01       	movw	r30, r16
    27c8:	91 83       	std	Z+1, r25	; 0x01
    27ca:	80 83       	st	Z, r24
    27cc:	de 01       	movw	r26, r28
    27ce:	ab 5a       	subi	r26, 0xAB	; 171
    27d0:	bf 4f       	sbci	r27, 0xFF	; 255
    27d2:	fe 01       	movw	r30, r28
    27d4:	e7 5a       	subi	r30, 0xA7	; 167
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	8d 93       	st	X+, r24
    27de:	9c 93       	st	X, r25
    27e0:	fe 01       	movw	r30, r28
    27e2:	eb 5a       	subi	r30, 0xAB	; 171
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 81       	ld	r24, Z
    27e8:	91 81       	ldd	r25, Z+1	; 0x01
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <LCD_voidInit+0xe16>
    27ee:	fe 01       	movw	r30, r28
    27f0:	eb 5a       	subi	r30, 0xAB	; 171
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	91 83       	std	Z+1, r25	; 0x01
    27f6:	80 83       	st	Z, r24
				 _delay_ms(1);

				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    27f8:	fe 01       	movw	r30, r28
    27fa:	ea 53       	subi	r30, 0x3A	; 58
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	80 81       	ld	r24, Z
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    2806:	fe 01       	movw	r30, r28
    2808:	ef 5a       	subi	r30, 0xAF	; 175
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	a0 e8       	ldi	r26, 0x80	; 128
    2812:	bf e3       	ldi	r27, 0x3F	; 63
    2814:	80 83       	st	Z, r24
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	a2 83       	std	Z+2, r26	; 0x02
    281a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281c:	8e 01       	movw	r16, r28
    281e:	03 5b       	subi	r16, 0xB3	; 179
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	fe 01       	movw	r30, r28
    2824:	ef 5a       	subi	r30, 0xAF	; 175
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	60 81       	ld	r22, Z
    282a:	71 81       	ldd	r23, Z+1	; 0x01
    282c:	82 81       	ldd	r24, Z+2	; 0x02
    282e:	93 81       	ldd	r25, Z+3	; 0x03
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	4a ef       	ldi	r20, 0xFA	; 250
    2836:	54 e4       	ldi	r21, 0x44	; 68
    2838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	f8 01       	movw	r30, r16
    2842:	80 83       	st	Z, r24
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	a2 83       	std	Z+2, r26	; 0x02
    2848:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    284a:	fe 01       	movw	r30, r28
    284c:	e3 5b       	subi	r30, 0xB3	; 179
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e8       	ldi	r20, 0x80	; 128
    285e:	5f e3       	ldi	r21, 0x3F	; 63
    2860:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2864:	88 23       	and	r24, r24
    2866:	44 f4       	brge	.+16     	; 0x2878 <LCD_voidInit+0xea4>
		__ticks = 1;
    2868:	fe 01       	movw	r30, r28
    286a:	e5 5b       	subi	r30, 0xB5	; 181
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	80 83       	st	Z, r24
    2876:	64 c0       	rjmp	.+200    	; 0x2940 <LCD_voidInit+0xf6c>
	else if (__tmp > 65535)
    2878:	fe 01       	movw	r30, r28
    287a:	e3 5b       	subi	r30, 0xB3	; 179
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	60 81       	ld	r22, Z
    2880:	71 81       	ldd	r23, Z+1	; 0x01
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	93 81       	ldd	r25, Z+3	; 0x03
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	3f ef       	ldi	r19, 0xFF	; 255
    288a:	4f e7       	ldi	r20, 0x7F	; 127
    288c:	57 e4       	ldi	r21, 0x47	; 71
    288e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2892:	18 16       	cp	r1, r24
    2894:	0c f0       	brlt	.+2      	; 0x2898 <LCD_voidInit+0xec4>
    2896:	43 c0       	rjmp	.+134    	; 0x291e <LCD_voidInit+0xf4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2898:	fe 01       	movw	r30, r28
    289a:	ef 5a       	subi	r30, 0xAF	; 175
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	60 81       	ld	r22, Z
    28a0:	71 81       	ldd	r23, Z+1	; 0x01
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	8e 01       	movw	r16, r28
    28b8:	05 5b       	subi	r16, 0xB5	; 181
    28ba:	1f 4f       	sbci	r17, 0xFF	; 255
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	f8 01       	movw	r30, r16
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	80 83       	st	Z, r24
    28ce:	1f c0       	rjmp	.+62     	; 0x290e <LCD_voidInit+0xf3a>
    28d0:	fe 01       	movw	r30, r28
    28d2:	e7 5b       	subi	r30, 0xB7	; 183
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	88 ec       	ldi	r24, 0xC8	; 200
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	80 83       	st	Z, r24
    28de:	fe 01       	movw	r30, r28
    28e0:	e7 5b       	subi	r30, 0xB7	; 183
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	80 81       	ld	r24, Z
    28e6:	91 81       	ldd	r25, Z+1	; 0x01
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <LCD_voidInit+0xf14>
    28ec:	fe 01       	movw	r30, r28
    28ee:	e7 5b       	subi	r30, 0xB7	; 183
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f6:	de 01       	movw	r26, r28
    28f8:	a5 5b       	subi	r26, 0xB5	; 181
    28fa:	bf 4f       	sbci	r27, 0xFF	; 255
    28fc:	fe 01       	movw	r30, r28
    28fe:	e5 5b       	subi	r30, 0xB5	; 181
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	11 96       	adiw	r26, 0x01	; 1
    290a:	9c 93       	st	X, r25
    290c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290e:	fe 01       	movw	r30, r28
    2910:	e5 5b       	subi	r30, 0xB5	; 181
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	80 81       	ld	r24, Z
    2916:	91 81       	ldd	r25, Z+1	; 0x01
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	d1 f6       	brne	.-76     	; 0x28d0 <LCD_voidInit+0xefc>
    291c:	27 c0       	rjmp	.+78     	; 0x296c <LCD_voidInit+0xf98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291e:	8e 01       	movw	r16, r28
    2920:	05 5b       	subi	r16, 0xB5	; 181
    2922:	1f 4f       	sbci	r17, 0xFF	; 255
    2924:	fe 01       	movw	r30, r28
    2926:	e3 5b       	subi	r30, 0xB3	; 179
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	60 81       	ld	r22, Z
    292c:	71 81       	ldd	r23, Z+1	; 0x01
    292e:	82 81       	ldd	r24, Z+2	; 0x02
    2930:	93 81       	ldd	r25, Z+3	; 0x03
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	f8 01       	movw	r30, r16
    293c:	91 83       	std	Z+1, r25	; 0x01
    293e:	80 83       	st	Z, r24
    2940:	de 01       	movw	r26, r28
    2942:	a9 5b       	subi	r26, 0xB9	; 185
    2944:	bf 4f       	sbci	r27, 0xFF	; 255
    2946:	fe 01       	movw	r30, r28
    2948:	e5 5b       	subi	r30, 0xB5	; 181
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	80 81       	ld	r24, Z
    294e:	91 81       	ldd	r25, Z+1	; 0x01
    2950:	8d 93       	st	X+, r24
    2952:	9c 93       	st	X, r25
    2954:	fe 01       	movw	r30, r28
    2956:	e9 5b       	subi	r30, 0xB9	; 185
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	80 81       	ld	r24, Z
    295c:	91 81       	ldd	r25, Z+1	; 0x01
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <LCD_voidInit+0xf8a>
    2962:	fe 01       	movw	r30, r28
    2964:	e9 5b       	subi	r30, 0xB9	; 185
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	80 83       	st	Z, r24
				 _delay_ms(1);

				u8CmdLoc = 0x80|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<6 |
    296c:	fe 01       	movw	r30, r28
    296e:	ea 53       	subi	r30, 0x3A	; 58
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	80 81       	ld	r24, Z
    2974:	28 2f       	mov	r18, r24
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	c9 01       	movw	r24, r18
    297a:	88 0f       	add	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	82 0f       	add	r24, r18
    2980:	93 1f       	adc	r25, r19
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	88 0f       	add	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	fc 01       	movw	r30, r24
    298c:	e1 58       	subi	r30, 0x81	; 129
    298e:	fe 4f       	sbci	r31, 0xFE	; 254
    2990:	80 81       	ld	r24, Z
    2992:	86 95       	lsr	r24
    2994:	86 95       	lsr	r24
    2996:	81 70       	andi	r24, 0x01	; 1
    2998:	88 2f       	mov	r24, r24
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	00 24       	eor	r0, r0
    299e:	96 95       	lsr	r25
    29a0:	87 95       	ror	r24
    29a2:	07 94       	ror	r0
    29a4:	96 95       	lsr	r25
    29a6:	87 95       	ror	r24
    29a8:	07 94       	ror	r0
    29aa:	98 2f       	mov	r25, r24
    29ac:	80 2d       	mov	r24, r0
    29ae:	48 2f       	mov	r20, r24
    29b0:	40 68       	ori	r20, 0x80	; 128
    29b2:	fe 01       	movw	r30, r28
    29b4:	ea 53       	subi	r30, 0x3A	; 58
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 81       	ld	r24, Z
    29ba:	28 2f       	mov	r18, r24
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	c9 01       	movw	r24, r18
    29c0:	88 0f       	add	r24, r24
    29c2:	99 1f       	adc	r25, r25
    29c4:	82 0f       	add	r24, r18
    29c6:	93 1f       	adc	r25, r19
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	88 0f       	add	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	fc 01       	movw	r30, r24
    29d2:	e1 58       	subi	r30, 0x81	; 129
    29d4:	fe 4f       	sbci	r31, 0xFE	; 254
    29d6:	80 81       	ld	r24, Z
    29d8:	86 95       	lsr	r24
    29da:	86 95       	lsr	r24
    29dc:	86 95       	lsr	r24
    29de:	81 70       	andi	r24, 0x01	; 1
    29e0:	88 2f       	mov	r24, r24
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	88 0f       	add	r24, r24
    29e6:	99 1f       	adc	r25, r25
    29e8:	82 95       	swap	r24
    29ea:	92 95       	swap	r25
    29ec:	90 7f       	andi	r25, 0xF0	; 240
    29ee:	98 27       	eor	r25, r24
    29f0:	80 7f       	andi	r24, 0xF0	; 240
    29f2:	98 27       	eor	r25, r24
    29f4:	48 2b       	or	r20, r24
    29f6:	fe 01       	movw	r30, r28
    29f8:	ea 53       	subi	r30, 0x3A	; 58
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	80 81       	ld	r24, Z
    29fe:	28 2f       	mov	r18, r24
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	c9 01       	movw	r24, r18
    2a04:	88 0f       	add	r24, r24
    2a06:	99 1f       	adc	r25, r25
    2a08:	82 0f       	add	r24, r18
    2a0a:	93 1f       	adc	r25, r19
    2a0c:	88 0f       	add	r24, r24
    2a0e:	99 1f       	adc	r25, r25
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	fc 01       	movw	r30, r24
    2a16:	e1 58       	subi	r30, 0x81	; 129
    2a18:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1a:	80 81       	ld	r24, Z
    2a1c:	82 95       	swap	r24
    2a1e:	8f 70       	andi	r24, 0x0F	; 15
    2a20:	81 70       	andi	r24, 0x01	; 1
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	82 95       	swap	r24
    2a28:	92 95       	swap	r25
    2a2a:	90 7f       	andi	r25, 0xF0	; 240
    2a2c:	98 27       	eor	r25, r24
    2a2e:	80 7f       	andi	r24, 0xF0	; 240
    2a30:	98 27       	eor	r25, r24
    2a32:	84 2b       	or	r24, r20
    2a34:	fe 01       	movw	r30, r28
    2a36:	eb 53       	subi	r30, 0x3B	; 59
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<5 |
								LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<4 ;

				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ea 53       	subi	r30, 0x3A	; 58
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	de 01       	movw	r26, r28
    2a44:	ab 53       	subi	r26, 0x3B	; 59
    2a46:	bf 4f       	sbci	r27, 0xFF	; 255
    2a48:	80 81       	ld	r24, Z
    2a4a:	6c 91       	ld	r22, X
    2a4c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    2a50:	fe 01       	movw	r30, r28
    2a52:	ed 5b       	subi	r30, 0xBD	; 189
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	a0 e8       	ldi	r26, 0x80	; 128
    2a5c:	bf e3       	ldi	r27, 0x3F	; 63
    2a5e:	80 83       	st	Z, r24
    2a60:	91 83       	std	Z+1, r25	; 0x01
    2a62:	a2 83       	std	Z+2, r26	; 0x02
    2a64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a66:	8e 01       	movw	r16, r28
    2a68:	01 5c       	subi	r16, 0xC1	; 193
    2a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	ed 5b       	subi	r30, 0xBD	; 189
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	60 81       	ld	r22, Z
    2a74:	71 81       	ldd	r23, Z+1	; 0x01
    2a76:	82 81       	ldd	r24, Z+2	; 0x02
    2a78:	93 81       	ldd	r25, Z+3	; 0x03
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	4a ef       	ldi	r20, 0xFA	; 250
    2a80:	54 e4       	ldi	r21, 0x44	; 68
    2a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	80 83       	st	Z, r24
    2a8e:	91 83       	std	Z+1, r25	; 0x01
    2a90:	a2 83       	std	Z+2, r26	; 0x02
    2a92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a94:	fe 01       	movw	r30, r28
    2a96:	ff 96       	adiw	r30, 0x3f	; 63
    2a98:	60 81       	ld	r22, Z
    2a9a:	71 81       	ldd	r23, Z+1	; 0x01
    2a9c:	82 81       	ldd	r24, Z+2	; 0x02
    2a9e:	93 81       	ldd	r25, Z+3	; 0x03
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e8       	ldi	r20, 0x80	; 128
    2aa6:	5f e3       	ldi	r21, 0x3F	; 63
    2aa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aac:	88 23       	and	r24, r24
    2aae:	2c f4       	brge	.+10     	; 0x2aba <LCD_voidInit+0x10e6>
		__ticks = 1;
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	9e af       	std	Y+62, r25	; 0x3e
    2ab6:	8d af       	std	Y+61, r24	; 0x3d
    2ab8:	46 c0       	rjmp	.+140    	; 0x2b46 <LCD_voidInit+0x1172>
	else if (__tmp > 65535)
    2aba:	fe 01       	movw	r30, r28
    2abc:	ff 96       	adiw	r30, 0x3f	; 63
    2abe:	60 81       	ld	r22, Z
    2ac0:	71 81       	ldd	r23, Z+1	; 0x01
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	93 81       	ldd	r25, Z+3	; 0x03
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	3f ef       	ldi	r19, 0xFF	; 255
    2aca:	4f e7       	ldi	r20, 0x7F	; 127
    2acc:	57 e4       	ldi	r21, 0x47	; 71
    2ace:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad2:	18 16       	cp	r1, r24
    2ad4:	64 f5       	brge	.+88     	; 0x2b2e <LCD_voidInit+0x115a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	ed 5b       	subi	r30, 0xBD	; 189
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	60 81       	ld	r22, Z
    2ade:	71 81       	ldd	r23, Z+1	; 0x01
    2ae0:	82 81       	ldd	r24, Z+2	; 0x02
    2ae2:	93 81       	ldd	r25, Z+3	; 0x03
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e2       	ldi	r20, 0x20	; 32
    2aea:	51 e4       	ldi	r21, 0x41	; 65
    2aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9e af       	std	Y+62, r25	; 0x3e
    2b02:	8d af       	std	Y+61, r24	; 0x3d
    2b04:	0f c0       	rjmp	.+30     	; 0x2b24 <LCD_voidInit+0x1150>
    2b06:	88 ec       	ldi	r24, 0xC8	; 200
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9c af       	std	Y+60, r25	; 0x3c
    2b0c:	8b af       	std	Y+59, r24	; 0x3b
    2b0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b10:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <LCD_voidInit+0x113e>
    2b16:	9c af       	std	Y+60, r25	; 0x3c
    2b18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	9e af       	std	Y+62, r25	; 0x3e
    2b22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b24:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b26:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	69 f7       	brne	.-38     	; 0x2b06 <LCD_voidInit+0x1132>
    2b2c:	16 c0       	rjmp	.+44     	; 0x2b5a <LCD_voidInit+0x1186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ff 96       	adiw	r30, 0x3f	; 63
    2b32:	60 81       	ld	r22, Z
    2b34:	71 81       	ldd	r23, Z+1	; 0x01
    2b36:	82 81       	ldd	r24, Z+2	; 0x02
    2b38:	93 81       	ldd	r25, Z+3	; 0x03
    2b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	9e af       	std	Y+62, r25	; 0x3e
    2b44:	8d af       	std	Y+61, r24	; 0x3d
    2b46:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b48:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b4a:	9a af       	std	Y+58, r25	; 0x3a
    2b4c:	89 af       	std	Y+57, r24	; 0x39
    2b4e:	89 ad       	ldd	r24, Y+57	; 0x39
    2b50:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	f1 f7       	brne	.-4      	; 0x2b52 <LCD_voidInit+0x117e>
    2b56:	9a af       	std	Y+58, r25	; 0x3a
    2b58:	89 af       	std	Y+57, r24	; 0x39
				 _delay_ms(1);

				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	ea 53       	subi	r30, 0x3A	; 58
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 81       	ld	r24, Z
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	a0 e8       	ldi	r26, 0x80	; 128
    2b6e:	bf e3       	ldi	r27, 0x3F	; 63
    2b70:	8d ab       	std	Y+53, r24	; 0x35
    2b72:	9e ab       	std	Y+54, r25	; 0x36
    2b74:	af ab       	std	Y+55, r26	; 0x37
    2b76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b78:	6d a9       	ldd	r22, Y+53	; 0x35
    2b7a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b7c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b7e:	98 ad       	ldd	r25, Y+56	; 0x38
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4a ef       	ldi	r20, 0xFA	; 250
    2b86:	54 e4       	ldi	r21, 0x44	; 68
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	89 ab       	std	Y+49, r24	; 0x31
    2b92:	9a ab       	std	Y+50, r25	; 0x32
    2b94:	ab ab       	std	Y+51, r26	; 0x33
    2b96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b98:	69 a9       	ldd	r22, Y+49	; 0x31
    2b9a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b9e:	9c a9       	ldd	r25, Y+52	; 0x34
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e8       	ldi	r20, 0x80	; 128
    2ba6:	5f e3       	ldi	r21, 0x3F	; 63
    2ba8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bac:	88 23       	and	r24, r24
    2bae:	2c f4       	brge	.+10     	; 0x2bba <LCD_voidInit+0x11e6>
		__ticks = 1;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	98 ab       	std	Y+48, r25	; 0x30
    2bb6:	8f a7       	std	Y+47, r24	; 0x2f
    2bb8:	3f c0       	rjmp	.+126    	; 0x2c38 <LCD_voidInit+0x1264>
	else if (__tmp > 65535)
    2bba:	69 a9       	ldd	r22, Y+49	; 0x31
    2bbc:	7a a9       	ldd	r23, Y+50	; 0x32
    2bbe:	8b a9       	ldd	r24, Y+51	; 0x33
    2bc0:	9c a9       	ldd	r25, Y+52	; 0x34
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	3f ef       	ldi	r19, 0xFF	; 255
    2bc6:	4f e7       	ldi	r20, 0x7F	; 127
    2bc8:	57 e4       	ldi	r21, 0x47	; 71
    2bca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bce:	18 16       	cp	r1, r24
    2bd0:	4c f5       	brge	.+82     	; 0x2c24 <LCD_voidInit+0x1250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd2:	6d a9       	ldd	r22, Y+53	; 0x35
    2bd4:	7e a9       	ldd	r23, Y+54	; 0x36
    2bd6:	8f a9       	ldd	r24, Y+55	; 0x37
    2bd8:	98 ad       	ldd	r25, Y+56	; 0x38
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e2       	ldi	r20, 0x20	; 32
    2be0:	51 e4       	ldi	r21, 0x41	; 65
    2be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	bc 01       	movw	r22, r24
    2bec:	cd 01       	movw	r24, r26
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	98 ab       	std	Y+48, r25	; 0x30
    2bf8:	8f a7       	std	Y+47, r24	; 0x2f
    2bfa:	0f c0       	rjmp	.+30     	; 0x2c1a <LCD_voidInit+0x1246>
    2bfc:	88 ec       	ldi	r24, 0xC8	; 200
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	9e a7       	std	Y+46, r25	; 0x2e
    2c02:	8d a7       	std	Y+45, r24	; 0x2d
    2c04:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c06:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <LCD_voidInit+0x1234>
    2c0c:	9e a7       	std	Y+46, r25	; 0x2e
    2c0e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c10:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c12:	98 a9       	ldd	r25, Y+48	; 0x30
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	98 ab       	std	Y+48, r25	; 0x30
    2c18:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c1c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	69 f7       	brne	.-38     	; 0x2bfc <LCD_voidInit+0x1228>
    2c22:	14 c0       	rjmp	.+40     	; 0x2c4c <LCD_voidInit+0x1278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c24:	69 a9       	ldd	r22, Y+49	; 0x31
    2c26:	7a a9       	ldd	r23, Y+50	; 0x32
    2c28:	8b a9       	ldd	r24, Y+51	; 0x33
    2c2a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	98 ab       	std	Y+48, r25	; 0x30
    2c36:	8f a7       	std	Y+47, r24	; 0x2f
    2c38:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c3a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c3c:	9c a7       	std	Y+44, r25	; 0x2c
    2c3e:	8b a7       	std	Y+43, r24	; 0x2b
    2c40:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c42:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <LCD_voidInit+0x1270>
    2c48:	9c a7       	std	Y+44, r25	; 0x2c
    2c4a:	8b a7       	std	Y+43, r24	; 0x2b
			    _delay_ms(1);
				LCD_enuWriteCmd(u8CntrLoc , 0x10 );
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	ea 53       	subi	r30, 0x3A	; 58
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	80 81       	ld	r24, Z
    2c54:	60 e1       	ldi	r22, 0x10	; 16
    2c56:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	a0 e8       	ldi	r26, 0x80	; 128
    2c60:	bf e3       	ldi	r27, 0x3F	; 63
    2c62:	8f a3       	std	Y+39, r24	; 0x27
    2c64:	98 a7       	std	Y+40, r25	; 0x28
    2c66:	a9 a7       	std	Y+41, r26	; 0x29
    2c68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c6c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c6e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c70:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	4a ef       	ldi	r20, 0xFA	; 250
    2c78:	54 e4       	ldi	r21, 0x44	; 68
    2c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	8b a3       	std	Y+35, r24	; 0x23
    2c84:	9c a3       	std	Y+36, r25	; 0x24
    2c86:	ad a3       	std	Y+37, r26	; 0x25
    2c88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c8a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c8c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c90:	9e a1       	ldd	r25, Y+38	; 0x26
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e8       	ldi	r20, 0x80	; 128
    2c98:	5f e3       	ldi	r21, 0x3F	; 63
    2c9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c9e:	88 23       	and	r24, r24
    2ca0:	2c f4       	brge	.+10     	; 0x2cac <LCD_voidInit+0x12d8>
		__ticks = 1;
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	9a a3       	std	Y+34, r25	; 0x22
    2ca8:	89 a3       	std	Y+33, r24	; 0x21
    2caa:	3f c0       	rjmp	.+126    	; 0x2d2a <LCD_voidInit+0x1356>
	else if (__tmp > 65535)
    2cac:	6b a1       	ldd	r22, Y+35	; 0x23
    2cae:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	3f ef       	ldi	r19, 0xFF	; 255
    2cb8:	4f e7       	ldi	r20, 0x7F	; 127
    2cba:	57 e4       	ldi	r21, 0x47	; 71
    2cbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc0:	18 16       	cp	r1, r24
    2cc2:	4c f5       	brge	.+82     	; 0x2d16 <LCD_voidInit+0x1342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc4:	6f a1       	ldd	r22, Y+39	; 0x27
    2cc6:	78 a5       	ldd	r23, Y+40	; 0x28
    2cc8:	89 a5       	ldd	r24, Y+41	; 0x29
    2cca:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e2       	ldi	r20, 0x20	; 32
    2cd2:	51 e4       	ldi	r21, 0x41	; 65
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	bc 01       	movw	r22, r24
    2cde:	cd 01       	movw	r24, r26
    2ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	9a a3       	std	Y+34, r25	; 0x22
    2cea:	89 a3       	std	Y+33, r24	; 0x21
    2cec:	0f c0       	rjmp	.+30     	; 0x2d0c <LCD_voidInit+0x1338>
    2cee:	88 ec       	ldi	r24, 0xC8	; 200
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	98 a3       	std	Y+32, r25	; 0x20
    2cf4:	8f 8f       	std	Y+31, r24	; 0x1f
    2cf6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cf8:	98 a1       	ldd	r25, Y+32	; 0x20
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <LCD_voidInit+0x1326>
    2cfe:	98 a3       	std	Y+32, r25	; 0x20
    2d00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d02:	89 a1       	ldd	r24, Y+33	; 0x21
    2d04:	9a a1       	ldd	r25, Y+34	; 0x22
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	9a a3       	std	Y+34, r25	; 0x22
    2d0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	69 f7       	brne	.-38     	; 0x2cee <LCD_voidInit+0x131a>
    2d14:	14 c0       	rjmp	.+40     	; 0x2d3e <LCD_voidInit+0x136a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d16:	6b a1       	ldd	r22, Y+35	; 0x23
    2d18:	7c a1       	ldd	r23, Y+36	; 0x24
    2d1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	9a a3       	std	Y+34, r25	; 0x22
    2d28:	89 a3       	std	Y+33, r24	; 0x21
    2d2a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d2c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d30:	8d 8f       	std	Y+29, r24	; 0x1d
    2d32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	f1 f7       	brne	.-4      	; 0x2d36 <LCD_voidInit+0x1362>
    2d3a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d3c:	8d 8f       	std	Y+29, r24	; 0x1d
				 _delay_ms(1);

				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    2d3e:	fe 01       	movw	r30, r28
    2d40:	ea 53       	subi	r30, 0x3A	; 58
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	80 81       	ld	r24, Z
    2d46:	60 e0       	ldi	r22, 0x00	; 0
    2d48:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	a0 e8       	ldi	r26, 0x80	; 128
    2d52:	bf e3       	ldi	r27, 0x3F	; 63
    2d54:	89 8f       	std	Y+25, r24	; 0x19
    2d56:	9a 8f       	std	Y+26, r25	; 0x1a
    2d58:	ab 8f       	std	Y+27, r26	; 0x1b
    2d5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	4a ef       	ldi	r20, 0xFA	; 250
    2d6a:	54 e4       	ldi	r21, 0x44	; 68
    2d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	8d 8b       	std	Y+21, r24	; 0x15
    2d76:	9e 8b       	std	Y+22, r25	; 0x16
    2d78:	af 8b       	std	Y+23, r26	; 0x17
    2d7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d80:	8f 89       	ldd	r24, Y+23	; 0x17
    2d82:	98 8d       	ldd	r25, Y+24	; 0x18
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	40 e8       	ldi	r20, 0x80	; 128
    2d8a:	5f e3       	ldi	r21, 0x3F	; 63
    2d8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d90:	88 23       	and	r24, r24
    2d92:	2c f4       	brge	.+10     	; 0x2d9e <LCD_voidInit+0x13ca>
		__ticks = 1;
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	9c 8b       	std	Y+20, r25	; 0x14
    2d9a:	8b 8b       	std	Y+19, r24	; 0x13
    2d9c:	3f c0       	rjmp	.+126    	; 0x2e1c <LCD_voidInit+0x1448>
	else if (__tmp > 65535)
    2d9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2da0:	7e 89       	ldd	r23, Y+22	; 0x16
    2da2:	8f 89       	ldd	r24, Y+23	; 0x17
    2da4:	98 8d       	ldd	r25, Y+24	; 0x18
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	3f ef       	ldi	r19, 0xFF	; 255
    2daa:	4f e7       	ldi	r20, 0x7F	; 127
    2dac:	57 e4       	ldi	r21, 0x47	; 71
    2dae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2db2:	18 16       	cp	r1, r24
    2db4:	4c f5       	brge	.+82     	; 0x2e08 <LCD_voidInit+0x1434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db6:	69 8d       	ldd	r22, Y+25	; 0x19
    2db8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	40 e2       	ldi	r20, 0x20	; 32
    2dc4:	51 e4       	ldi	r21, 0x41	; 65
    2dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	bc 01       	movw	r22, r24
    2dd0:	cd 01       	movw	r24, r26
    2dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	9c 8b       	std	Y+20, r25	; 0x14
    2ddc:	8b 8b       	std	Y+19, r24	; 0x13
    2dde:	0f c0       	rjmp	.+30     	; 0x2dfe <LCD_voidInit+0x142a>
    2de0:	88 ec       	ldi	r24, 0xC8	; 200
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	9a 8b       	std	Y+18, r25	; 0x12
    2de6:	89 8b       	std	Y+17, r24	; 0x11
    2de8:	89 89       	ldd	r24, Y+17	; 0x11
    2dea:	9a 89       	ldd	r25, Y+18	; 0x12
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	f1 f7       	brne	.-4      	; 0x2dec <LCD_voidInit+0x1418>
    2df0:	9a 8b       	std	Y+18, r25	; 0x12
    2df2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df4:	8b 89       	ldd	r24, Y+19	; 0x13
    2df6:	9c 89       	ldd	r25, Y+20	; 0x14
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	9c 8b       	std	Y+20, r25	; 0x14
    2dfc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2e00:	9c 89       	ldd	r25, Y+20	; 0x14
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	69 f7       	brne	.-38     	; 0x2de0 <LCD_voidInit+0x140c>
    2e06:	14 c0       	rjmp	.+40     	; 0x2e30 <LCD_voidInit+0x145c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e08:	6d 89       	ldd	r22, Y+21	; 0x15
    2e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	9c 8b       	std	Y+20, r25	; 0x14
    2e1a:	8b 8b       	std	Y+19, r24	; 0x13
    2e1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e20:	98 8b       	std	Y+16, r25	; 0x10
    2e22:	8f 87       	std	Y+15, r24	; 0x0f
    2e24:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e26:	98 89       	ldd	r25, Y+16	; 0x10
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	f1 f7       	brne	.-4      	; 0x2e28 <LCD_voidInit+0x1454>
    2e2c:	98 8b       	std	Y+16, r25	; 0x10
    2e2e:	8f 87       	std	Y+15, r24	; 0x0f
			    _delay_ms(1);

				u8CmdLoc = 0x40|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment    <<5 |
    2e30:	fe 01       	movw	r30, r28
    2e32:	ea 53       	subi	r30, 0x3A	; 58
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	80 81       	ld	r24, Z
    2e38:	28 2f       	mov	r18, r24
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	c9 01       	movw	r24, r18
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	82 0f       	add	r24, r18
    2e44:	93 1f       	adc	r25, r19
    2e46:	88 0f       	add	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	88 0f       	add	r24, r24
    2e4c:	99 1f       	adc	r25, r25
    2e4e:	fc 01       	movw	r30, r24
    2e50:	e1 58       	subi	r30, 0x81	; 129
    2e52:	fe 4f       	sbci	r31, 0xFE	; 254
    2e54:	80 81       	ld	r24, Z
    2e56:	82 95       	swap	r24
    2e58:	86 95       	lsr	r24
    2e5a:	86 95       	lsr	r24
    2e5c:	83 70       	andi	r24, 0x03	; 3
    2e5e:	81 70       	andi	r24, 0x01	; 1
    2e60:	88 2f       	mov	r24, r24
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	88 0f       	add	r24, r24
    2e66:	99 1f       	adc	r25, r25
    2e68:	82 95       	swap	r24
    2e6a:	92 95       	swap	r25
    2e6c:	90 7f       	andi	r25, 0xF0	; 240
    2e6e:	98 27       	eor	r25, r24
    2e70:	80 7f       	andi	r24, 0xF0	; 240
    2e72:	98 27       	eor	r25, r24
    2e74:	48 2f       	mov	r20, r24
    2e76:	40 64       	ori	r20, 0x40	; 64
    2e78:	fe 01       	movw	r30, r28
    2e7a:	ea 53       	subi	r30, 0x3A	; 58
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	80 81       	ld	r24, Z
    2e80:	28 2f       	mov	r18, r24
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	c9 01       	movw	r24, r18
    2e86:	88 0f       	add	r24, r24
    2e88:	99 1f       	adc	r25, r25
    2e8a:	82 0f       	add	r24, r18
    2e8c:	93 1f       	adc	r25, r19
    2e8e:	88 0f       	add	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	fc 01       	movw	r30, r24
    2e98:	e1 58       	subi	r30, 0x81	; 129
    2e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e9c:	80 81       	ld	r24, Z
    2e9e:	88 1f       	adc	r24, r24
    2ea0:	88 27       	eor	r24, r24
    2ea2:	88 1f       	adc	r24, r24
    2ea4:	88 2f       	mov	r24, r24
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	82 95       	swap	r24
    2eaa:	92 95       	swap	r25
    2eac:	90 7f       	andi	r25, 0xF0	; 240
    2eae:	98 27       	eor	r25, r24
    2eb0:	80 7f       	andi	r24, 0xF0	; 240
    2eb2:	98 27       	eor	r25, r24
    2eb4:	84 2b       	or	r24, r20
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	eb 53       	subi	r30, 0x3B	; 59
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift <<4 ;

				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	ea 53       	subi	r30, 0x3A	; 58
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	de 01       	movw	r26, r28
    2ec6:	ab 53       	subi	r26, 0x3B	; 59
    2ec8:	bf 4f       	sbci	r27, 0xFF	; 255
    2eca:	80 81       	ld	r24, Z
    2ecc:	6c 91       	ld	r22, X
    2ece:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	a0 e8       	ldi	r26, 0x80	; 128
    2ed8:	bf e3       	ldi	r27, 0x3F	; 63
    2eda:	8b 87       	std	Y+11, r24	; 0x0b
    2edc:	9c 87       	std	Y+12, r25	; 0x0c
    2ede:	ad 87       	std	Y+13, r26	; 0x0d
    2ee0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	4a ef       	ldi	r20, 0xFA	; 250
    2ef0:	54 e4       	ldi	r21, 0x44	; 68
    2ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	8f 83       	std	Y+7, r24	; 0x07
    2efc:	98 87       	std	Y+8, r25	; 0x08
    2efe:	a9 87       	std	Y+9, r26	; 0x09
    2f00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f02:	6f 81       	ldd	r22, Y+7	; 0x07
    2f04:	78 85       	ldd	r23, Y+8	; 0x08
    2f06:	89 85       	ldd	r24, Y+9	; 0x09
    2f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e8       	ldi	r20, 0x80	; 128
    2f10:	5f e3       	ldi	r21, 0x3F	; 63
    2f12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f16:	88 23       	and	r24, r24
    2f18:	2c f4       	brge	.+10     	; 0x2f24 <LCD_voidInit+0x1550>
		__ticks = 1;
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	9e 83       	std	Y+6, r25	; 0x06
    2f20:	8d 83       	std	Y+5, r24	; 0x05
    2f22:	3f c0       	rjmp	.+126    	; 0x2fa2 <LCD_voidInit+0x15ce>
	else if (__tmp > 65535)
    2f24:	6f 81       	ldd	r22, Y+7	; 0x07
    2f26:	78 85       	ldd	r23, Y+8	; 0x08
    2f28:	89 85       	ldd	r24, Y+9	; 0x09
    2f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	3f ef       	ldi	r19, 0xFF	; 255
    2f30:	4f e7       	ldi	r20, 0x7F	; 127
    2f32:	57 e4       	ldi	r21, 0x47	; 71
    2f34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f38:	18 16       	cp	r1, r24
    2f3a:	4c f5       	brge	.+82     	; 0x2f8e <LCD_voidInit+0x15ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	40 e2       	ldi	r20, 0x20	; 32
    2f4a:	51 e4       	ldi	r21, 0x41	; 65
    2f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	bc 01       	movw	r22, r24
    2f56:	cd 01       	movw	r24, r26
    2f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	9e 83       	std	Y+6, r25	; 0x06
    2f62:	8d 83       	std	Y+5, r24	; 0x05
    2f64:	0f c0       	rjmp	.+30     	; 0x2f84 <LCD_voidInit+0x15b0>
    2f66:	88 ec       	ldi	r24, 0xC8	; 200
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	9c 83       	std	Y+4, r25	; 0x04
    2f6c:	8b 83       	std	Y+3, r24	; 0x03
    2f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f70:	9c 81       	ldd	r25, Y+4	; 0x04
    2f72:	01 97       	sbiw	r24, 0x01	; 1
    2f74:	f1 f7       	brne	.-4      	; 0x2f72 <LCD_voidInit+0x159e>
    2f76:	9c 83       	std	Y+4, r25	; 0x04
    2f78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	9e 83       	std	Y+6, r25	; 0x06
    2f82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f84:	8d 81       	ldd	r24, Y+5	; 0x05
    2f86:	9e 81       	ldd	r25, Y+6	; 0x06
    2f88:	00 97       	sbiw	r24, 0x00	; 0
    2f8a:	69 f7       	brne	.-38     	; 0x2f66 <LCD_voidInit+0x1592>
    2f8c:	14 c0       	rjmp	.+40     	; 0x2fb6 <LCD_voidInit+0x15e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f90:	78 85       	ldd	r23, Y+8	; 0x08
    2f92:	89 85       	ldd	r24, Y+9	; 0x09
    2f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	9e 83       	std	Y+6, r25	; 0x06
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
    2fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa6:	9a 83       	std	Y+2, r25	; 0x02
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	9a 81       	ldd	r25, Y+2	; 0x02
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <LCD_voidInit+0x15da>
    2fb2:	9a 83       	std	Y+2, r25	; 0x02
    2fb4:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void)
{
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
    2fb6:	de 01       	movw	r26, r28
    2fb8:	aa 53       	subi	r26, 0x3A	; 58
    2fba:	bf 4f       	sbci	r27, 0xFF	; 255
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	ea 53       	subi	r30, 0x3A	; 58
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	80 81       	ld	r24, Z
    2fc4:	8f 5f       	subi	r24, 0xFF	; 255
    2fc6:	8c 93       	st	X, r24
    2fc8:	fe 01       	movw	r30, r28
    2fca:	ea 53       	subi	r30, 0x3A	; 58
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	80 81       	ld	r24, Z
    2fd0:	83 30       	cpi	r24, 0x03	; 3
    2fd2:	10 f4       	brcc	.+4      	; 0x2fd8 <LCD_voidInit+0x1604>
    2fd4:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <LCD_voidInit+0x26>




	}
}
    2fd8:	ca 53       	subi	r28, 0x3A	; 58
    2fda:	df 4f       	sbci	r29, 0xFF	; 255
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	1f 91       	pop	r17
    2fec:	0f 91       	pop	r16
    2fee:	08 95       	ret

00002ff0 <LCD_enuWriteCmd>:

tenuErrorStatus LCD_enuWriteCmd (uint8 u8LcdNumCpy , uint8 u8CmdCpy)
{
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	00 d0       	rcall	.+0      	; 0x2ff6 <LCD_enuWriteCmd+0x6>
    2ff6:	0f 92       	push	r0
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	8a 83       	std	Y+2, r24	; 0x02
    2ffe:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    3000:	19 82       	std	Y+1, r1	; 0x01
	if (u8LcdNumCpy < LCD_MAX_NUM )
    3002:	8a 81       	ldd	r24, Y+2	; 0x02
    3004:	83 30       	cpi	r24, 0x03	; 3
    3006:	c8 f4       	brcc	.+50     	; 0x303a <LCD_enuWriteCmd+0x4a>
	{
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect,DIO_u8LOW);
    3008:	8a 81       	ldd	r24, Y+2	; 0x02
    300a:	28 2f       	mov	r18, r24
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	c9 01       	movw	r24, r18
    3010:	88 0f       	add	r24, r24
    3012:	99 1f       	adc	r25, r25
    3014:	82 0f       	add	r24, r18
    3016:	93 1f       	adc	r25, r19
    3018:	88 0f       	add	r24, r24
    301a:	99 1f       	adc	r25, r25
    301c:	88 0f       	add	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	fc 01       	movw	r30, r24
    3022:	e0 58       	subi	r30, 0x80	; 128
    3024:	fe 4f       	sbci	r31, 0xFE	; 254
    3026:	80 81       	ld	r24, Z
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>
		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy , u8CmdCpy );
    302e:	8a 81       	ldd	r24, Y+2	; 0x02
    3030:	6b 81       	ldd	r22, Y+3	; 0x03
    3032:	0e 94 ce 19 	call	0x339c	; 0x339c <LCD_enuHelp>
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	02 c0       	rjmp	.+4      	; 0x303e <LCD_enuWriteCmd+0x4e>
	}
	else
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    303a:	82 e0       	ldi	r24, 0x02	; 2
    303c:	89 83       	std	Y+1, r24	; 0x01
	}


	return enuErrorStateLoc ;
    303e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <LCD_enuWriteChar>:

tenuErrorStatus LCD_enuWriteChar (uint8 u8LcdNumCpy , uint8 u8DataCpy)
{
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	00 d0       	rcall	.+0      	; 0x3052 <LCD_enuWriteChar+0x6>
    3052:	0f 92       	push	r0
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
    3058:	8a 83       	std	Y+2, r24	; 0x02
    305a:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    305c:	19 82       	std	Y+1, r1	; 0x01
	if (u8LcdNumCpy < LCD_MAX_NUM )
    305e:	8a 81       	ldd	r24, Y+2	; 0x02
    3060:	83 30       	cpi	r24, 0x03	; 3
    3062:	c8 f4       	brcc	.+50     	; 0x3096 <LCD_enuWriteChar+0x4a>
	{
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect,DIO_u8HIGH);
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	28 2f       	mov	r18, r24
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	c9 01       	movw	r24, r18
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	82 0f       	add	r24, r18
    3072:	93 1f       	adc	r25, r19
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	88 0f       	add	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	fc 01       	movw	r30, r24
    307e:	e0 58       	subi	r30, 0x80	; 128
    3080:	fe 4f       	sbci	r31, 0xFE	; 254
    3082:	80 81       	ld	r24, Z
    3084:	61 e0       	ldi	r22, 0x01	; 1
    3086:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>
		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy , u8DataCpy );
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	6b 81       	ldd	r22, Y+3	; 0x03
    308e:	0e 94 ce 19 	call	0x339c	; 0x339c <LCD_enuHelp>
    3092:	89 83       	std	Y+1, r24	; 0x01
    3094:	02 c0       	rjmp	.+4      	; 0x309a <LCD_enuWriteChar+0x4e>
	}
	else
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    3096:	82 e0       	ldi	r24, 0x02	; 2
    3098:	89 83       	std	Y+1, r24	; 0x01
	}


	return enuErrorStateLoc ;
    309a:	89 81       	ldd	r24, Y+1	; 0x01

}
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	cf 91       	pop	r28
    30a4:	df 91       	pop	r29
    30a6:	08 95       	ret

000030a8 <LCD_enuWritenumber>:

void LCD_enuWritenumber(uint8 u8LcdNumCpy ,float32  pu8DataCpy)
{
    30a8:	0f 93       	push	r16
    30aa:	1f 93       	push	r17
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
    30b4:	cf 56       	subi	r28, 0x6F	; 111
    30b6:	d0 40       	sbci	r29, 0x00	; 0
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	de bf       	out	0x3e, r29	; 62
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	cd bf       	out	0x3d, r28	; 61
    30c2:	fe 01       	movw	r30, r28
    30c4:	e5 59       	subi	r30, 0x95	; 149
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	80 83       	st	Z, r24
    30ca:	fe 01       	movw	r30, r28
    30cc:	e4 59       	subi	r30, 0x94	; 148
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	40 83       	st	Z, r20
    30d2:	51 83       	std	Z+1, r21	; 0x01
    30d4:	62 83       	std	Z+2, r22	; 0x02
    30d6:	73 83       	std	Z+3, r23	; 0x03
	uint8 array[100];
	uint8 cntr = 0 ;
    30d8:	1e 82       	std	Y+6, r1	; 0x06
	sint8 loopcntr;
	float32 temp;

    if(pu8DataCpy < 0)
    30da:	fe 01       	movw	r30, r28
    30dc:	e4 59       	subi	r30, 0x94	; 148
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	60 81       	ld	r22, Z
    30e2:	71 81       	ldd	r23, Z+1	; 0x01
    30e4:	82 81       	ldd	r24, Z+2	; 0x02
    30e6:	93 81       	ldd	r25, Z+3	; 0x03
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e0       	ldi	r20, 0x00	; 0
    30ee:	50 e0       	ldi	r21, 0x00	; 0
    30f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f4:	88 23       	and	r24, r24
    30f6:	94 f5       	brge	.+100    	; 0x315c <LCD_enuWritenumber+0xb4>
    {
         LCD_enuWriteChar(u8LcdNumCpy , '-');
    30f8:	fe 01       	movw	r30, r28
    30fa:	e5 59       	subi	r30, 0x95	; 149
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	80 81       	ld	r24, Z
    3100:	6d e2       	ldi	r22, 0x2D	; 45
    3102:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_enuWriteChar>
         temp = 0 - pu8DataCpy;
    3106:	fe 01       	movw	r30, r28
    3108:	e4 59       	subi	r30, 0x94	; 148
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	60 e0       	ldi	r22, 0x00	; 0
    310e:	70 e0       	ldi	r23, 0x00	; 0
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	20 81       	ld	r18, Z
    3116:	31 81       	ldd	r19, Z+1	; 0x01
    3118:	42 81       	ldd	r20, Z+2	; 0x02
    311a:	53 81       	ldd	r21, Z+3	; 0x03
    311c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	89 83       	std	Y+1, r24	; 0x01
    3126:	9a 83       	std	Y+2, r25	; 0x02
    3128:	ab 83       	std	Y+3, r26	; 0x03
    312a:	bc 83       	std	Y+4, r27	; 0x04
         pu8DataCpy = 0 - pu8DataCpy ;
    312c:	8e 01       	movw	r16, r28
    312e:	04 59       	subi	r16, 0x94	; 148
    3130:	1f 4f       	sbci	r17, 0xFF	; 255
    3132:	fe 01       	movw	r30, r28
    3134:	e4 59       	subi	r30, 0x94	; 148
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	20 81       	ld	r18, Z
    3142:	31 81       	ldd	r19, Z+1	; 0x01
    3144:	42 81       	ldd	r20, Z+2	; 0x02
    3146:	53 81       	ldd	r21, Z+3	; 0x03
    3148:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	f8 01       	movw	r30, r16
    3152:	80 83       	st	Z, r24
    3154:	91 83       	std	Z+1, r25	; 0x01
    3156:	a2 83       	std	Z+2, r26	; 0x02
    3158:	b3 83       	std	Z+3, r27	; 0x03
    315a:	0b c0       	rjmp	.+22     	; 0x3172 <LCD_enuWritenumber+0xca>
    }
    else
    {
    	temp = pu8DataCpy ;
    315c:	fe 01       	movw	r30, r28
    315e:	e4 59       	subi	r30, 0x94	; 148
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	80 81       	ld	r24, Z
    3164:	91 81       	ldd	r25, Z+1	; 0x01
    3166:	a2 81       	ldd	r26, Z+2	; 0x02
    3168:	b3 81       	ldd	r27, Z+3	; 0x03
    316a:	89 83       	std	Y+1, r24	; 0x01
    316c:	9a 83       	std	Y+2, r25	; 0x02
    316e:	ab 83       	std	Y+3, r26	; 0x03
    3170:	bc 83       	std	Y+4, r27	; 0x04
    }

	do{
		array[cntr] = (int)(temp)%10 ;
    3172:	8e 81       	ldd	r24, Y+6	; 0x06
    3174:	08 2f       	mov	r16, r24
    3176:	10 e0       	ldi	r17, 0x00	; 0
    3178:	69 81       	ldd	r22, Y+1	; 0x01
    317a:	7a 81       	ldd	r23, Y+2	; 0x02
    317c:	8b 81       	ldd	r24, Y+3	; 0x03
    317e:	9c 81       	ldd	r25, Y+4	; 0x04
    3180:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	2a e0       	ldi	r18, 0x0A	; 10
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	b9 01       	movw	r22, r18
    318e:	0e 94 9e 21 	call	0x433c	; 0x433c <__divmodhi4>
    3192:	28 2f       	mov	r18, r24
    3194:	ce 01       	movw	r24, r28
    3196:	07 96       	adiw	r24, 0x07	; 7
    3198:	fc 01       	movw	r30, r24
    319a:	e0 0f       	add	r30, r16
    319c:	f1 1f       	adc	r31, r17
    319e:	20 83       	st	Z, r18
		array[cntr] = array[cntr] + '0' ;
    31a0:	8e 81       	ldd	r24, Y+6	; 0x06
    31a2:	48 2f       	mov	r20, r24
    31a4:	50 e0       	ldi	r21, 0x00	; 0
    31a6:	8e 81       	ldd	r24, Y+6	; 0x06
    31a8:	28 2f       	mov	r18, r24
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	ce 01       	movw	r24, r28
    31ae:	07 96       	adiw	r24, 0x07	; 7
    31b0:	fc 01       	movw	r30, r24
    31b2:	e2 0f       	add	r30, r18
    31b4:	f3 1f       	adc	r31, r19
    31b6:	80 81       	ld	r24, Z
    31b8:	28 2f       	mov	r18, r24
    31ba:	20 5d       	subi	r18, 0xD0	; 208
    31bc:	ce 01       	movw	r24, r28
    31be:	07 96       	adiw	r24, 0x07	; 7
    31c0:	fc 01       	movw	r30, r24
    31c2:	e4 0f       	add	r30, r20
    31c4:	f5 1f       	adc	r31, r21
    31c6:	20 83       	st	Z, r18
		temp = temp/10;
    31c8:	69 81       	ldd	r22, Y+1	; 0x01
    31ca:	7a 81       	ldd	r23, Y+2	; 0x02
    31cc:	8b 81       	ldd	r24, Y+3	; 0x03
    31ce:	9c 81       	ldd	r25, Y+4	; 0x04
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e2       	ldi	r20, 0x20	; 32
    31d6:	51 e4       	ldi	r21, 0x41	; 65
    31d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	89 83       	std	Y+1, r24	; 0x01
    31e2:	9a 83       	std	Y+2, r25	; 0x02
    31e4:	ab 83       	std	Y+3, r26	; 0x03
    31e6:	bc 83       	std	Y+4, r27	; 0x04
		cntr++;
    31e8:	8e 81       	ldd	r24, Y+6	; 0x06
    31ea:	8f 5f       	subi	r24, 0xFF	; 255
    31ec:	8e 83       	std	Y+6, r24	; 0x06
	}while( (int)temp !=0);
    31ee:	69 81       	ldd	r22, Y+1	; 0x01
    31f0:	7a 81       	ldd	r23, Y+2	; 0x02
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	9c 81       	ldd	r25, Y+4	; 0x04
    31f6:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	00 97       	sbiw	r24, 0x00	; 0
    3200:	09 f0       	breq	.+2      	; 0x3204 <LCD_enuWritenumber+0x15c>
    3202:	b7 cf       	rjmp	.-146    	; 0x3172 <LCD_enuWritenumber+0xca>

	for(loopcntr = (cntr-1) ; loopcntr >=0  ; loopcntr --){
    3204:	8e 81       	ldd	r24, Y+6	; 0x06
    3206:	81 50       	subi	r24, 0x01	; 1
    3208:	8d 83       	std	Y+5, r24	; 0x05
    320a:	15 c0       	rjmp	.+42     	; 0x3236 <LCD_enuWritenumber+0x18e>
		LCD_enuWriteChar(u8LcdNumCpy ,array[loopcntr]);
    320c:	8d 81       	ldd	r24, Y+5	; 0x05
    320e:	28 2f       	mov	r18, r24
    3210:	33 27       	eor	r19, r19
    3212:	27 fd       	sbrc	r18, 7
    3214:	30 95       	com	r19
    3216:	ce 01       	movw	r24, r28
    3218:	07 96       	adiw	r24, 0x07	; 7
    321a:	fc 01       	movw	r30, r24
    321c:	e2 0f       	add	r30, r18
    321e:	f3 1f       	adc	r31, r19
    3220:	90 81       	ld	r25, Z
    3222:	fe 01       	movw	r30, r28
    3224:	e5 59       	subi	r30, 0x95	; 149
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	80 81       	ld	r24, Z
    322a:	69 2f       	mov	r22, r25
    322c:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_enuWriteChar>
		array[cntr] = array[cntr] + '0' ;
		temp = temp/10;
		cntr++;
	}while( (int)temp !=0);

	for(loopcntr = (cntr-1) ; loopcntr >=0  ; loopcntr --){
    3230:	8d 81       	ldd	r24, Y+5	; 0x05
    3232:	81 50       	subi	r24, 0x01	; 1
    3234:	8d 83       	std	Y+5, r24	; 0x05
    3236:	8d 81       	ldd	r24, Y+5	; 0x05
    3238:	88 23       	and	r24, r24
    323a:	44 f7       	brge	.-48     	; 0x320c <LCD_enuWritenumber+0x164>
		LCD_enuWriteChar(u8LcdNumCpy ,array[loopcntr]);
	}


	if( (pu8DataCpy - (int)pu8DataCpy ) > 0.001 ){
    323c:	fe 01       	movw	r30, r28
    323e:	e4 59       	subi	r30, 0x94	; 148
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	60 81       	ld	r22, Z
    3244:	71 81       	ldd	r23, Z+1	; 0x01
    3246:	82 81       	ldd	r24, Z+2	; 0x02
    3248:	93 81       	ldd	r25, Z+3	; 0x03
    324a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	aa 27       	eor	r26, r26
    3254:	97 fd       	sbrc	r25, 7
    3256:	a0 95       	com	r26
    3258:	ba 2f       	mov	r27, r26
    325a:	bc 01       	movw	r22, r24
    325c:	cd 01       	movw	r24, r26
    325e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3262:	9b 01       	movw	r18, r22
    3264:	ac 01       	movw	r20, r24
    3266:	fe 01       	movw	r30, r28
    3268:	e4 59       	subi	r30, 0x94	; 148
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	60 81       	ld	r22, Z
    326e:	71 81       	ldd	r23, Z+1	; 0x01
    3270:	82 81       	ldd	r24, Z+2	; 0x02
    3272:	93 81       	ldd	r25, Z+3	; 0x03
    3274:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	bc 01       	movw	r22, r24
    327e:	cd 01       	movw	r24, r26
    3280:	2f e6       	ldi	r18, 0x6F	; 111
    3282:	32 e1       	ldi	r19, 0x12	; 18
    3284:	43 e8       	ldi	r20, 0x83	; 131
    3286:	5a e3       	ldi	r21, 0x3A	; 58
    3288:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    328c:	18 16       	cp	r1, r24
    328e:	0c f0       	brlt	.+2      	; 0x3292 <LCD_enuWritenumber+0x1ea>
    3290:	79 c0       	rjmp	.+242    	; 0x3384 <LCD_enuWritenumber+0x2dc>

		LCD_enuWriteChar(u8LcdNumCpy , '.');
    3292:	fe 01       	movw	r30, r28
    3294:	e5 59       	subi	r30, 0x95	; 149
    3296:	ff 4f       	sbci	r31, 0xFF	; 255
    3298:	80 81       	ld	r24, Z
    329a:	6e e2       	ldi	r22, 0x2E	; 46
    329c:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_enuWriteChar>

		for(loopcntr = 0 ; loopcntr < 4 ; loopcntr++ ){
    32a0:	1d 82       	std	Y+5, r1	; 0x05
    32a2:	6c c0       	rjmp	.+216    	; 0x337c <LCD_enuWritenumber+0x2d4>
			pu8DataCpy = pu8DataCpy - (int)pu8DataCpy;
    32a4:	fe 01       	movw	r30, r28
    32a6:	e4 59       	subi	r30, 0x94	; 148
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	60 81       	ld	r22, Z
    32ac:	71 81       	ldd	r23, Z+1	; 0x01
    32ae:	82 81       	ldd	r24, Z+2	; 0x02
    32b0:	93 81       	ldd	r25, Z+3	; 0x03
    32b2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	aa 27       	eor	r26, r26
    32bc:	97 fd       	sbrc	r25, 7
    32be:	a0 95       	com	r26
    32c0:	ba 2f       	mov	r27, r26
    32c2:	bc 01       	movw	r22, r24
    32c4:	cd 01       	movw	r24, r26
    32c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    32ca:	9b 01       	movw	r18, r22
    32cc:	ac 01       	movw	r20, r24
    32ce:	8e 01       	movw	r16, r28
    32d0:	04 59       	subi	r16, 0x94	; 148
    32d2:	1f 4f       	sbci	r17, 0xFF	; 255
    32d4:	fe 01       	movw	r30, r28
    32d6:	e4 59       	subi	r30, 0x94	; 148
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	60 81       	ld	r22, Z
    32dc:	71 81       	ldd	r23, Z+1	; 0x01
    32de:	82 81       	ldd	r24, Z+2	; 0x02
    32e0:	93 81       	ldd	r25, Z+3	; 0x03
    32e2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	f8 01       	movw	r30, r16
    32ec:	80 83       	st	Z, r24
    32ee:	91 83       	std	Z+1, r25	; 0x01
    32f0:	a2 83       	std	Z+2, r26	; 0x02
    32f2:	b3 83       	std	Z+3, r27	; 0x03
			pu8DataCpy = pu8DataCpy*10 ;
    32f4:	8e 01       	movw	r16, r28
    32f6:	04 59       	subi	r16, 0x94	; 148
    32f8:	1f 4f       	sbci	r17, 0xFF	; 255
    32fa:	fe 01       	movw	r30, r28
    32fc:	e4 59       	subi	r30, 0x94	; 148
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	60 81       	ld	r22, Z
    3302:	71 81       	ldd	r23, Z+1	; 0x01
    3304:	82 81       	ldd	r24, Z+2	; 0x02
    3306:	93 81       	ldd	r25, Z+3	; 0x03
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	40 e2       	ldi	r20, 0x20	; 32
    330e:	51 e4       	ldi	r21, 0x41	; 65
    3310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	f8 01       	movw	r30, r16
    331a:	80 83       	st	Z, r24
    331c:	91 83       	std	Z+1, r25	; 0x01
    331e:	a2 83       	std	Z+2, r26	; 0x02
    3320:	b3 83       	std	Z+3, r27	; 0x03
			temp = (int)pu8DataCpy + '0';
    3322:	fe 01       	movw	r30, r28
    3324:	e4 59       	subi	r30, 0x94	; 148
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	60 81       	ld	r22, Z
    332a:	71 81       	ldd	r23, Z+1	; 0x01
    332c:	82 81       	ldd	r24, Z+2	; 0x02
    332e:	93 81       	ldd	r25, Z+3	; 0x03
    3330:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	c0 96       	adiw	r24, 0x30	; 48
    333a:	aa 27       	eor	r26, r26
    333c:	97 fd       	sbrc	r25, 7
    333e:	a0 95       	com	r26
    3340:	ba 2f       	mov	r27, r26
    3342:	bc 01       	movw	r22, r24
    3344:	cd 01       	movw	r24, r26
    3346:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	89 83       	std	Y+1, r24	; 0x01
    3350:	9a 83       	std	Y+2, r25	; 0x02
    3352:	ab 83       	std	Y+3, r26	; 0x03
    3354:	bc 83       	std	Y+4, r27	; 0x04
			LCD_enuWriteChar(u8LcdNumCpy ,temp);
    3356:	69 81       	ldd	r22, Y+1	; 0x01
    3358:	7a 81       	ldd	r23, Y+2	; 0x02
    335a:	8b 81       	ldd	r24, Y+3	; 0x03
    335c:	9c 81       	ldd	r25, Y+4	; 0x04
    335e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	98 2f       	mov	r25, r24
    3368:	fe 01       	movw	r30, r28
    336a:	e5 59       	subi	r30, 0x95	; 149
    336c:	ff 4f       	sbci	r31, 0xFF	; 255
    336e:	80 81       	ld	r24, Z
    3370:	69 2f       	mov	r22, r25
    3372:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_enuWriteChar>

	if( (pu8DataCpy - (int)pu8DataCpy ) > 0.001 ){

		LCD_enuWriteChar(u8LcdNumCpy , '.');

		for(loopcntr = 0 ; loopcntr < 4 ; loopcntr++ ){
    3376:	8d 81       	ldd	r24, Y+5	; 0x05
    3378:	8f 5f       	subi	r24, 0xFF	; 255
    337a:	8d 83       	std	Y+5, r24	; 0x05
    337c:	8d 81       	ldd	r24, Y+5	; 0x05
    337e:	84 30       	cpi	r24, 0x04	; 4
    3380:	0c f4       	brge	.+2      	; 0x3384 <LCD_enuWritenumber+0x2dc>
    3382:	90 cf       	rjmp	.-224    	; 0x32a4 <LCD_enuWritenumber+0x1fc>
			LCD_enuWriteChar(u8LcdNumCpy ,temp);
		}

	}

}
    3384:	c1 59       	subi	r28, 0x91	; 145
    3386:	df 4f       	sbci	r29, 0xFF	; 255
    3388:	0f b6       	in	r0, 0x3f	; 63
    338a:	f8 94       	cli
    338c:	de bf       	out	0x3e, r29	; 62
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	cd bf       	out	0x3d, r28	; 61
    3392:	cf 91       	pop	r28
    3394:	df 91       	pop	r29
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
    339a:	08 95       	ret

0000339c <LCD_enuHelp>:

static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy)
{
    339c:	df 93       	push	r29
    339e:	cf 93       	push	r28
    33a0:	00 d0       	rcall	.+0      	; 0x33a2 <LCD_enuHelp+0x6>
    33a2:	00 d0       	rcall	.+0      	; 0x33a4 <LCD_enuHelp+0x8>
    33a4:	cd b7       	in	r28, 0x3d	; 61
    33a6:	de b7       	in	r29, 0x3e	; 62
    33a8:	8b 83       	std	Y+3, r24	; 0x03
    33aa:	6c 83       	std	Y+4, r22	; 0x04
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    33ac:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch   ,DIO_u8HIGH);
    33ae:	8b 81       	ldd	r24, Y+3	; 0x03
    33b0:	28 2f       	mov	r18, r24
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	c9 01       	movw	r24, r18
    33b6:	88 0f       	add	r24, r24
    33b8:	99 1f       	adc	r25, r25
    33ba:	82 0f       	add	r24, r18
    33bc:	93 1f       	adc	r25, r19
    33be:	88 0f       	add	r24, r24
    33c0:	99 1f       	adc	r25, r25
    33c2:	88 0f       	add	r24, r24
    33c4:	99 1f       	adc	r25, r25
    33c6:	fc 01       	movw	r30, r24
    33c8:	ee 57       	subi	r30, 0x7E	; 126
    33ca:	fe 4f       	sbci	r31, 0xFE	; 254
    33cc:	80 81       	ld	r24, Z
    33ce:	61 e0       	ldi	r22, 0x01	; 1
    33d0:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite     ,DIO_u8LOW);
    33d4:	8b 81       	ldd	r24, Y+3	; 0x03
    33d6:	28 2f       	mov	r18, r24
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	c9 01       	movw	r24, r18
    33dc:	88 0f       	add	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	82 0f       	add	r24, r18
    33e2:	93 1f       	adc	r25, r19
    33e4:	88 0f       	add	r24, r24
    33e6:	99 1f       	adc	r25, r25
    33e8:	01 96       	adiw	r24, 0x01	; 1
    33ea:	88 0f       	add	r24, r24
    33ec:	99 1f       	adc	r25, r25
    33ee:	fc 01       	movw	r30, r24
    33f0:	e1 58       	subi	r30, 0x81	; 129
    33f2:	fe 4f       	sbci	r31, 0xFE	; 254
    33f4:	80 81       	ld	r24, Z
    33f6:	60 e0       	ldi	r22, 0x00	; 0
    33f8:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>

		if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
    33fc:	8b 81       	ldd	r24, Y+3	; 0x03
    33fe:	28 2f       	mov	r18, r24
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	c9 01       	movw	r24, r18
    3404:	88 0f       	add	r24, r24
    3406:	99 1f       	adc	r25, r25
    3408:	82 0f       	add	r24, r18
    340a:	93 1f       	adc	r25, r19
    340c:	88 0f       	add	r24, r24
    340e:	99 1f       	adc	r25, r25
    3410:	88 0f       	add	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	fc 01       	movw	r30, r24
    3416:	e1 58       	subi	r30, 0x81	; 129
    3418:	fe 4f       	sbci	r31, 0xFE	; 254
    341a:	80 81       	ld	r24, Z
    341c:	82 95       	swap	r24
    341e:	86 95       	lsr	r24
    3420:	87 70       	andi	r24, 0x07	; 7
    3422:	81 70       	andi	r24, 0x01	; 1
    3424:	81 30       	cpi	r24, 0x01	; 1
    3426:	89 f5       	brne	.+98     	; 0x348a <LCD_enuHelp+0xee>
		{
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
    3428:	19 82       	std	Y+1, r1	; 0x01
    342a:	2b c0       	rjmp	.+86     	; 0x3482 <LCD_enuHelp+0xe6>
			  {
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );
    342c:	8b 81       	ldd	r24, Y+3	; 0x03
    342e:	28 2f       	mov	r18, r24
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	48 2f       	mov	r20, r24
    3436:	50 e0       	ldi	r21, 0x00	; 0
    3438:	c9 01       	movw	r24, r18
    343a:	88 0f       	add	r24, r24
    343c:	99 1f       	adc	r25, r25
    343e:	82 0f       	add	r24, r18
    3440:	93 1f       	adc	r25, r19
    3442:	88 0f       	add	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	84 0f       	add	r24, r20
    344c:	95 1f       	adc	r25, r21
    344e:	fc 01       	movw	r30, r24
    3450:	ed 57       	subi	r30, 0x7D	; 125
    3452:	fe 4f       	sbci	r31, 0xFE	; 254
    3454:	40 81       	ld	r20, Z
    3456:	8c 81       	ldd	r24, Y+4	; 0x04
    3458:	28 2f       	mov	r18, r24
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	89 81       	ldd	r24, Y+1	; 0x01
    345e:	88 2f       	mov	r24, r24
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	b9 01       	movw	r22, r18
    3464:	02 c0       	rjmp	.+4      	; 0x346a <LCD_enuHelp+0xce>
    3466:	75 95       	asr	r23
    3468:	67 95       	ror	r22
    346a:	8a 95       	dec	r24
    346c:	e2 f7       	brpl	.-8      	; 0x3466 <LCD_enuHelp+0xca>
    346e:	cb 01       	movw	r24, r22
    3470:	98 2f       	mov	r25, r24
    3472:	91 70       	andi	r25, 0x01	; 1
    3474:	84 2f       	mov	r24, r20
    3476:	69 2f       	mov	r22, r25
    3478:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch   ,DIO_u8HIGH);
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite     ,DIO_u8LOW);

		if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
		{
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	8f 5f       	subi	r24, 0xFF	; 255
    3480:	89 83       	std	Y+1, r24	; 0x01
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	88 30       	cpi	r24, 0x08	; 8
    3486:	90 f2       	brcs	.-92     	; 0x342c <LCD_enuHelp+0x90>
    3488:	4a c0       	rjmp	.+148    	; 0x351e <LCD_enuHelp+0x182>
			  {
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );
			  }
		}
		else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
    348a:	8b 81       	ldd	r24, Y+3	; 0x03
    348c:	28 2f       	mov	r18, r24
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	c9 01       	movw	r24, r18
    3492:	88 0f       	add	r24, r24
    3494:	99 1f       	adc	r25, r25
    3496:	82 0f       	add	r24, r18
    3498:	93 1f       	adc	r25, r19
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	88 0f       	add	r24, r24
    34a0:	99 1f       	adc	r25, r25
    34a2:	fc 01       	movw	r30, r24
    34a4:	e1 58       	subi	r30, 0x81	; 129
    34a6:	fe 4f       	sbci	r31, 0xFE	; 254
    34a8:	80 81       	ld	r24, Z
    34aa:	82 95       	swap	r24
    34ac:	86 95       	lsr	r24
    34ae:	87 70       	andi	r24, 0x07	; 7
    34b0:	81 70       	andi	r24, 0x01	; 1
    34b2:	88 23       	and	r24, r24
    34b4:	91 f5       	brne	.+100    	; 0x351a <LCD_enuHelp+0x17e>
		{
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
    34b6:	84 e0       	ldi	r24, 0x04	; 4
    34b8:	89 83       	std	Y+1, r24	; 0x01
    34ba:	2b c0       	rjmp	.+86     	; 0x3512 <LCD_enuHelp+0x176>
			{
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );
    34bc:	8b 81       	ldd	r24, Y+3	; 0x03
    34be:	28 2f       	mov	r18, r24
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	89 81       	ldd	r24, Y+1	; 0x01
    34c4:	48 2f       	mov	r20, r24
    34c6:	50 e0       	ldi	r21, 0x00	; 0
    34c8:	c9 01       	movw	r24, r18
    34ca:	88 0f       	add	r24, r24
    34cc:	99 1f       	adc	r25, r25
    34ce:	82 0f       	add	r24, r18
    34d0:	93 1f       	adc	r25, r19
    34d2:	88 0f       	add	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	88 0f       	add	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	84 0f       	add	r24, r20
    34dc:	95 1f       	adc	r25, r21
    34de:	fc 01       	movw	r30, r24
    34e0:	ed 57       	subi	r30, 0x7D	; 125
    34e2:	fe 4f       	sbci	r31, 0xFE	; 254
    34e4:	40 81       	ld	r20, Z
    34e6:	8c 81       	ldd	r24, Y+4	; 0x04
    34e8:	28 2f       	mov	r18, r24
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	88 2f       	mov	r24, r24
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	b9 01       	movw	r22, r18
    34f4:	02 c0       	rjmp	.+4      	; 0x34fa <LCD_enuHelp+0x15e>
    34f6:	75 95       	asr	r23
    34f8:	67 95       	ror	r22
    34fa:	8a 95       	dec	r24
    34fc:	e2 f7       	brpl	.-8      	; 0x34f6 <LCD_enuHelp+0x15a>
    34fe:	cb 01       	movw	r24, r22
    3500:	98 2f       	mov	r25, r24
    3502:	91 70       	andi	r25, 0x01	; 1
    3504:	84 2f       	mov	r24, r20
    3506:	69 2f       	mov	r22, r25
    3508:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );
			  }
		}
		else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
		{
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
    350c:	89 81       	ldd	r24, Y+1	; 0x01
    350e:	8f 5f       	subi	r24, 0xFF	; 255
    3510:	89 83       	std	Y+1, r24	; 0x01
    3512:	89 81       	ldd	r24, Y+1	; 0x01
    3514:	88 30       	cpi	r24, 0x08	; 8
    3516:	90 f2       	brcs	.-92     	; 0x34bc <LCD_enuHelp+0x120>
    3518:	02 c0       	rjmp	.+4      	; 0x351e <LCD_enuHelp+0x182>
			}

		}
		else
		{
			enuErrorStateLoc = E_NOK_CONFIG_PARM_ERROR ;
    351a:	84 e0       	ldi	r24, 0x04	; 4
    351c:	8a 83       	std	Y+2, r24	; 0x02
		}
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch     ,DIO_u8LOW);
    351e:	8b 81       	ldd	r24, Y+3	; 0x03
    3520:	28 2f       	mov	r18, r24
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	c9 01       	movw	r24, r18
    3526:	88 0f       	add	r24, r24
    3528:	99 1f       	adc	r25, r25
    352a:	82 0f       	add	r24, r18
    352c:	93 1f       	adc	r25, r19
    352e:	88 0f       	add	r24, r24
    3530:	99 1f       	adc	r25, r25
    3532:	88 0f       	add	r24, r24
    3534:	99 1f       	adc	r25, r25
    3536:	fc 01       	movw	r30, r24
    3538:	ee 57       	subi	r30, 0x7E	; 126
    353a:	fe 4f       	sbci	r31, 0xFE	; 254
    353c:	80 81       	ld	r24, Z
    353e:	60 e0       	ldi	r22, 0x00	; 0
    3540:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>

	return enuErrorStateLoc ;
    3544:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3546:	0f 90       	pop	r0
    3548:	0f 90       	pop	r0
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	cf 91       	pop	r28
    3550:	df 91       	pop	r29
    3552:	08 95       	ret

00003554 <LCD_enuCreateCustChar>:




tenuErrorStatus LCD_enuCreateCustChar (uint8 u8LcdNumCpy , uint8 *pu8PatternCpy , uint8 u8LocationCpy)
{
    3554:	df 93       	push	r29
    3556:	cf 93       	push	r28
    3558:	00 d0       	rcall	.+0      	; 0x355a <LCD_enuCreateCustChar+0x6>
    355a:	00 d0       	rcall	.+0      	; 0x355c <LCD_enuCreateCustChar+0x8>
    355c:	00 d0       	rcall	.+0      	; 0x355e <LCD_enuCreateCustChar+0xa>
    355e:	cd b7       	in	r28, 0x3d	; 61
    3560:	de b7       	in	r29, 0x3e	; 62
    3562:	8b 83       	std	Y+3, r24	; 0x03
    3564:	7d 83       	std	Y+5, r23	; 0x05
    3566:	6c 83       	std	Y+4, r22	; 0x04
    3568:	4e 83       	std	Y+6, r20	; 0x06
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    356a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc;
	if(u8LcdNumCpy < LCD_MAX_NUM && u8LocationCpy < 9)
    356c:	8b 81       	ldd	r24, Y+3	; 0x03
    356e:	83 30       	cpi	r24, 0x03	; 3
    3570:	40 f5       	brcc	.+80     	; 0x35c2 <LCD_enuCreateCustChar+0x6e>
    3572:	8e 81       	ldd	r24, Y+6	; 0x06
    3574:	89 30       	cpi	r24, 0x09	; 9
    3576:	28 f5       	brcc	.+74     	; 0x35c2 <LCD_enuCreateCustChar+0x6e>
	{
		LCD_enuWriteCmd(u8LcdNumCpy , 0x40+(u8LocationCpy * 8 ));
    3578:	8e 81       	ldd	r24, Y+6	; 0x06
    357a:	88 2f       	mov	r24, r24
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	08 96       	adiw	r24, 0x08	; 8
    3580:	88 0f       	add	r24, r24
    3582:	99 1f       	adc	r25, r25
    3584:	88 0f       	add	r24, r24
    3586:	99 1f       	adc	r25, r25
    3588:	88 0f       	add	r24, r24
    358a:	99 1f       	adc	r25, r25
    358c:	98 2f       	mov	r25, r24
    358e:	8b 81       	ldd	r24, Y+3	; 0x03
    3590:	69 2f       	mov	r22, r25
    3592:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>

		for (u8CntrLoc = 0 ;u8CntrLoc < 8 ; u8CntrLoc++ )
    3596:	19 82       	std	Y+1, r1	; 0x01
    3598:	10 c0       	rjmp	.+32     	; 0x35ba <LCD_enuCreateCustChar+0x66>
		{
			LCD_enuWriteChar(u8LcdNumCpy ,pu8PatternCpy[u8CntrLoc] );
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	28 2f       	mov	r18, r24
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	8c 81       	ldd	r24, Y+4	; 0x04
    35a2:	9d 81       	ldd	r25, Y+5	; 0x05
    35a4:	fc 01       	movw	r30, r24
    35a6:	e2 0f       	add	r30, r18
    35a8:	f3 1f       	adc	r31, r19
    35aa:	90 81       	ld	r25, Z
    35ac:	8b 81       	ldd	r24, Y+3	; 0x03
    35ae:	69 2f       	mov	r22, r25
    35b0:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_enuWriteChar>
	uint8 u8CntrLoc;
	if(u8LcdNumCpy < LCD_MAX_NUM && u8LocationCpy < 9)
	{
		LCD_enuWriteCmd(u8LcdNumCpy , 0x40+(u8LocationCpy * 8 ));

		for (u8CntrLoc = 0 ;u8CntrLoc < 8 ; u8CntrLoc++ )
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	8f 5f       	subi	r24, 0xFF	; 255
    35b8:	89 83       	std	Y+1, r24	; 0x01
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	88 30       	cpi	r24, 0x08	; 8
    35be:	68 f3       	brcs	.-38     	; 0x359a <LCD_enuCreateCustChar+0x46>
    35c0:	02 c0       	rjmp	.+4      	; 0x35c6 <LCD_enuCreateCustChar+0x72>
		}

	}
	else
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    35c2:	82 e0       	ldi	r24, 0x02	; 2
    35c4:	8a 83       	std	Y+2, r24	; 0x02
	}

	return enuErrorStateLoc ;
    35c6:	8a 81       	ldd	r24, Y+2	; 0x02

}
    35c8:	26 96       	adiw	r28, 0x06	; 6
    35ca:	0f b6       	in	r0, 0x3f	; 63
    35cc:	f8 94       	cli
    35ce:	de bf       	out	0x3e, r29	; 62
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	cd bf       	out	0x3d, r28	; 61
    35d4:	cf 91       	pop	r28
    35d6:	df 91       	pop	r29
    35d8:	08 95       	ret

000035da <LED_enuWriteValue>:
#include "LED_cfg.h"
#include "LED_priv.h"


tenuErrorStatus LED_enuWriteValue (uint8 u8LedNumCpy , uint8 u8LedValueCpy  )
{
    35da:	df 93       	push	r29
    35dc:	cf 93       	push	r28
    35de:	00 d0       	rcall	.+0      	; 0x35e0 <LED_enuWriteValue+0x6>
    35e0:	00 d0       	rcall	.+0      	; 0x35e2 <LED_enuWriteValue+0x8>
    35e2:	0f 92       	push	r0
    35e4:	cd b7       	in	r28, 0x3d	; 61
    35e6:	de b7       	in	r29, 0x3e	; 62
    35e8:	8a 83       	std	Y+2, r24	; 0x02
    35ea:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStatLoc = E_OK ; 
    35ec:	19 82       	std	Y+1, r1	; 0x01
	if (u8LedNumCpy < LED_MAX_NUM )
    35ee:	8a 81       	ldd	r24, Y+2	; 0x02
    35f0:	83 30       	cpi	r24, 0x03	; 3
    35f2:	08 f0       	brcs	.+2      	; 0x35f6 <LED_enuWriteValue+0x1c>
    35f4:	7c c0       	rjmp	.+248    	; 0x36ee <LED_enuWriteValue+0x114>
	{
		switch(u8LedValueCpy)
    35f6:	8b 81       	ldd	r24, Y+3	; 0x03
    35f8:	28 2f       	mov	r18, r24
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	3d 83       	std	Y+5, r19	; 0x05
    35fe:	2c 83       	std	Y+4, r18	; 0x04
    3600:	8c 81       	ldd	r24, Y+4	; 0x04
    3602:	9d 81       	ldd	r25, Y+5	; 0x05
    3604:	00 97       	sbiw	r24, 0x00	; 0
    3606:	d9 f1       	breq	.+118    	; 0x367e <LED_enuWriteValue+0xa4>
    3608:	2c 81       	ldd	r18, Y+4	; 0x04
    360a:	3d 81       	ldd	r19, Y+5	; 0x05
    360c:	21 30       	cpi	r18, 0x01	; 1
    360e:	31 05       	cpc	r19, r1
    3610:	09 f0       	breq	.+2      	; 0x3614 <LED_enuWriteValue+0x3a>
    3612:	6a c0       	rjmp	.+212    	; 0x36e8 <LED_enuWriteValue+0x10e>
		{
			case LED_u8ON :
				if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8NORMAL)
    3614:	8a 81       	ldd	r24, Y+2	; 0x02
    3616:	88 2f       	mov	r24, r24
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	88 0f       	add	r24, r24
    361c:	99 1f       	adc	r25, r25
    361e:	fc 01       	movw	r30, r24
    3620:	ec 55       	subi	r30, 0x5C	; 92
    3622:	fe 4f       	sbci	r31, 0xFE	; 254
    3624:	80 81       	ld	r24, Z
    3626:	8a 3a       	cpi	r24, 0xAA	; 170
    3628:	71 f4       	brne	.+28     	; 0x3646 <LED_enuWriteValue+0x6c>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8HIGH ) ;
    362a:	8a 81       	ldd	r24, Y+2	; 0x02
    362c:	88 2f       	mov	r24, r24
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	88 0f       	add	r24, r24
    3632:	99 1f       	adc	r25, r25
    3634:	fc 01       	movw	r30, r24
    3636:	ed 55       	subi	r30, 0x5D	; 93
    3638:	fe 4f       	sbci	r31, 0xFE	; 254
    363a:	80 81       	ld	r24, Z
    363c:	61 e0       	ldi	r22, 0x01	; 1
    363e:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>
    3642:	89 83       	std	Y+1, r24	; 0x01
    3644:	56 c0       	rjmp	.+172    	; 0x36f2 <LED_enuWriteValue+0x118>
				}
				else if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8REVERSE)
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	88 2f       	mov	r24, r24
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	88 0f       	add	r24, r24
    364e:	99 1f       	adc	r25, r25
    3650:	fc 01       	movw	r30, r24
    3652:	ec 55       	subi	r30, 0x5C	; 92
    3654:	fe 4f       	sbci	r31, 0xFE	; 254
    3656:	80 81       	ld	r24, Z
    3658:	85 35       	cpi	r24, 0x55	; 85
    365a:	71 f4       	brne	.+28     	; 0x3678 <LED_enuWriteValue+0x9e>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8LOW ) ;			
    365c:	8a 81       	ldd	r24, Y+2	; 0x02
    365e:	88 2f       	mov	r24, r24
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	88 0f       	add	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	fc 01       	movw	r30, r24
    3668:	ed 55       	subi	r30, 0x5D	; 93
    366a:	fe 4f       	sbci	r31, 0xFE	; 254
    366c:	80 81       	ld	r24, Z
    366e:	60 e0       	ldi	r22, 0x00	; 0
    3670:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>
    3674:	89 83       	std	Y+1, r24	; 0x01
    3676:	3d c0       	rjmp	.+122    	; 0x36f2 <LED_enuWriteValue+0x118>
				}
				else
				{
					enuReturnStatLoc = E_NOK_CONFIG_PARM_ERROR ;
    3678:	84 e0       	ldi	r24, 0x04	; 4
    367a:	89 83       	std	Y+1, r24	; 0x01
    367c:	3a c0       	rjmp	.+116    	; 0x36f2 <LED_enuWriteValue+0x118>
				}
			break ;
			case LED_u8OFF:
			   if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8NORMAL)
    367e:	8a 81       	ldd	r24, Y+2	; 0x02
    3680:	88 2f       	mov	r24, r24
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	88 0f       	add	r24, r24
    3686:	99 1f       	adc	r25, r25
    3688:	fc 01       	movw	r30, r24
    368a:	ec 55       	subi	r30, 0x5C	; 92
    368c:	fe 4f       	sbci	r31, 0xFE	; 254
    368e:	80 81       	ld	r24, Z
    3690:	8a 3a       	cpi	r24, 0xAA	; 170
    3692:	71 f4       	brne	.+28     	; 0x36b0 <LED_enuWriteValue+0xd6>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8LOW ) ;
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
    3696:	88 2f       	mov	r24, r24
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	88 0f       	add	r24, r24
    369c:	99 1f       	adc	r25, r25
    369e:	fc 01       	movw	r30, r24
    36a0:	ed 55       	subi	r30, 0x5D	; 93
    36a2:	fe 4f       	sbci	r31, 0xFE	; 254
    36a4:	80 81       	ld	r24, Z
    36a6:	60 e0       	ldi	r22, 0x00	; 0
    36a8:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>
    36ac:	89 83       	std	Y+1, r24	; 0x01
    36ae:	21 c0       	rjmp	.+66     	; 0x36f2 <LED_enuWriteValue+0x118>
				}
				else if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8REVERSE)
    36b0:	8a 81       	ldd	r24, Y+2	; 0x02
    36b2:	88 2f       	mov	r24, r24
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	88 0f       	add	r24, r24
    36b8:	99 1f       	adc	r25, r25
    36ba:	fc 01       	movw	r30, r24
    36bc:	ec 55       	subi	r30, 0x5C	; 92
    36be:	fe 4f       	sbci	r31, 0xFE	; 254
    36c0:	80 81       	ld	r24, Z
    36c2:	85 35       	cpi	r24, 0x55	; 85
    36c4:	71 f4       	brne	.+28     	; 0x36e2 <LED_enuWriteValue+0x108>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8HIGH ) ;			
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
    36c8:	88 2f       	mov	r24, r24
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	88 0f       	add	r24, r24
    36ce:	99 1f       	adc	r25, r25
    36d0:	fc 01       	movw	r30, r24
    36d2:	ed 55       	subi	r30, 0x5D	; 93
    36d4:	fe 4f       	sbci	r31, 0xFE	; 254
    36d6:	80 81       	ld	r24, Z
    36d8:	61 e0       	ldi	r22, 0x01	; 1
    36da:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>
    36de:	89 83       	std	Y+1, r24	; 0x01
    36e0:	08 c0       	rjmp	.+16     	; 0x36f2 <LED_enuWriteValue+0x118>
				}
				else
				{
					enuReturnStatLoc = E_NOK_CONFIG_PARM_ERROR ;
    36e2:	84 e0       	ldi	r24, 0x04	; 4
    36e4:	89 83       	std	Y+1, r24	; 0x01
    36e6:	05 c0       	rjmp	.+10     	; 0x36f2 <LED_enuWriteValue+0x118>
				}					
			break ;
			default :
				enuReturnStatLoc =E_NOK_PARAM_OUT_OF_RANGE ;
    36e8:	82 e0       	ldi	r24, 0x02	; 2
    36ea:	89 83       	std	Y+1, r24	; 0x01
    36ec:	02 c0       	rjmp	.+4      	; 0x36f2 <LED_enuWriteValue+0x118>
            break ;				
		}
	}
	else
	{
		enuReturnStatLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    36ee:	82 e0       	ldi	r24, 0x02	; 2
    36f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuReturnStatLoc ;
    36f2:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	0f 90       	pop	r0
    36fe:	cf 91       	pop	r28
    3700:	df 91       	pop	r29
    3702:	08 95       	ret

00003704 <LED_enuToggle>:

tenuErrorStatus LED_enuToggle (uint8 u8LedNumCpy )
{
    3704:	df 93       	push	r29
    3706:	cf 93       	push	r28
    3708:	00 d0       	rcall	.+0      	; 0x370a <LED_enuToggle+0x6>
    370a:	cd b7       	in	r28, 0x3d	; 61
    370c:	de b7       	in	r29, 0x3e	; 62
    370e:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus enuReturnStatLoc = E_OK ; 
    3710:	19 82       	std	Y+1, r1	; 0x01
	if (u8LedNumCpy < LED_MAX_NUM )
    3712:	8a 81       	ldd	r24, Y+2	; 0x02
    3714:	83 30       	cpi	r24, 0x03	; 3
    3716:	68 f4       	brcc	.+26     	; 0x3732 <LED_enuToggle+0x2e>
	{
		enuReturnStatLoc = DIO_enuTogglePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap);
    3718:	8a 81       	ldd	r24, Y+2	; 0x02
    371a:	88 2f       	mov	r24, r24
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	88 0f       	add	r24, r24
    3720:	99 1f       	adc	r25, r25
    3722:	fc 01       	movw	r30, r24
    3724:	ed 55       	subi	r30, 0x5D	; 93
    3726:	fe 4f       	sbci	r31, 0xFE	; 254
    3728:	80 81       	ld	r24, Z
    372a:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuTogglePin>
    372e:	89 83       	std	Y+1, r24	; 0x01
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <LED_enuToggle+0x32>
	}
	else
	{
		enuReturnStatLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    3732:	82 e0       	ldi	r24, 0x02	; 2
    3734:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuReturnStatLoc ;
    3736:	89 81       	ldd	r24, Y+1	; 0x01
}
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	cf 91       	pop	r28
    373e:	df 91       	pop	r29
    3740:	08 95       	ret

00003742 <tenu_Relay_enu_on>:
#include "Relay.h"
#include "Relay_cfg.h"
#include "Relay_priv.h"


tenuErrorStatus tenu_Relay_enu_on (uint8 u8RelayNumCpy ){
    3742:	df 93       	push	r29
    3744:	cf 93       	push	r28
    3746:	00 d0       	rcall	.+0      	; 0x3748 <tenu_Relay_enu_on+0x6>
    3748:	0f 92       	push	r0
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus error = E_OK;
    3750:	19 82       	std	Y+1, r1	; 0x01
		if(u8RelayNumCpy<RELAY_MAX_NUM){
    3752:	8a 81       	ldd	r24, Y+2	; 0x02
    3754:	88 23       	and	r24, r24
    3756:	59 f4       	brne	.+22     	; 0x376e <tenu_Relay_enu_on+0x2c>
			DIO_enuWritePin(u8RelayPinMapping[u8RelayNumCpy] , DIO_u8HIGH);
    3758:	8a 81       	ldd	r24, Y+2	; 0x02
    375a:	88 2f       	mov	r24, r24
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	fc 01       	movw	r30, r24
    3760:	e7 55       	subi	r30, 0x57	; 87
    3762:	fe 4f       	sbci	r31, 0xFE	; 254
    3764:	80 81       	ld	r24, Z
    3766:	61 e0       	ldi	r22, 0x01	; 1
    3768:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>
    376c:	02 c0       	rjmp	.+4      	; 0x3772 <tenu_Relay_enu_on+0x30>
		}
		else{
			error=E_NOK_PARAM_OUT_OF_RANGE;
    376e:	82 e0       	ldi	r24, 0x02	; 2
    3770:	89 83       	std	Y+1, r24	; 0x01
		}		
		
}
    3772:	0f 90       	pop	r0
    3774:	0f 90       	pop	r0
    3776:	0f 90       	pop	r0
    3778:	cf 91       	pop	r28
    377a:	df 91       	pop	r29
    377c:	08 95       	ret

0000377e <tenu_Relay_enu_off>:
tenuErrorStatus tenu_Relay_enu_off (uint8 u8RelayNumCpy ){
    377e:	df 93       	push	r29
    3780:	cf 93       	push	r28
    3782:	00 d0       	rcall	.+0      	; 0x3784 <tenu_Relay_enu_off+0x6>
    3784:	0f 92       	push	r0
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
    378a:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus error = E_OK;
    378c:	19 82       	std	Y+1, r1	; 0x01
		if(u8RelayNumCpy<RELAY_MAX_NUM){
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	88 23       	and	r24, r24
    3792:	59 f4       	brne	.+22     	; 0x37aa <tenu_Relay_enu_off+0x2c>
			DIO_enuWritePin(u8RelayPinMapping[u8RelayNumCpy] , DIO_u8LOW);
    3794:	8a 81       	ldd	r24, Y+2	; 0x02
    3796:	88 2f       	mov	r24, r24
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	fc 01       	movw	r30, r24
    379c:	e7 55       	subi	r30, 0x57	; 87
    379e:	fe 4f       	sbci	r31, 0xFE	; 254
    37a0:	80 81       	ld	r24, Z
    37a2:	60 e0       	ldi	r22, 0x00	; 0
    37a4:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_enuWritePin>
    37a8:	02 c0       	rjmp	.+4      	; 0x37ae <tenu_Relay_enu_off+0x30>
		}
		else{
			error=E_NOK_PARAM_OUT_OF_RANGE;
    37aa:	82 e0       	ldi	r24, 0x02	; 2
    37ac:	89 83       	std	Y+1, r24	; 0x01
		}		
		
}
    37ae:	0f 90       	pop	r0
    37b0:	0f 90       	pop	r0
    37b2:	0f 90       	pop	r0
    37b4:	cf 91       	pop	r28
    37b6:	df 91       	pop	r29
    37b8:	08 95       	ret

000037ba <SPI_voidInit>:


uint8 SPI_u8RxBuffer ; 
uint8 SPI_u8TxState  ;
void SPI_voidInit(void)
{
    37ba:	df 93       	push	r29
    37bc:	cf 93       	push	r28
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
	SPCR = (1<<6);
    37c2:	ed e2       	ldi	r30, 0x2D	; 45
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	80 e4       	ldi	r24, 0x40	; 64
    37c8:	80 83       	st	Z, r24
	
	
}
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	08 95       	ret

000037d0 <SPI_u8DataTransfer_Sync>:
//	while (GET_BIT(SPSR , 7) == 0);
	/* write collision check*/
/*return SPDR ;*/
/*}*/
void SPI_u8DataTransfer_Sync(uint8 u8DataCpy)
{
    37d0:	df 93       	push	r29
    37d2:	cf 93       	push	r28
    37d4:	0f 92       	push	r0
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	89 83       	std	Y+1, r24	; 0x01
	SPDR  =  u8DataCpy ;
    37dc:	ef e2       	ldi	r30, 0x2F	; 47
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	80 83       	st	Z, r24

	while(!(SPSR & (1<<7)));
    37e4:	ee e2       	ldi	r30, 0x2E	; 46
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	80 81       	ld	r24, Z
    37ea:	88 23       	and	r24, r24
    37ec:	dc f7       	brge	.-10     	; 0x37e4 <SPI_u8DataTransfer_Sync+0x14>
	//DIO_enuWritePin(DIO_u8PIN_0,DIO_u8HIGH);

}
    37ee:	0f 90       	pop	r0
    37f0:	cf 91       	pop	r28
    37f2:	df 91       	pop	r29
    37f4:	08 95       	ret

000037f6 <SPI_u8DataRecieve_Sync>:
uint8 SPI_u8DataRecieve_Sync(void)
{
    37f6:	df 93       	push	r29
    37f8:	cf 93       	push	r28
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(SPSR , 7) == 0);
    37fe:	ee e2       	ldi	r30, 0x2E	; 46
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	88 23       	and	r24, r24
    3806:	dc f7       	brge	.-10     	; 0x37fe <SPI_u8DataRecieve_Sync+0x8>
	/* write collision check*/
	return SPDR ;
    3808:	ef e2       	ldi	r30, 0x2F	; 47
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	80 81       	ld	r24, Z
}
    380e:	cf 91       	pop	r28
    3810:	df 91       	pop	r29
    3812:	08 95       	ret

00003814 <SPI_voidWriteData_Async>:

void SPI_voidWriteData_Async(uint8 u8DataCpy)
{
    3814:	df 93       	push	r29
    3816:	cf 93       	push	r28
    3818:	0f 92       	push	r0
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
    381e:	89 83       	std	Y+1, r24	; 0x01
		SPDR =  u8DataCpy ;
    3820:	ef e2       	ldi	r30, 0x2F	; 47
    3822:	f0 e0       	ldi	r31, 0x00	; 0
    3824:	89 81       	ldd	r24, Y+1	; 0x01
    3826:	80 83       	st	Z, r24
		SPI_u8TxState = 2;
    3828:	82 e0       	ldi	r24, 0x02	; 2
    382a:	80 93 b1 01 	sts	0x01B1, r24
}
    382e:	0f 90       	pop	r0
    3830:	cf 91       	pop	r28
    3832:	df 91       	pop	r29
    3834:	08 95       	ret

00003836 <SPI_u8ReadData_Async>:
//
//	return enuReturnStateLoc ;
//}

uint8 SPI_u8ReadData_Async(void)
{
    3836:	df 93       	push	r29
    3838:	cf 93       	push	r28
    383a:	cd b7       	in	r28, 0x3d	; 61
    383c:	de b7       	in	r29, 0x3e	; 62
	return SPI_u8RxBuffer ;
    383e:	80 91 b0 01 	lds	r24, 0x01B0
}
    3842:	cf 91       	pop	r28
    3844:	df 91       	pop	r29
    3846:	08 95       	ret

00003848 <SPI_voidSetInterruptState>:

void SPI_voidSetInterruptState(uint8 u8IntStateCpy)
{
    3848:	df 93       	push	r29
    384a:	cf 93       	push	r28
    384c:	0f 92       	push	r0
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
    3852:	89 83       	std	Y+1, r24	; 0x01
		if (u8IntStateCpy == SPI_INT_ENABLE )
    3854:	89 81       	ldd	r24, Y+1	; 0x01
    3856:	81 30       	cpi	r24, 0x01	; 1
    3858:	41 f4       	brne	.+16     	; 0x386a <SPI_voidSetInterruptState+0x22>
		{
			 SET_BIT (SPCR , 7 ) ;
    385a:	ad e2       	ldi	r26, 0x2D	; 45
    385c:	b0 e0       	ldi	r27, 0x00	; 0
    385e:	ed e2       	ldi	r30, 0x2D	; 45
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	80 81       	ld	r24, Z
    3864:	80 68       	ori	r24, 0x80	; 128
    3866:	8c 93       	st	X, r24
    3868:	07 c0       	rjmp	.+14     	; 0x3878 <SPI_voidSetInterruptState+0x30>
		}
		else 
		{
			 CLR_BIT (SPCR , 7 ) ;
    386a:	ad e2       	ldi	r26, 0x2D	; 45
    386c:	b0 e0       	ldi	r27, 0x00	; 0
    386e:	ed e2       	ldi	r30, 0x2D	; 45
    3870:	f0 e0       	ldi	r31, 0x00	; 0
    3872:	80 81       	ld	r24, Z
    3874:	8f 77       	andi	r24, 0x7F	; 127
    3876:	8c 93       	st	X, r24
		}
}
    3878:	0f 90       	pop	r0
    387a:	cf 91       	pop	r28
    387c:	df 91       	pop	r29
    387e:	08 95       	ret

00003880 <__vector_12>:

void __vector_12 (void) __attribute__ ((signal , used)) ;
void __vector_12 (void)
{   
    3880:	1f 92       	push	r1
    3882:	0f 92       	push	r0
    3884:	0f b6       	in	r0, 0x3f	; 63
    3886:	0f 92       	push	r0
    3888:	11 24       	eor	r1, r1
    388a:	8f 93       	push	r24
    388c:	9f 93       	push	r25
    388e:	ef 93       	push	r30
    3890:	ff 93       	push	r31
    3892:	df 93       	push	r29
    3894:	cf 93       	push	r28
    3896:	cd b7       	in	r28, 0x3d	; 61
    3898:	de b7       	in	r29, 0x3e	; 62
	if ( GET_BIT(SPSR , 6))
    389a:	ee e2       	ldi	r30, 0x2E	; 46
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	80 81       	ld	r24, Z
    38a0:	82 95       	swap	r24
    38a2:	86 95       	lsr	r24
    38a4:	86 95       	lsr	r24
    38a6:	83 70       	andi	r24, 0x03	; 3
    38a8:	88 2f       	mov	r24, r24
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	81 70       	andi	r24, 0x01	; 1
    38ae:	90 70       	andi	r25, 0x00	; 0
    38b0:	88 23       	and	r24, r24
    38b2:	21 f0       	breq	.+8      	; 0x38bc <__vector_12+0x3c>
	{
		SPI_u8TxState  = 3 ;
    38b4:	83 e0       	ldi	r24, 0x03	; 3
    38b6:	80 93 b1 01 	sts	0x01B1, r24
    38ba:	03 c0       	rjmp	.+6      	; 0x38c2 <__vector_12+0x42>
	}
	else 
	{
		SPI_u8TxState  = 1 ;
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	80 93 b1 01 	sts	0x01B1, r24
	}
	SPI_u8RxBuffer = SPDR ;
    38c2:	ef e2       	ldi	r30, 0x2F	; 47
    38c4:	f0 e0       	ldi	r31, 0x00	; 0
    38c6:	80 81       	ld	r24, Z
    38c8:	80 93 b0 01 	sts	0x01B0, r24
}
    38cc:	cf 91       	pop	r28
    38ce:	df 91       	pop	r29
    38d0:	ff 91       	pop	r31
    38d2:	ef 91       	pop	r30
    38d4:	9f 91       	pop	r25
    38d6:	8f 91       	pop	r24
    38d8:	0f 90       	pop	r0
    38da:	0f be       	out	0x3f, r0	; 63
    38dc:	0f 90       	pop	r0
    38de:	1f 90       	pop	r1
    38e0:	18 95       	reti

000038e2 <TIM1_voidInit>:
pf TIM1_pfCtcBCallback;
pf TIM1_pfOvfCallback;
pf TIM1_pfICUCallBack;

void TIM1_voidInit(void)
{
    38e2:	df 93       	push	r29
    38e4:	cf 93       	push	r28
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A, WGM11);
	SET_BIT(TCCR1B, WGM12);
	SET_BIT(TCCR1B, WGM13);

#elif TIM1_MODE == TIM1_FPWM_ICR_MODE
	CLR_BIT(TCCR1A, WGM10);
    38ea:	af e4       	ldi	r26, 0x4F	; 79
    38ec:	b0 e0       	ldi	r27, 0x00	; 0
    38ee:	ef e4       	ldi	r30, 0x4F	; 79
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	80 81       	ld	r24, Z
    38f4:	8e 7f       	andi	r24, 0xFE	; 254
    38f6:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    38f8:	af e4       	ldi	r26, 0x4F	; 79
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	ef e4       	ldi	r30, 0x4F	; 79
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	80 81       	ld	r24, Z
    3902:	82 60       	ori	r24, 0x02	; 2
    3904:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    3906:	ae e4       	ldi	r26, 0x4E	; 78
    3908:	b0 e0       	ldi	r27, 0x00	; 0
    390a:	ee e4       	ldi	r30, 0x4E	; 78
    390c:	f0 e0       	ldi	r31, 0x00	; 0
    390e:	80 81       	ld	r24, Z
    3910:	88 60       	ori	r24, 0x08	; 8
    3912:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    3914:	ae e4       	ldi	r26, 0x4E	; 78
    3916:	b0 e0       	ldi	r27, 0x00	; 0
    3918:	ee e4       	ldi	r30, 0x4E	; 78
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	80 81       	ld	r24, Z
    391e:	80 61       	ori	r24, 0x10	; 16
    3920:	8c 93       	st	X, r24
	ICR1 = 2499; // setting top to be 2499
    3922:	e6 e4       	ldi	r30, 0x46	; 70
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	83 ec       	ldi	r24, 0xC3	; 195
    3928:	99 e0       	ldi	r25, 0x09	; 9
    392a:	91 83       	std	Z+1, r25	; 0x01
    392c:	80 83       	st	Z, r24
	// non inverting mode :
	SET_BIT(TCCR1A, COM1A1); // for OC1A
    392e:	af e4       	ldi	r26, 0x4F	; 79
    3930:	b0 e0       	ldi	r27, 0x00	; 0
    3932:	ef e4       	ldi	r30, 0x4F	; 79
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	80 81       	ld	r24, Z
    3938:	80 68       	ori	r24, 0x80	; 128
    393a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1B1); // for OC2A
    393c:	af e4       	ldi	r26, 0x4F	; 79
    393e:	b0 e0       	ldi	r27, 0x00	; 0
    3940:	ef e4       	ldi	r30, 0x4F	; 79
    3942:	f0 e0       	ldi	r31, 0x00	; 0
    3944:	80 81       	ld	r24, Z
    3946:	80 62       	ori	r24, 0x20	; 32
    3948:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
	SET_BIT(TCCR1B, WGM12);
	SET_BIT(TCCR1B, WGM13);
#endif

	TCCR1B &= (0xF8);					  /* clear reg 0b1111 1000 */
    394a:	ae e4       	ldi	r26, 0x4E	; 78
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	ee e4       	ldi	r30, 0x4E	; 78
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	80 81       	ld	r24, Z
    3954:	88 7f       	andi	r24, 0xF8	; 248
    3956:	8c 93       	st	X, r24
	TCCR1B |= ((0x07) & TIM1_PRESCALLER); /* write in reg to set prescaler*/
    3958:	ae e4       	ldi	r26, 0x4E	; 78
    395a:	b0 e0       	ldi	r27, 0x00	; 0
    395c:	ee e4       	ldi	r30, 0x4E	; 78
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	80 81       	ld	r24, Z
    3962:	83 60       	ori	r24, 0x03	; 3
    3964:	8c 93       	st	X, r24

	TCNT1 = 0;
    3966:	ec e4       	ldi	r30, 0x4C	; 76
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	11 82       	std	Z+1, r1	; 0x01
    396c:	10 82       	st	Z, r1
	OCR1A = 0;
    396e:	ea e4       	ldi	r30, 0x4A	; 74
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	11 82       	std	Z+1, r1	; 0x01
    3974:	10 82       	st	Z, r1
	OCR1B = 0;
    3976:	e8 e4       	ldi	r30, 0x48	; 72
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	11 82       	std	Z+1, r1	; 0x01
    397c:	10 82       	st	Z, r1
	/*Disable input capture interrupt*/
	CLR_BIT(TIMSK, TICIE1);
    397e:	a9 e5       	ldi	r26, 0x59	; 89
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	e9 e5       	ldi	r30, 0x59	; 89
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	80 81       	ld	r24, Z
    3988:	8f 7d       	andi	r24, 0xDF	; 223
    398a:	8c 93       	st	X, r24

	/*disable output compare match interrupt*/
	CLR_BIT(TIMSK, OCIE1A);
    398c:	a9 e5       	ldi	r26, 0x59	; 89
    398e:	b0 e0       	ldi	r27, 0x00	; 0
    3990:	e9 e5       	ldi	r30, 0x59	; 89
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	8f 7e       	andi	r24, 0xEF	; 239
    3998:	8c 93       	st	X, r24
	CLR_BIT(TIMSK, OCIE1B);
    399a:	a9 e5       	ldi	r26, 0x59	; 89
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	e9 e5       	ldi	r30, 0x59	; 89
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	80 81       	ld	r24, Z
    39a4:	87 7f       	andi	r24, 0xF7	; 247
    39a6:	8c 93       	st	X, r24

	/*disable ovf interupt*/
	CLR_BIT(TIMSK, TOIE1);
    39a8:	a9 e5       	ldi	r26, 0x59	; 89
    39aa:	b0 e0       	ldi	r27, 0x00	; 0
    39ac:	e9 e5       	ldi	r30, 0x59	; 89
    39ae:	f0 e0       	ldi	r31, 0x00	; 0
    39b0:	80 81       	ld	r24, Z
    39b2:	8b 7f       	andi	r24, 0xFB	; 251
    39b4:	8c 93       	st	X, r24

	//	set Compare output mode
}
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	08 95       	ret

000039bc <TIM1_voidSetPreloadValue>:
void TIM1_voidSetPreloadValue(uint16 u8PreloadValueCpy)
{
    39bc:	df 93       	push	r29
    39be:	cf 93       	push	r28
    39c0:	00 d0       	rcall	.+0      	; 0x39c2 <TIM1_voidSetPreloadValue+0x6>
    39c2:	cd b7       	in	r28, 0x3d	; 61
    39c4:	de b7       	in	r29, 0x3e	; 62
    39c6:	9a 83       	std	Y+2, r25	; 0x02
    39c8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = u8PreloadValueCpy;
    39ca:	ec e4       	ldi	r30, 0x4C	; 76
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	9a 81       	ldd	r25, Y+2	; 0x02
    39d2:	91 83       	std	Z+1, r25	; 0x01
    39d4:	80 83       	st	Z, r24
}
    39d6:	0f 90       	pop	r0
    39d8:	0f 90       	pop	r0
    39da:	cf 91       	pop	r28
    39dc:	df 91       	pop	r29
    39de:	08 95       	ret

000039e0 <TIM1_voidSetOutputCompareAValue>:
void TIM1_voidSetOutputCompareAValue(uint16 u8LoadValueCpy)
{
    39e0:	df 93       	push	r29
    39e2:	cf 93       	push	r28
    39e4:	00 d0       	rcall	.+0      	; 0x39e6 <TIM1_voidSetOutputCompareAValue+0x6>
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
    39ea:	9a 83       	std	Y+2, r25	; 0x02
    39ec:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = u8LoadValueCpy;
    39ee:	ea e4       	ldi	r30, 0x4A	; 74
    39f0:	f0 e0       	ldi	r31, 0x00	; 0
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	9a 81       	ldd	r25, Y+2	; 0x02
    39f6:	91 83       	std	Z+1, r25	; 0x01
    39f8:	80 83       	st	Z, r24
}
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	cf 91       	pop	r28
    3a00:	df 91       	pop	r29
    3a02:	08 95       	ret

00003a04 <TIM1_voidSetOutputCompareBValue>:

void TIM1_voidSetOutputCompareBValue(uint16 u8LoadValueCpy)
{
    3a04:	df 93       	push	r29
    3a06:	cf 93       	push	r28
    3a08:	00 d0       	rcall	.+0      	; 0x3a0a <TIM1_voidSetOutputCompareBValue+0x6>
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
    3a0e:	9a 83       	std	Y+2, r25	; 0x02
    3a10:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = u8LoadValueCpy;
    3a12:	e8 e4       	ldi	r30, 0x48	; 72
    3a14:	f0 e0       	ldi	r31, 0x00	; 0
    3a16:	89 81       	ldd	r24, Y+1	; 0x01
    3a18:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1a:	91 83       	std	Z+1, r25	; 0x01
    3a1c:	80 83       	st	Z, r24
}
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <TIM1_voidEnableOVFIntterrupt>:

void TIM1_voidEnableOVFIntterrupt(void)
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TOIE1);
    3a30:	a9 e5       	ldi	r26, 0x59	; 89
    3a32:	b0 e0       	ldi	r27, 0x00	; 0
    3a34:	e9 e5       	ldi	r30, 0x59	; 89
    3a36:	f0 e0       	ldi	r31, 0x00	; 0
    3a38:	80 81       	ld	r24, Z
    3a3a:	84 60       	ori	r24, 0x04	; 4
    3a3c:	8c 93       	st	X, r24
}
    3a3e:	cf 91       	pop	r28
    3a40:	df 91       	pop	r29
    3a42:	08 95       	ret

00003a44 <TIM1_voidDisableOVFIntterrupt>:

void TIM1_voidDisableOVFIntterrupt(void)
{
    3a44:	df 93       	push	r29
    3a46:	cf 93       	push	r28
    3a48:	cd b7       	in	r28, 0x3d	; 61
    3a4a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TOIE1);
    3a4c:	a9 e5       	ldi	r26, 0x59	; 89
    3a4e:	b0 e0       	ldi	r27, 0x00	; 0
    3a50:	e9 e5       	ldi	r30, 0x59	; 89
    3a52:	f0 e0       	ldi	r31, 0x00	; 0
    3a54:	80 81       	ld	r24, Z
    3a56:	8b 7f       	andi	r24, 0xFB	; 251
    3a58:	8c 93       	st	X, r24
}
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	08 95       	ret

00003a60 <TIM1_voidEnableCTCAIntterrupt>:
void TIM1_voidEnableCTCAIntterrupt(void)
{
    3a60:	df 93       	push	r29
    3a62:	cf 93       	push	r28
    3a64:	cd b7       	in	r28, 0x3d	; 61
    3a66:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1A);
    3a68:	a9 e5       	ldi	r26, 0x59	; 89
    3a6a:	b0 e0       	ldi	r27, 0x00	; 0
    3a6c:	e9 e5       	ldi	r30, 0x59	; 89
    3a6e:	f0 e0       	ldi	r31, 0x00	; 0
    3a70:	80 81       	ld	r24, Z
    3a72:	80 61       	ori	r24, 0x10	; 16
    3a74:	8c 93       	st	X, r24
}
    3a76:	cf 91       	pop	r28
    3a78:	df 91       	pop	r29
    3a7a:	08 95       	ret

00003a7c <TIM1_voidDisableCTCAIntterrupt>:
void TIM1_voidDisableCTCAIntterrupt(void)
{
    3a7c:	df 93       	push	r29
    3a7e:	cf 93       	push	r28
    3a80:	cd b7       	in	r28, 0x3d	; 61
    3a82:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK, OCIE1A);
    3a84:	a9 e5       	ldi	r26, 0x59	; 89
    3a86:	b0 e0       	ldi	r27, 0x00	; 0
    3a88:	e9 e5       	ldi	r30, 0x59	; 89
    3a8a:	f0 e0       	ldi	r31, 0x00	; 0
    3a8c:	80 81       	ld	r24, Z
    3a8e:	8f 7e       	andi	r24, 0xEF	; 239
    3a90:	8c 93       	st	X, r24
}
    3a92:	cf 91       	pop	r28
    3a94:	df 91       	pop	r29
    3a96:	08 95       	ret

00003a98 <TIM1_voidEnableCTCBIntterrupt>:
void TIM1_voidEnableCTCBIntterrupt(void)
{
    3a98:	df 93       	push	r29
    3a9a:	cf 93       	push	r28
    3a9c:	cd b7       	in	r28, 0x3d	; 61
    3a9e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1B);
    3aa0:	a9 e5       	ldi	r26, 0x59	; 89
    3aa2:	b0 e0       	ldi	r27, 0x00	; 0
    3aa4:	e9 e5       	ldi	r30, 0x59	; 89
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	80 81       	ld	r24, Z
    3aaa:	88 60       	ori	r24, 0x08	; 8
    3aac:	8c 93       	st	X, r24
}
    3aae:	cf 91       	pop	r28
    3ab0:	df 91       	pop	r29
    3ab2:	08 95       	ret

00003ab4 <TIM1_voidDisableCTCBIntterrupt>:
void TIM1_voidDisableCTCBIntterrupt(void)
{
    3ab4:	df 93       	push	r29
    3ab6:	cf 93       	push	r28
    3ab8:	cd b7       	in	r28, 0x3d	; 61
    3aba:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK, OCIE1B);
    3abc:	a9 e5       	ldi	r26, 0x59	; 89
    3abe:	b0 e0       	ldi	r27, 0x00	; 0
    3ac0:	e9 e5       	ldi	r30, 0x59	; 89
    3ac2:	f0 e0       	ldi	r31, 0x00	; 0
    3ac4:	80 81       	ld	r24, Z
    3ac6:	87 7f       	andi	r24, 0xF7	; 247
    3ac8:	8c 93       	st	X, r24
}
    3aca:	cf 91       	pop	r28
    3acc:	df 91       	pop	r29
    3ace:	08 95       	ret

00003ad0 <TIM1_voidEnableICUIntterrupt>:

void TIM1_voidEnableICUIntterrupt(void)
{
    3ad0:	df 93       	push	r29
    3ad2:	cf 93       	push	r28
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TICIE1);
    3ad8:	a9 e5       	ldi	r26, 0x59	; 89
    3ada:	b0 e0       	ldi	r27, 0x00	; 0
    3adc:	e9 e5       	ldi	r30, 0x59	; 89
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	80 81       	ld	r24, Z
    3ae2:	80 62       	ori	r24, 0x20	; 32
    3ae4:	8c 93       	st	X, r24
}
    3ae6:	cf 91       	pop	r28
    3ae8:	df 91       	pop	r29
    3aea:	08 95       	ret

00003aec <TIM1_voidDisableICUIntterrupt>:
void TIM1_voidDisableICUIntterrupt(void)
{
    3aec:	df 93       	push	r29
    3aee:	cf 93       	push	r28
    3af0:	cd b7       	in	r28, 0x3d	; 61
    3af2:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK, TICIE1);
    3af4:	a9 e5       	ldi	r26, 0x59	; 89
    3af6:	b0 e0       	ldi	r27, 0x00	; 0
    3af8:	e9 e5       	ldi	r30, 0x59	; 89
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	80 81       	ld	r24, Z
    3afe:	8f 7d       	andi	r24, 0xDF	; 223
    3b00:	8c 93       	st	X, r24
}
    3b02:	cf 91       	pop	r28
    3b04:	df 91       	pop	r29
    3b06:	08 95       	ret

00003b08 <TIM1_voidSetOvfCallback>:

void TIM1_voidSetOvfCallback(pf pfOvfCallbackCpy)
{
    3b08:	df 93       	push	r29
    3b0a:	cf 93       	push	r28
    3b0c:	00 d0       	rcall	.+0      	; 0x3b0e <TIM1_voidSetOvfCallback+0x6>
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
    3b12:	9a 83       	std	Y+2, r25	; 0x02
    3b14:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallback = pfOvfCallbackCpy;
    3b16:	89 81       	ldd	r24, Y+1	; 0x01
    3b18:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1a:	90 93 b5 01 	sts	0x01B5, r25
    3b1e:	80 93 b4 01 	sts	0x01B4, r24
}
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	cf 91       	pop	r28
    3b28:	df 91       	pop	r29
    3b2a:	08 95       	ret

00003b2c <TIM1_voidSetCtcACallback>:
void TIM1_voidSetCtcACallback(pf pfCtcCallbackCpy)
{
    3b2c:	df 93       	push	r29
    3b2e:	cf 93       	push	r28
    3b30:	00 d0       	rcall	.+0      	; 0x3b32 <TIM1_voidSetCtcACallback+0x6>
    3b32:	cd b7       	in	r28, 0x3d	; 61
    3b34:	de b7       	in	r29, 0x3e	; 62
    3b36:	9a 83       	std	Y+2, r25	; 0x02
    3b38:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCtcACallback = pfCtcCallbackCpy;
    3b3a:	89 81       	ldd	r24, Y+1	; 0x01
    3b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3e:	90 93 b7 01 	sts	0x01B7, r25
    3b42:	80 93 b6 01 	sts	0x01B6, r24
}
    3b46:	0f 90       	pop	r0
    3b48:	0f 90       	pop	r0
    3b4a:	cf 91       	pop	r28
    3b4c:	df 91       	pop	r29
    3b4e:	08 95       	ret

00003b50 <TIM1_voidSetCtcBCallback>:

void TIM1_voidSetCtcBCallback(pf pfCtcCallbackCpy)
{
    3b50:	df 93       	push	r29
    3b52:	cf 93       	push	r28
    3b54:	00 d0       	rcall	.+0      	; 0x3b56 <TIM1_voidSetCtcBCallback+0x6>
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
    3b5a:	9a 83       	std	Y+2, r25	; 0x02
    3b5c:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCtcBCallback = pfCtcCallbackCpy;
    3b5e:	89 81       	ldd	r24, Y+1	; 0x01
    3b60:	9a 81       	ldd	r25, Y+2	; 0x02
    3b62:	90 93 b9 01 	sts	0x01B9, r25
    3b66:	80 93 b8 01 	sts	0x01B8, r24
}
    3b6a:	0f 90       	pop	r0
    3b6c:	0f 90       	pop	r0
    3b6e:	cf 91       	pop	r28
    3b70:	df 91       	pop	r29
    3b72:	08 95       	ret

00003b74 <TIM1_voidSetICUCallback>:

void TIM1_voidSetICUCallback(pf pfCtcCallbackCpy)
{
    3b74:	df 93       	push	r29
    3b76:	cf 93       	push	r28
    3b78:	00 d0       	rcall	.+0      	; 0x3b7a <TIM1_voidSetICUCallback+0x6>
    3b7a:	cd b7       	in	r28, 0x3d	; 61
    3b7c:	de b7       	in	r29, 0x3e	; 62
    3b7e:	9a 83       	std	Y+2, r25	; 0x02
    3b80:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfICUCallBack = pfCtcCallbackCpy;
    3b82:	89 81       	ldd	r24, Y+1	; 0x01
    3b84:	9a 81       	ldd	r25, Y+2	; 0x02
    3b86:	90 93 b3 01 	sts	0x01B3, r25
    3b8a:	80 93 b2 01 	sts	0x01B2, r24
}
    3b8e:	0f 90       	pop	r0
    3b90:	0f 90       	pop	r0
    3b92:	cf 91       	pop	r28
    3b94:	df 91       	pop	r29
    3b96:	08 95       	ret

00003b98 <TIM1_u16GetCntrValue>:

uint16 TIM1_u16GetCntrValue(void)
{
    3b98:	df 93       	push	r29
    3b9a:	cf 93       	push	r28
    3b9c:	cd b7       	in	r28, 0x3d	; 61
    3b9e:	de b7       	in	r29, 0x3e	; 62
	return (uint16)TCNT1;
    3ba0:	ec e4       	ldi	r30, 0x4C	; 76
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	80 81       	ld	r24, Z
    3ba6:	91 81       	ldd	r25, Z+1	; 0x01
}
    3ba8:	cf 91       	pop	r28
    3baa:	df 91       	pop	r29
    3bac:	08 95       	ret

00003bae <__vector_9>:
/*OVF ISR*/
void __vector_9(void) __attribute__((signal, used));
void __vector_9(void)
{
    3bae:	1f 92       	push	r1
    3bb0:	0f 92       	push	r0
    3bb2:	0f b6       	in	r0, 0x3f	; 63
    3bb4:	0f 92       	push	r0
    3bb6:	11 24       	eor	r1, r1
    3bb8:	2f 93       	push	r18
    3bba:	3f 93       	push	r19
    3bbc:	4f 93       	push	r20
    3bbe:	5f 93       	push	r21
    3bc0:	6f 93       	push	r22
    3bc2:	7f 93       	push	r23
    3bc4:	8f 93       	push	r24
    3bc6:	9f 93       	push	r25
    3bc8:	af 93       	push	r26
    3bca:	bf 93       	push	r27
    3bcc:	ef 93       	push	r30
    3bce:	ff 93       	push	r31
    3bd0:	df 93       	push	r29
    3bd2:	cf 93       	push	r28
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfOvfCallback();
    3bd8:	e0 91 b4 01 	lds	r30, 0x01B4
    3bdc:	f0 91 b5 01 	lds	r31, 0x01B5
    3be0:	09 95       	icall
}
    3be2:	cf 91       	pop	r28
    3be4:	df 91       	pop	r29
    3be6:	ff 91       	pop	r31
    3be8:	ef 91       	pop	r30
    3bea:	bf 91       	pop	r27
    3bec:	af 91       	pop	r26
    3bee:	9f 91       	pop	r25
    3bf0:	8f 91       	pop	r24
    3bf2:	7f 91       	pop	r23
    3bf4:	6f 91       	pop	r22
    3bf6:	5f 91       	pop	r21
    3bf8:	4f 91       	pop	r20
    3bfa:	3f 91       	pop	r19
    3bfc:	2f 91       	pop	r18
    3bfe:	0f 90       	pop	r0
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	0f 90       	pop	r0
    3c04:	1f 90       	pop	r1
    3c06:	18 95       	reti

00003c08 <__vector_7>:
/*CTC A ISR*/
void __vector_7(void) __attribute__((signal, used));
void __vector_7(void)
{
    3c08:	1f 92       	push	r1
    3c0a:	0f 92       	push	r0
    3c0c:	0f b6       	in	r0, 0x3f	; 63
    3c0e:	0f 92       	push	r0
    3c10:	11 24       	eor	r1, r1
    3c12:	2f 93       	push	r18
    3c14:	3f 93       	push	r19
    3c16:	4f 93       	push	r20
    3c18:	5f 93       	push	r21
    3c1a:	6f 93       	push	r22
    3c1c:	7f 93       	push	r23
    3c1e:	8f 93       	push	r24
    3c20:	9f 93       	push	r25
    3c22:	af 93       	push	r26
    3c24:	bf 93       	push	r27
    3c26:	ef 93       	push	r30
    3c28:	ff 93       	push	r31
    3c2a:	df 93       	push	r29
    3c2c:	cf 93       	push	r28
    3c2e:	cd b7       	in	r28, 0x3d	; 61
    3c30:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCtcACallback();
    3c32:	e0 91 b6 01 	lds	r30, 0x01B6
    3c36:	f0 91 b7 01 	lds	r31, 0x01B7
    3c3a:	09 95       	icall
}
    3c3c:	cf 91       	pop	r28
    3c3e:	df 91       	pop	r29
    3c40:	ff 91       	pop	r31
    3c42:	ef 91       	pop	r30
    3c44:	bf 91       	pop	r27
    3c46:	af 91       	pop	r26
    3c48:	9f 91       	pop	r25
    3c4a:	8f 91       	pop	r24
    3c4c:	7f 91       	pop	r23
    3c4e:	6f 91       	pop	r22
    3c50:	5f 91       	pop	r21
    3c52:	4f 91       	pop	r20
    3c54:	3f 91       	pop	r19
    3c56:	2f 91       	pop	r18
    3c58:	0f 90       	pop	r0
    3c5a:	0f be       	out	0x3f, r0	; 63
    3c5c:	0f 90       	pop	r0
    3c5e:	1f 90       	pop	r1
    3c60:	18 95       	reti

00003c62 <__vector_8>:

/*CTC B ISR*/
void __vector_8(void) __attribute__((signal, used));
void __vector_8(void)
{
    3c62:	1f 92       	push	r1
    3c64:	0f 92       	push	r0
    3c66:	0f b6       	in	r0, 0x3f	; 63
    3c68:	0f 92       	push	r0
    3c6a:	11 24       	eor	r1, r1
    3c6c:	2f 93       	push	r18
    3c6e:	3f 93       	push	r19
    3c70:	4f 93       	push	r20
    3c72:	5f 93       	push	r21
    3c74:	6f 93       	push	r22
    3c76:	7f 93       	push	r23
    3c78:	8f 93       	push	r24
    3c7a:	9f 93       	push	r25
    3c7c:	af 93       	push	r26
    3c7e:	bf 93       	push	r27
    3c80:	ef 93       	push	r30
    3c82:	ff 93       	push	r31
    3c84:	df 93       	push	r29
    3c86:	cf 93       	push	r28
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCtcBCallback();
    3c8c:	e0 91 b8 01 	lds	r30, 0x01B8
    3c90:	f0 91 b9 01 	lds	r31, 0x01B9
    3c94:	09 95       	icall
}
    3c96:	cf 91       	pop	r28
    3c98:	df 91       	pop	r29
    3c9a:	ff 91       	pop	r31
    3c9c:	ef 91       	pop	r30
    3c9e:	bf 91       	pop	r27
    3ca0:	af 91       	pop	r26
    3ca2:	9f 91       	pop	r25
    3ca4:	8f 91       	pop	r24
    3ca6:	7f 91       	pop	r23
    3ca8:	6f 91       	pop	r22
    3caa:	5f 91       	pop	r21
    3cac:	4f 91       	pop	r20
    3cae:	3f 91       	pop	r19
    3cb0:	2f 91       	pop	r18
    3cb2:	0f 90       	pop	r0
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	0f 90       	pop	r0
    3cb8:	1f 90       	pop	r1
    3cba:	18 95       	reti

00003cbc <__vector_6>:
void __vector_6(void) __attribute__((signal, used));
void __vector_6(void)
{
    3cbc:	1f 92       	push	r1
    3cbe:	0f 92       	push	r0
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	0f 92       	push	r0
    3cc4:	11 24       	eor	r1, r1
    3cc6:	2f 93       	push	r18
    3cc8:	3f 93       	push	r19
    3cca:	4f 93       	push	r20
    3ccc:	5f 93       	push	r21
    3cce:	6f 93       	push	r22
    3cd0:	7f 93       	push	r23
    3cd2:	8f 93       	push	r24
    3cd4:	9f 93       	push	r25
    3cd6:	af 93       	push	r26
    3cd8:	bf 93       	push	r27
    3cda:	ef 93       	push	r30
    3cdc:	ff 93       	push	r31
    3cde:	df 93       	push	r29
    3ce0:	cf 93       	push	r28
    3ce2:	cd b7       	in	r28, 0x3d	; 61
    3ce4:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfICUCallBack();
    3ce6:	e0 91 b2 01 	lds	r30, 0x01B2
    3cea:	f0 91 b3 01 	lds	r31, 0x01B3
    3cee:	09 95       	icall
}
    3cf0:	cf 91       	pop	r28
    3cf2:	df 91       	pop	r29
    3cf4:	ff 91       	pop	r31
    3cf6:	ef 91       	pop	r30
    3cf8:	bf 91       	pop	r27
    3cfa:	af 91       	pop	r26
    3cfc:	9f 91       	pop	r25
    3cfe:	8f 91       	pop	r24
    3d00:	7f 91       	pop	r23
    3d02:	6f 91       	pop	r22
    3d04:	5f 91       	pop	r21
    3d06:	4f 91       	pop	r20
    3d08:	3f 91       	pop	r19
    3d0a:	2f 91       	pop	r18
    3d0c:	0f 90       	pop	r0
    3d0e:	0f be       	out	0x3f, r0	; 63
    3d10:	0f 90       	pop	r0
    3d12:	1f 90       	pop	r1
    3d14:	18 95       	reti

00003d16 <TIM1_voidPWMAGenerate>:

void TIM1_voidPWMAGenerate(float32 f32DutyCycleCpy)
{
    3d16:	cf 92       	push	r12
    3d18:	df 92       	push	r13
    3d1a:	ef 92       	push	r14
    3d1c:	ff 92       	push	r15
    3d1e:	0f 93       	push	r16
    3d20:	1f 93       	push	r17
    3d22:	df 93       	push	r29
    3d24:	cf 93       	push	r28
    3d26:	00 d0       	rcall	.+0      	; 0x3d28 <TIM1_voidPWMAGenerate+0x12>
    3d28:	00 d0       	rcall	.+0      	; 0x3d2a <TIM1_voidPWMAGenerate+0x14>
    3d2a:	cd b7       	in	r28, 0x3d	; 61
    3d2c:	de b7       	in	r29, 0x3e	; 62
    3d2e:	69 83       	std	Y+1, r22	; 0x01
    3d30:	7a 83       	std	Y+2, r23	; 0x02
    3d32:	8b 83       	std	Y+3, r24	; 0x03
    3d34:	9c 83       	std	Y+4, r25	; 0x04
	//	TCNT1 = 0;
	// if ocr was 0 therefore duty = 0, if OCR was 128 therefore duty cycle is 50%
	OCR1A = ((float32)(f32DutyCycleCpy) / 100) * ICR1;
    3d36:	0f 2e       	mov	r0, r31
    3d38:	fa e4       	ldi	r31, 0x4A	; 74
    3d3a:	cf 2e       	mov	r12, r31
    3d3c:	dd 24       	eor	r13, r13
    3d3e:	f0 2d       	mov	r31, r0
    3d40:	69 81       	ldd	r22, Y+1	; 0x01
    3d42:	7a 81       	ldd	r23, Y+2	; 0x02
    3d44:	8b 81       	ldd	r24, Y+3	; 0x03
    3d46:	9c 81       	ldd	r25, Y+4	; 0x04
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	48 ec       	ldi	r20, 0xC8	; 200
    3d4e:	52 e4       	ldi	r21, 0x42	; 66
    3d50:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	7c 01       	movw	r14, r24
    3d5a:	8d 01       	movw	r16, r26
    3d5c:	e6 e4       	ldi	r30, 0x46	; 70
    3d5e:	f0 e0       	ldi	r31, 0x00	; 0
    3d60:	80 81       	ld	r24, Z
    3d62:	91 81       	ldd	r25, Z+1	; 0x01
    3d64:	cc 01       	movw	r24, r24
    3d66:	a0 e0       	ldi	r26, 0x00	; 0
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	bc 01       	movw	r22, r24
    3d6c:	cd 01       	movw	r24, r26
    3d6e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3d72:	9b 01       	movw	r18, r22
    3d74:	ac 01       	movw	r20, r24
    3d76:	c8 01       	movw	r24, r16
    3d78:	b7 01       	movw	r22, r14
    3d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	bc 01       	movw	r22, r24
    3d84:	cd 01       	movw	r24, r26
    3d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	f6 01       	movw	r30, r12
    3d90:	91 83       	std	Z+1, r25	; 0x01
    3d92:	80 83       	st	Z, r24

	// pwm non inverted mode
	// it means that if ocr =60% MAX then duty cycle = 60%
}
    3d94:	0f 90       	pop	r0
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	1f 91       	pop	r17
    3da2:	0f 91       	pop	r16
    3da4:	ff 90       	pop	r15
    3da6:	ef 90       	pop	r14
    3da8:	df 90       	pop	r13
    3daa:	cf 90       	pop	r12
    3dac:	08 95       	ret

00003dae <TIM1_voidPWMBGenerate>:
void TIM1_voidPWMBGenerate(float32 f32DutyCycleCpy)
{
    3dae:	cf 92       	push	r12
    3db0:	df 92       	push	r13
    3db2:	ef 92       	push	r14
    3db4:	ff 92       	push	r15
    3db6:	0f 93       	push	r16
    3db8:	1f 93       	push	r17
    3dba:	df 93       	push	r29
    3dbc:	cf 93       	push	r28
    3dbe:	00 d0       	rcall	.+0      	; 0x3dc0 <TIM1_voidPWMBGenerate+0x12>
    3dc0:	00 d0       	rcall	.+0      	; 0x3dc2 <TIM1_voidPWMBGenerate+0x14>
    3dc2:	cd b7       	in	r28, 0x3d	; 61
    3dc4:	de b7       	in	r29, 0x3e	; 62
    3dc6:	69 83       	std	Y+1, r22	; 0x01
    3dc8:	7a 83       	std	Y+2, r23	; 0x02
    3dca:	8b 83       	std	Y+3, r24	; 0x03
    3dcc:	9c 83       	std	Y+4, r25	; 0x04

	OCR1B = ((float32)(f32DutyCycleCpy) / 100) * ICR1;
    3dce:	0f 2e       	mov	r0, r31
    3dd0:	f8 e4       	ldi	r31, 0x48	; 72
    3dd2:	cf 2e       	mov	r12, r31
    3dd4:	dd 24       	eor	r13, r13
    3dd6:	f0 2d       	mov	r31, r0
    3dd8:	69 81       	ldd	r22, Y+1	; 0x01
    3dda:	7a 81       	ldd	r23, Y+2	; 0x02
    3ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dde:	9c 81       	ldd	r25, Y+4	; 0x04
    3de0:	20 e0       	ldi	r18, 0x00	; 0
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	48 ec       	ldi	r20, 0xC8	; 200
    3de6:	52 e4       	ldi	r21, 0x42	; 66
    3de8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	7c 01       	movw	r14, r24
    3df2:	8d 01       	movw	r16, r26
    3df4:	e6 e4       	ldi	r30, 0x46	; 70
    3df6:	f0 e0       	ldi	r31, 0x00	; 0
    3df8:	80 81       	ld	r24, Z
    3dfa:	91 81       	ldd	r25, Z+1	; 0x01
    3dfc:	cc 01       	movw	r24, r24
    3dfe:	a0 e0       	ldi	r26, 0x00	; 0
    3e00:	b0 e0       	ldi	r27, 0x00	; 0
    3e02:	bc 01       	movw	r22, r24
    3e04:	cd 01       	movw	r24, r26
    3e06:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3e0a:	9b 01       	movw	r18, r22
    3e0c:	ac 01       	movw	r20, r24
    3e0e:	c8 01       	movw	r24, r16
    3e10:	b7 01       	movw	r22, r14
    3e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e16:	dc 01       	movw	r26, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	bc 01       	movw	r22, r24
    3e1c:	cd 01       	movw	r24, r26
    3e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e22:	dc 01       	movw	r26, r24
    3e24:	cb 01       	movw	r24, r22
    3e26:	f6 01       	movw	r30, r12
    3e28:	91 83       	std	Z+1, r25	; 0x01
    3e2a:	80 83       	st	Z, r24
}
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	0f 90       	pop	r0
    3e34:	cf 91       	pop	r28
    3e36:	df 91       	pop	r29
    3e38:	1f 91       	pop	r17
    3e3a:	0f 91       	pop	r16
    3e3c:	ff 90       	pop	r15
    3e3e:	ef 90       	pop	r14
    3e40:	df 90       	pop	r13
    3e42:	cf 90       	pop	r12
    3e44:	08 95       	ret

00003e46 <main>:
uint16 u16data;
void display_String(char *s, uint8 u8CmdCpy);


int main(void)
{
    3e46:	df 93       	push	r29
    3e48:	cf 93       	push	r28
    3e4a:	cd b7       	in	r28, 0x3d	; 61
    3e4c:	de b7       	in	r29, 0x3e	; 62
    3e4e:	c4 54       	subi	r28, 0x44	; 68
    3e50:	d0 40       	sbci	r29, 0x00	; 0
    3e52:	0f b6       	in	r0, 0x3f	; 63
    3e54:	f8 94       	cli
    3e56:	de bf       	out	0x3e, r29	; 62
    3e58:	0f be       	out	0x3f, r0	; 63
    3e5a:	cd bf       	out	0x3d, r28	; 61
	float32 u32data;
	uint8 u8CntrLoc1;
	DIO_voidInit();
    3e5c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_voidInit>
	DIO_enuPullWrite(DIO_u8PIN_0,DIO_u8ACTIVATE);
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	61 e0       	ldi	r22, 0x01	; 1
    3e64:	0e 94 95 0a 	call	0x152a	; 0x152a <DIO_enuPullWrite>
	SPI_voidInit();
    3e68:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <SPI_voidInit>
	ADC_voidInit();
    3e6c:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_voidInit>
	ADC_voidEnable();
    3e70:	0e 94 bf 07 	call	0xf7e	; 0xf7e <ADC_voidEnable>
	TIM1_voidInit();
    3e74:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <TIM1_voidInit>
	LCD_voidInit();
    3e78:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <LCD_voidInit>
	DIO_enuPullWrite(DIO_u8PIN_25,DIO_u8ACTIVATE);
    3e7c:	89 e1       	ldi	r24, 0x19	; 25
    3e7e:	61 e0       	ldi	r22, 0x01	; 1
    3e80:	0e 94 95 0a 	call	0x152a	; 0x152a <DIO_enuPullWrite>

	uint16 u16ReadedValLoc=15;
    3e84:	8f e0       	ldi	r24, 0x0F	; 15
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	98 8f       	std	Y+24, r25	; 0x18
    3e8a:	8f 8b       	std	Y+23, r24	; 0x17
	uint16 u16ReadedValLocprev=15;
    3e8c:	8f e0       	ldi	r24, 0x0F	; 15
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	9e 8b       	std	Y+22, r25	; 0x16
    3e92:	8d 8b       	std	Y+21, r24	; 0x15

	uint8 u8ReadButton = 1;
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	8e 8f       	std	Y+30, r24	; 0x1e

	float32 f32VoltLoc;
	uint8 u8CntrLoc = 0;
    3e98:	18 8a       	std	Y+16, r1	; 0x10
	uint8 u8ReceivedDataLoc = 0;
    3e9a:	1f 86       	std	Y+15, r1	; 0x0f
    3e9c:	03 c0       	rjmp	.+6      	; 0x3ea4 <main+0x5e>

	while(!u8ReceivedDataLoc)
	{
		u8ReceivedDataLoc = SPI_u8DataRecieve_Sync();
    3e9e:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <SPI_u8DataRecieve_Sync>
    3ea2:	8f 87       	std	Y+15, r24	; 0x0f

	float32 f32VoltLoc;
	uint8 u8CntrLoc = 0;
	uint8 u8ReceivedDataLoc = 0;

	while(!u8ReceivedDataLoc)
    3ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ea6:	88 23       	and	r24, r24
    3ea8:	d1 f3       	breq	.-12     	; 0x3e9e <main+0x58>
	{
		u8ReceivedDataLoc = SPI_u8DataRecieve_Sync();

	}
	uint8 s3[] = "TEMP: ";
    3eaa:	ce 01       	movw	r24, r28
    3eac:	4f 96       	adiw	r24, 0x1f	; 31
    3eae:	9f ab       	std	Y+55, r25	; 0x37
    3eb0:	8e ab       	std	Y+54, r24	; 0x36
    3eb2:	e0 e6       	ldi	r30, 0x60	; 96
    3eb4:	f0 e0       	ldi	r31, 0x00	; 0
    3eb6:	f9 af       	std	Y+57, r31	; 0x39
    3eb8:	e8 af       	std	Y+56, r30	; 0x38
    3eba:	f7 e0       	ldi	r31, 0x07	; 7
    3ebc:	fa af       	std	Y+58, r31	; 0x3a
    3ebe:	e8 ad       	ldd	r30, Y+56	; 0x38
    3ec0:	f9 ad       	ldd	r31, Y+57	; 0x39
    3ec2:	00 80       	ld	r0, Z
    3ec4:	88 ad       	ldd	r24, Y+56	; 0x38
    3ec6:	99 ad       	ldd	r25, Y+57	; 0x39
    3ec8:	01 96       	adiw	r24, 0x01	; 1
    3eca:	99 af       	std	Y+57, r25	; 0x39
    3ecc:	88 af       	std	Y+56, r24	; 0x38
    3ece:	ee a9       	ldd	r30, Y+54	; 0x36
    3ed0:	ff a9       	ldd	r31, Y+55	; 0x37
    3ed2:	00 82       	st	Z, r0
    3ed4:	8e a9       	ldd	r24, Y+54	; 0x36
    3ed6:	9f a9       	ldd	r25, Y+55	; 0x37
    3ed8:	01 96       	adiw	r24, 0x01	; 1
    3eda:	9f ab       	std	Y+55, r25	; 0x37
    3edc:	8e ab       	std	Y+54, r24	; 0x36
    3ede:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ee0:	91 50       	subi	r25, 0x01	; 1
    3ee2:	9a af       	std	Y+58, r25	; 0x3a
    3ee4:	ea ad       	ldd	r30, Y+58	; 0x3a
    3ee6:	ee 23       	and	r30, r30
    3ee8:	51 f7       	brne	.-44     	; 0x3ebe <main+0x78>


	//keep blocking untill the door is opened

	uint8 s[] = " Value: ";
    3eea:	ce 01       	movw	r24, r28
    3eec:	86 96       	adiw	r24, 0x26	; 38
    3eee:	9c af       	std	Y+60, r25	; 0x3c
    3ef0:	8b af       	std	Y+59, r24	; 0x3b
    3ef2:	e7 e6       	ldi	r30, 0x67	; 103
    3ef4:	f0 e0       	ldi	r31, 0x00	; 0
    3ef6:	fe af       	std	Y+62, r31	; 0x3e
    3ef8:	ed af       	std	Y+61, r30	; 0x3d
    3efa:	f9 e0       	ldi	r31, 0x09	; 9
    3efc:	ff af       	std	Y+63, r31	; 0x3f
    3efe:	ed ad       	ldd	r30, Y+61	; 0x3d
    3f00:	fe ad       	ldd	r31, Y+62	; 0x3e
    3f02:	00 80       	ld	r0, Z
    3f04:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f06:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f08:	01 96       	adiw	r24, 0x01	; 1
    3f0a:	9e af       	std	Y+62, r25	; 0x3e
    3f0c:	8d af       	std	Y+61, r24	; 0x3d
    3f0e:	eb ad       	ldd	r30, Y+59	; 0x3b
    3f10:	fc ad       	ldd	r31, Y+60	; 0x3c
    3f12:	00 82       	st	Z, r0
    3f14:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f16:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f18:	01 96       	adiw	r24, 0x01	; 1
    3f1a:	9c af       	std	Y+60, r25	; 0x3c
    3f1c:	8b af       	std	Y+59, r24	; 0x3b
    3f1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f20:	91 50       	subi	r25, 0x01	; 1
    3f22:	9f af       	std	Y+63, r25	; 0x3f
    3f24:	ef ad       	ldd	r30, Y+63	; 0x3f
    3f26:	ee 23       	and	r30, r30
    3f28:	51 f7       	brne	.-44     	; 0x3efe <main+0xb8>
	uint8 s1[] = "Volt: ";
    3f2a:	ce 01       	movw	r24, r28
    3f2c:	8f 96       	adiw	r24, 0x2f	; 47
    3f2e:	22 96       	adiw	r28, 0x02	; 2
    3f30:	9f af       	std	Y+63, r25	; 0x3f
    3f32:	8e af       	std	Y+62, r24	; 0x3e
    3f34:	22 97       	sbiw	r28, 0x02	; 2
    3f36:	e0 e7       	ldi	r30, 0x70	; 112
    3f38:	f0 e0       	ldi	r31, 0x00	; 0
    3f3a:	24 96       	adiw	r28, 0x04	; 4
    3f3c:	ff af       	std	Y+63, r31	; 0x3f
    3f3e:	ee af       	std	Y+62, r30	; 0x3e
    3f40:	24 97       	sbiw	r28, 0x04	; 4
    3f42:	f7 e0       	ldi	r31, 0x07	; 7
    3f44:	25 96       	adiw	r28, 0x05	; 5
    3f46:	ff af       	std	Y+63, r31	; 0x3f
    3f48:	25 97       	sbiw	r28, 0x05	; 5
    3f4a:	24 96       	adiw	r28, 0x04	; 4
    3f4c:	ee ad       	ldd	r30, Y+62	; 0x3e
    3f4e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3f50:	24 97       	sbiw	r28, 0x04	; 4
    3f52:	00 80       	ld	r0, Z
    3f54:	24 96       	adiw	r28, 0x04	; 4
    3f56:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f58:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f5a:	24 97       	sbiw	r28, 0x04	; 4
    3f5c:	01 96       	adiw	r24, 0x01	; 1
    3f5e:	24 96       	adiw	r28, 0x04	; 4
    3f60:	9f af       	std	Y+63, r25	; 0x3f
    3f62:	8e af       	std	Y+62, r24	; 0x3e
    3f64:	24 97       	sbiw	r28, 0x04	; 4
    3f66:	22 96       	adiw	r28, 0x02	; 2
    3f68:	ee ad       	ldd	r30, Y+62	; 0x3e
    3f6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    3f6c:	22 97       	sbiw	r28, 0x02	; 2
    3f6e:	00 82       	st	Z, r0
    3f70:	22 96       	adiw	r28, 0x02	; 2
    3f72:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f74:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f76:	22 97       	sbiw	r28, 0x02	; 2
    3f78:	01 96       	adiw	r24, 0x01	; 1
    3f7a:	22 96       	adiw	r28, 0x02	; 2
    3f7c:	9f af       	std	Y+63, r25	; 0x3f
    3f7e:	8e af       	std	Y+62, r24	; 0x3e
    3f80:	22 97       	sbiw	r28, 0x02	; 2
    3f82:	25 96       	adiw	r28, 0x05	; 5
    3f84:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f86:	25 97       	sbiw	r28, 0x05	; 5
    3f88:	91 50       	subi	r25, 0x01	; 1
    3f8a:	25 96       	adiw	r28, 0x05	; 5
    3f8c:	9f af       	std	Y+63, r25	; 0x3f
    3f8e:	25 97       	sbiw	r28, 0x05	; 5
    3f90:	25 96       	adiw	r28, 0x05	; 5
    3f92:	ef ad       	ldd	r30, Y+63	; 0x3f
    3f94:	25 97       	sbiw	r28, 0x05	; 5
    3f96:	ee 23       	and	r30, r30
    3f98:	c1 f6       	brne	.-80     	; 0x3f4a <main+0x104>



	while(1)
	{
		DIO_enuReadPin(DIO_u8PIN_25,&u8ReadButton);
    3f9a:	9e 01       	movw	r18, r28
    3f9c:	22 5e       	subi	r18, 0xE2	; 226
    3f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3fa0:	89 e1       	ldi	r24, 0x19	; 25
    3fa2:	b9 01       	movw	r22, r18
    3fa4:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_enuReadPin>
		if(u8ReadButton == 0)
    3fa8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3faa:	88 23       	and	r24, r24
    3fac:	f1 f4       	brne	.+60     	; 0x3fea <main+0x1a4>
		{
			tenu_Relay_enu_off(RELAY_u8NUM_0);
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	0e 94 bf 1b 	call	0x377e	; 0x377e <tenu_Relay_enu_off>
			LCD_enuWriteCmd(LCD_u8NUM_0,LCD_u8CLEAR);
    3fb4:	80 e0       	ldi	r24, 0x00	; 0
    3fb6:	61 e0       	ldi	r22, 0x01	; 1
    3fb8:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>

			LED_enuWriteValue(LED_u8NUM_0,LED_u8OFF);
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	60 e0       	ldi	r22, 0x00	; 0
    3fc0:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
			LED_enuWriteValue(LED_u8NUM_1,LED_u8OFF);
    3fc4:	81 e0       	ldi	r24, 0x01	; 1
    3fc6:	60 e0       	ldi	r22, 0x00	; 0
    3fc8:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
			LED_enuWriteValue(LED_u8NUM_2,LED_u8OFF);
    3fcc:	82 e0       	ldi	r24, 0x02	; 2
    3fce:	60 e0       	ldi	r22, 0x00	; 0
    3fd0:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
    3fd4:	07 c0       	rjmp	.+14     	; 0x3fe4 <main+0x19e>
			while(u8ReadButton == 0)
			{
				DIO_enuReadPin(DIO_u8PIN_25,&u8ReadButton);
    3fd6:	9e 01       	movw	r18, r28
    3fd8:	22 5e       	subi	r18, 0xE2	; 226
    3fda:	3f 4f       	sbci	r19, 0xFF	; 255
    3fdc:	89 e1       	ldi	r24, 0x19	; 25
    3fde:	b9 01       	movw	r22, r18
    3fe0:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_enuReadPin>
			LCD_enuWriteCmd(LCD_u8NUM_0,LCD_u8CLEAR);

			LED_enuWriteValue(LED_u8NUM_0,LED_u8OFF);
			LED_enuWriteValue(LED_u8NUM_1,LED_u8OFF);
			LED_enuWriteValue(LED_u8NUM_2,LED_u8OFF);
			while(u8ReadButton == 0)
    3fe4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3fe6:	88 23       	and	r24, r24
    3fe8:	b1 f3       	breq	.-20     	; 0x3fd6 <main+0x190>
				DIO_enuReadPin(DIO_u8PIN_25,&u8ReadButton);
			}

		}
		//switch to LDR
		ADC_voidPinSwitch(0);
    3fea:	80 e0       	ldi	r24, 0x00	; 0
    3fec:	0e 94 92 08 	call	0x1124	; 0x1124 <ADC_voidPinSwitch>
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	a8 ec       	ldi	r26, 0xC8	; 200
    3ff6:	b2 e4       	ldi	r27, 0x42	; 66
    3ff8:	8b 87       	std	Y+11, r24	; 0x0b
    3ffa:	9c 87       	std	Y+12, r25	; 0x0c
    3ffc:	ad 87       	std	Y+13, r26	; 0x0d
    3ffe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4000:	6b 85       	ldd	r22, Y+11	; 0x0b
    4002:	7c 85       	ldd	r23, Y+12	; 0x0c
    4004:	8d 85       	ldd	r24, Y+13	; 0x0d
    4006:	9e 85       	ldd	r25, Y+14	; 0x0e
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	30 e0       	ldi	r19, 0x00	; 0
    400c:	4a ef       	ldi	r20, 0xFA	; 250
    400e:	54 e4       	ldi	r21, 0x44	; 68
    4010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4014:	dc 01       	movw	r26, r24
    4016:	cb 01       	movw	r24, r22
    4018:	8f 83       	std	Y+7, r24	; 0x07
    401a:	98 87       	std	Y+8, r25	; 0x08
    401c:	a9 87       	std	Y+9, r26	; 0x09
    401e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4020:	6f 81       	ldd	r22, Y+7	; 0x07
    4022:	78 85       	ldd	r23, Y+8	; 0x08
    4024:	89 85       	ldd	r24, Y+9	; 0x09
    4026:	9a 85       	ldd	r25, Y+10	; 0x0a
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	40 e8       	ldi	r20, 0x80	; 128
    402e:	5f e3       	ldi	r21, 0x3F	; 63
    4030:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4034:	88 23       	and	r24, r24
    4036:	2c f4       	brge	.+10     	; 0x4042 <main+0x1fc>
		__ticks = 1;
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	9e 83       	std	Y+6, r25	; 0x06
    403e:	8d 83       	std	Y+5, r24	; 0x05
    4040:	3f c0       	rjmp	.+126    	; 0x40c0 <main+0x27a>
	else if (__tmp > 65535)
    4042:	6f 81       	ldd	r22, Y+7	; 0x07
    4044:	78 85       	ldd	r23, Y+8	; 0x08
    4046:	89 85       	ldd	r24, Y+9	; 0x09
    4048:	9a 85       	ldd	r25, Y+10	; 0x0a
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	3f ef       	ldi	r19, 0xFF	; 255
    404e:	4f e7       	ldi	r20, 0x7F	; 127
    4050:	57 e4       	ldi	r21, 0x47	; 71
    4052:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4056:	18 16       	cp	r1, r24
    4058:	4c f5       	brge	.+82     	; 0x40ac <main+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    405a:	6b 85       	ldd	r22, Y+11	; 0x0b
    405c:	7c 85       	ldd	r23, Y+12	; 0x0c
    405e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4060:	9e 85       	ldd	r25, Y+14	; 0x0e
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	40 e2       	ldi	r20, 0x20	; 32
    4068:	51 e4       	ldi	r21, 0x41	; 65
    406a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406e:	dc 01       	movw	r26, r24
    4070:	cb 01       	movw	r24, r22
    4072:	bc 01       	movw	r22, r24
    4074:	cd 01       	movw	r24, r26
    4076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407a:	dc 01       	movw	r26, r24
    407c:	cb 01       	movw	r24, r22
    407e:	9e 83       	std	Y+6, r25	; 0x06
    4080:	8d 83       	std	Y+5, r24	; 0x05
    4082:	0f c0       	rjmp	.+30     	; 0x40a2 <main+0x25c>
    4084:	88 ec       	ldi	r24, 0xC8	; 200
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	9c 83       	std	Y+4, r25	; 0x04
    408a:	8b 83       	std	Y+3, r24	; 0x03
    408c:	8b 81       	ldd	r24, Y+3	; 0x03
    408e:	9c 81       	ldd	r25, Y+4	; 0x04
    4090:	01 97       	sbiw	r24, 0x01	; 1
    4092:	f1 f7       	brne	.-4      	; 0x4090 <main+0x24a>
    4094:	9c 83       	std	Y+4, r25	; 0x04
    4096:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4098:	8d 81       	ldd	r24, Y+5	; 0x05
    409a:	9e 81       	ldd	r25, Y+6	; 0x06
    409c:	01 97       	sbiw	r24, 0x01	; 1
    409e:	9e 83       	std	Y+6, r25	; 0x06
    40a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a2:	8d 81       	ldd	r24, Y+5	; 0x05
    40a4:	9e 81       	ldd	r25, Y+6	; 0x06
    40a6:	00 97       	sbiw	r24, 0x00	; 0
    40a8:	69 f7       	brne	.-38     	; 0x4084 <main+0x23e>
    40aa:	14 c0       	rjmp	.+40     	; 0x40d4 <main+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ac:	6f 81       	ldd	r22, Y+7	; 0x07
    40ae:	78 85       	ldd	r23, Y+8	; 0x08
    40b0:	89 85       	ldd	r24, Y+9	; 0x09
    40b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b8:	dc 01       	movw	r26, r24
    40ba:	cb 01       	movw	r24, r22
    40bc:	9e 83       	std	Y+6, r25	; 0x06
    40be:	8d 83       	std	Y+5, r24	; 0x05
    40c0:	8d 81       	ldd	r24, Y+5	; 0x05
    40c2:	9e 81       	ldd	r25, Y+6	; 0x06
    40c4:	9a 83       	std	Y+2, r25	; 0x02
    40c6:	89 83       	std	Y+1, r24	; 0x01
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	9a 81       	ldd	r25, Y+2	; 0x02
    40cc:	01 97       	sbiw	r24, 0x01	; 1
    40ce:	f1 f7       	brne	.-4      	; 0x40cc <main+0x286>
    40d0:	9a 83       	std	Y+2, r25	; 0x02
    40d2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		u16ReadedValLocprev = u16ReadedValLoc;
    40d4:	8f 89       	ldd	r24, Y+23	; 0x17
    40d6:	98 8d       	ldd	r25, Y+24	; 0x18
    40d8:	9e 8b       	std	Y+22, r25	; 0x16
    40da:	8d 8b       	std	Y+21, r24	; 0x15
		//read from ADC
		u16ReadedValLoc=ADC_u16ReadSync();
    40dc:	0e 94 09 08 	call	0x1012	; 0x1012 <ADC_u16ReadSync>
    40e0:	98 8f       	std	Y+24, r25	; 0x18
    40e2:	8f 8b       	std	Y+23, r24	; 0x17
		f32VoltLoc = ADC_f32NumtoVolt(u16ReadedValLoc);
    40e4:	8f 89       	ldd	r24, Y+23	; 0x17
    40e6:	98 8d       	ldd	r25, Y+24	; 0x18
    40e8:	0e 94 57 08 	call	0x10ae	; 0x10ae <ADC_f32NumtoVolt>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	89 8b       	std	Y+17, r24	; 0x11
    40f2:	9a 8b       	std	Y+18, r25	; 0x12
    40f4:	ab 8b       	std	Y+19, r26	; 0x13
    40f6:	bc 8b       	std	Y+20, r27	; 0x14
		if(u16ReadedValLoc <= 94)
    40f8:	8f 89       	ldd	r24, Y+23	; 0x17
    40fa:	98 8d       	ldd	r25, Y+24	; 0x18
    40fc:	8f 35       	cpi	r24, 0x5F	; 95
    40fe:	91 05       	cpc	r25, r1
    4100:	68 f4       	brcc	.+26     	; 0x411c <main+0x2d6>
		{
			LED_enuWriteValue(LED_u8NUM_0,LED_u8ON);
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	61 e0       	ldi	r22, 0x01	; 1
    4106:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
			LED_enuWriteValue(LED_u8NUM_1,LED_u8ON);
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	61 e0       	ldi	r22, 0x01	; 1
    410e:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
			LED_enuWriteValue(LED_u8NUM_2,LED_u8ON);
    4112:	82 e0       	ldi	r24, 0x02	; 2
    4114:	61 e0       	ldi	r22, 0x01	; 1
    4116:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
    411a:	32 c0       	rjmp	.+100    	; 0x4180 <main+0x33a>
		}
		else if (u16ReadedValLoc <=512)
    411c:	8f 89       	ldd	r24, Y+23	; 0x17
    411e:	98 8d       	ldd	r25, Y+24	; 0x18
    4120:	f2 e0       	ldi	r31, 0x02	; 2
    4122:	81 30       	cpi	r24, 0x01	; 1
    4124:	9f 07       	cpc	r25, r31
    4126:	68 f4       	brcc	.+26     	; 0x4142 <main+0x2fc>
		{
			LED_enuWriteValue(LED_u8NUM_0,LED_u8OFF);
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	60 e0       	ldi	r22, 0x00	; 0
    412c:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
			LED_enuWriteValue(LED_u8NUM_1,LED_u8ON);
    4130:	81 e0       	ldi	r24, 0x01	; 1
    4132:	61 e0       	ldi	r22, 0x01	; 1
    4134:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
			LED_enuWriteValue(LED_u8NUM_2,LED_u8ON);
    4138:	82 e0       	ldi	r24, 0x02	; 2
    413a:	61 e0       	ldi	r22, 0x01	; 1
    413c:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
    4140:	1f c0       	rjmp	.+62     	; 0x4180 <main+0x33a>
		}
		else if(u16ReadedValLoc <= 931)
    4142:	8f 89       	ldd	r24, Y+23	; 0x17
    4144:	98 8d       	ldd	r25, Y+24	; 0x18
    4146:	23 e0       	ldi	r18, 0x03	; 3
    4148:	84 3a       	cpi	r24, 0xA4	; 164
    414a:	92 07       	cpc	r25, r18
    414c:	68 f4       	brcc	.+26     	; 0x4168 <main+0x322>
		{
			LED_enuWriteValue(LED_u8NUM_0,LED_u8OFF);
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	60 e0       	ldi	r22, 0x00	; 0
    4152:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
			LED_enuWriteValue(LED_u8NUM_1,LED_u8OFF);
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	60 e0       	ldi	r22, 0x00	; 0
    415a:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
			LED_enuWriteValue(LED_u8NUM_2,LED_u8ON);
    415e:	82 e0       	ldi	r24, 0x02	; 2
    4160:	61 e0       	ldi	r22, 0x01	; 1
    4162:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
    4166:	0c c0       	rjmp	.+24     	; 0x4180 <main+0x33a>
		}
		else
		{
			LED_enuWriteValue(LED_u8NUM_0,LED_u8OFF);
    4168:	80 e0       	ldi	r24, 0x00	; 0
    416a:	60 e0       	ldi	r22, 0x00	; 0
    416c:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
			LED_enuWriteValue(LED_u8NUM_1,LED_u8OFF);
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	60 e0       	ldi	r22, 0x00	; 0
    4174:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
			LED_enuWriteValue(LED_u8NUM_2,LED_u8OFF);
    4178:	82 e0       	ldi	r24, 0x02	; 2
    417a:	60 e0       	ldi	r22, 0x00	; 0
    417c:	0e 94 ed 1a 	call	0x35da	; 0x35da <LED_enuWriteValue>
		}
		display_String(s1,0xc0);
    4180:	ce 01       	movw	r24, r28
    4182:	8f 96       	adiw	r24, 0x2f	; 47
    4184:	60 ec       	ldi	r22, 0xC0	; 192
    4186:	0e 94 47 21 	call	0x428e	; 0x428e <display_String>
		LCD_enuWriteCmd(LCD_u8NUM_0,0xC0+6);
    418a:	80 e0       	ldi	r24, 0x00	; 0
    418c:	66 ec       	ldi	r22, 0xC6	; 198
    418e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
		LCD_enuWritenumber(LCD_u8NUM_0,f32VoltLoc);
    4192:	29 89       	ldd	r18, Y+17	; 0x11
    4194:	3a 89       	ldd	r19, Y+18	; 0x12
    4196:	4b 89       	ldd	r20, Y+19	; 0x13
    4198:	5c 89       	ldd	r21, Y+20	; 0x14
    419a:	80 e0       	ldi	r24, 0x00	; 0
    419c:	ba 01       	movw	r22, r20
    419e:	a9 01       	movw	r20, r18
    41a0:	0e 94 54 18 	call	0x30a8	; 0x30a8 <LCD_enuWritenumber>
		if(u16ReadedValLocprev != u16ReadedValLoc)
    41a4:	2d 89       	ldd	r18, Y+21	; 0x15
    41a6:	3e 89       	ldd	r19, Y+22	; 0x16
    41a8:	8f 89       	ldd	r24, Y+23	; 0x17
    41aa:	98 8d       	ldd	r25, Y+24	; 0x18
    41ac:	28 17       	cp	r18, r24
    41ae:	39 07       	cpc	r19, r25
    41b0:	29 f0       	breq	.+10     	; 0x41bc <main+0x376>
		{
			display_String(s1,0xc0);
    41b2:	ce 01       	movw	r24, r28
    41b4:	8f 96       	adiw	r24, 0x2f	; 47
    41b6:	60 ec       	ldi	r22, 0xC0	; 192
    41b8:	0e 94 47 21 	call	0x428e	; 0x428e <display_String>
		}
		//switch to the LM35
		ADC_voidPinSwitch(1);
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	0e 94 92 08 	call	0x1124	; 0x1124 <ADC_voidPinSwitch>

		u16data = ADC_u16ReadSync();
    41c2:	0e 94 09 08 	call	0x1012	; 0x1012 <ADC_u16ReadSync>
    41c6:	90 93 bb 01 	sts	0x01BB, r25
    41ca:	80 93 ba 01 	sts	0x01BA, r24
		u32data = ADC_f32NumtoVolt(u16data);
    41ce:	80 91 ba 01 	lds	r24, 0x01BA
    41d2:	90 91 bb 01 	lds	r25, 0x01BB
    41d6:	0e 94 57 08 	call	0x10ae	; 0x10ae <ADC_f32NumtoVolt>
    41da:	dc 01       	movw	r26, r24
    41dc:	cb 01       	movw	r24, r22
    41de:	8a 8f       	std	Y+26, r24	; 0x1a
    41e0:	9b 8f       	std	Y+27, r25	; 0x1b
    41e2:	ac 8f       	std	Y+28, r26	; 0x1c
    41e4:	bd 8f       	std	Y+29, r27	; 0x1d
		display_String(s3,0x80);
    41e6:	ce 01       	movw	r24, r28
    41e8:	4f 96       	adiw	r24, 0x1f	; 31
    41ea:	60 e8       	ldi	r22, 0x80	; 128
    41ec:	0e 94 47 21 	call	0x428e	; 0x428e <display_String>
		LCD_enuWriteCmd(LCD_u8NUM_0,0x80+6);
    41f0:	80 e0       	ldi	r24, 0x00	; 0
    41f2:	66 e8       	ldi	r22, 0x86	; 134
    41f4:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
		LCD_enuWritenumber(LCD_u8NUM_0,(uint8)(u32data * 100));
    41f8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    41fa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    41fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    41fe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	48 ec       	ldi	r20, 0xC8	; 200
    4206:	52 e4       	ldi	r21, 0x42	; 66
    4208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	bc 01       	movw	r22, r24
    4212:	cd 01       	movw	r24, r26
    4214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	88 2f       	mov	r24, r24
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	a0 e0       	ldi	r26, 0x00	; 0
    4222:	b0 e0       	ldi	r27, 0x00	; 0
    4224:	bc 01       	movw	r22, r24
    4226:	cd 01       	movw	r24, r26
    4228:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    422c:	9b 01       	movw	r18, r22
    422e:	ac 01       	movw	r20, r24
    4230:	80 e0       	ldi	r24, 0x00	; 0
    4232:	ba 01       	movw	r22, r20
    4234:	a9 01       	movw	r20, r18
    4236:	0e 94 54 18 	call	0x30a8	; 0x30a8 <LCD_enuWritenumber>
		if((uint8)(u32data * 100) > 28)
    423a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    423c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    423e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4240:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	48 ec       	ldi	r20, 0xC8	; 200
    4248:	52 e4       	ldi	r21, 0x42	; 66
    424a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    424e:	dc 01       	movw	r26, r24
    4250:	cb 01       	movw	r24, r22
    4252:	bc 01       	movw	r22, r24
    4254:	cd 01       	movw	r24, r26
    4256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425a:	dc 01       	movw	r26, r24
    425c:	cb 01       	movw	r24, r22
    425e:	8d 31       	cpi	r24, 0x1D	; 29
    4260:	58 f0       	brcs	.+22     	; 0x4278 <main+0x432>
		{
			//open air conditioner
			tenu_Relay_enu_on(RELAY_u8NUM_0);
    4262:	80 e0       	ldi	r24, 0x00	; 0
    4264:	0e 94 a1 1b 	call	0x3742	; 0x3742 <tenu_Relay_enu_on>
			//close window because we opened air conditioner
			SERVO_voidMove(SERVO_u8NUM_0,SERVO_MOVE_TO_180);
    4268:	80 e0       	ldi	r24, 0x00	; 0
    426a:	40 e0       	ldi	r20, 0x00	; 0
    426c:	50 e0       	ldi	r21, 0x00	; 0
    426e:	60 e2       	ldi	r22, 0x20	; 32
    4270:	71 e4       	ldi	r23, 0x41	; 65
    4272:	0e 94 78 21 	call	0x42f0	; 0x42f0 <SERVO_voidMove>
    4276:	91 ce       	rjmp	.-734    	; 0x3f9a <main+0x154>
		}
		else
		{
			// close air conditioner
			tenu_Relay_enu_off(RELAY_u8NUM_0);
    4278:	80 e0       	ldi	r24, 0x00	; 0
    427a:	0e 94 bf 1b 	call	0x377e	; 0x377e <tenu_Relay_enu_off>
			//open window
			SERVO_voidMove(SERVO_u8NUM_0,SERVO_MOVE_TO_0);
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	40 e0       	ldi	r20, 0x00	; 0
    4282:	50 e0       	ldi	r21, 0x00	; 0
    4284:	60 e0       	ldi	r22, 0x00	; 0
    4286:	70 e0       	ldi	r23, 0x00	; 0
    4288:	0e 94 78 21 	call	0x42f0	; 0x42f0 <SERVO_voidMove>
    428c:	86 ce       	rjmp	.-756    	; 0x3f9a <main+0x154>

0000428e <display_String>:
		}

	}
}
void display_String(char *s, uint8 u8CmdCpy)
{
    428e:	df 93       	push	r29
    4290:	cf 93       	push	r28
    4292:	00 d0       	rcall	.+0      	; 0x4294 <display_String+0x6>
    4294:	00 d0       	rcall	.+0      	; 0x4296 <display_String+0x8>
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
    429a:	9b 83       	std	Y+3, r25	; 0x03
    429c:	8a 83       	std	Y+2, r24	; 0x02
    429e:	6c 83       	std	Y+4, r22	; 0x04
	uint8 u8CntrLoc = 0;
    42a0:	19 82       	std	Y+1, r1	; 0x01
	LCD_enuWriteCmd(LCD_u8NUM_0,u8CmdCpy);
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	6c 81       	ldd	r22, Y+4	; 0x04
    42a6:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_enuWriteCmd>
    42aa:	10 c0       	rjmp	.+32     	; 0x42cc <display_String+0x3e>
	while(s[u8CntrLoc] != '\0')
	{
		LCD_enuWriteChar(LCD_u8NUM_0,s[u8CntrLoc]);
    42ac:	89 81       	ldd	r24, Y+1	; 0x01
    42ae:	28 2f       	mov	r18, r24
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	8a 81       	ldd	r24, Y+2	; 0x02
    42b4:	9b 81       	ldd	r25, Y+3	; 0x03
    42b6:	fc 01       	movw	r30, r24
    42b8:	e2 0f       	add	r30, r18
    42ba:	f3 1f       	adc	r31, r19
    42bc:	90 81       	ld	r25, Z
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	69 2f       	mov	r22, r25
    42c2:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_enuWriteChar>
		u8CntrLoc++;
    42c6:	89 81       	ldd	r24, Y+1	; 0x01
    42c8:	8f 5f       	subi	r24, 0xFF	; 255
    42ca:	89 83       	std	Y+1, r24	; 0x01
}
void display_String(char *s, uint8 u8CmdCpy)
{
	uint8 u8CntrLoc = 0;
	LCD_enuWriteCmd(LCD_u8NUM_0,u8CmdCpy);
	while(s[u8CntrLoc] != '\0')
    42cc:	89 81       	ldd	r24, Y+1	; 0x01
    42ce:	28 2f       	mov	r18, r24
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	8a 81       	ldd	r24, Y+2	; 0x02
    42d4:	9b 81       	ldd	r25, Y+3	; 0x03
    42d6:	fc 01       	movw	r30, r24
    42d8:	e2 0f       	add	r30, r18
    42da:	f3 1f       	adc	r31, r19
    42dc:	80 81       	ld	r24, Z
    42de:	88 23       	and	r24, r24
    42e0:	29 f7       	brne	.-54     	; 0x42ac <display_String+0x1e>
	{
		LCD_enuWriteChar(LCD_u8NUM_0,s[u8CntrLoc]);
		u8CntrLoc++;
	}
}
    42e2:	0f 90       	pop	r0
    42e4:	0f 90       	pop	r0
    42e6:	0f 90       	pop	r0
    42e8:	0f 90       	pop	r0
    42ea:	cf 91       	pop	r28
    42ec:	df 91       	pop	r29
    42ee:	08 95       	ret

000042f0 <SERVO_voidMove>:

#include "servo.h"
#include "servo_cfg.h"
#include "servo_priv.h"
void SERVO_voidMove(uint8 ServoNumCpy,float32 f32angleCpy)
{
    42f0:	df 93       	push	r29
    42f2:	cf 93       	push	r28
    42f4:	00 d0       	rcall	.+0      	; 0x42f6 <SERVO_voidMove+0x6>
    42f6:	00 d0       	rcall	.+0      	; 0x42f8 <SERVO_voidMove+0x8>
    42f8:	0f 92       	push	r0
    42fa:	cd b7       	in	r28, 0x3d	; 61
    42fc:	de b7       	in	r29, 0x3e	; 62
    42fe:	89 83       	std	Y+1, r24	; 0x01
    4300:	4a 83       	std	Y+2, r20	; 0x02
    4302:	5b 83       	std	Y+3, r21	; 0x03
    4304:	6c 83       	std	Y+4, r22	; 0x04
    4306:	7d 83       	std	Y+5, r23	; 0x05

	arrPtoFunc[ServoNumCpy](f32angleCpy);
    4308:	89 81       	ldd	r24, Y+1	; 0x01
    430a:	88 2f       	mov	r24, r24
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	88 0f       	add	r24, r24
    4310:	99 1f       	adc	r25, r25
    4312:	fc 01       	movw	r30, r24
    4314:	e6 55       	subi	r30, 0x56	; 86
    4316:	fe 4f       	sbci	r31, 0xFE	; 254
    4318:	01 90       	ld	r0, Z+
    431a:	f0 81       	ld	r31, Z
    431c:	e0 2d       	mov	r30, r0
    431e:	8a 81       	ldd	r24, Y+2	; 0x02
    4320:	9b 81       	ldd	r25, Y+3	; 0x03
    4322:	ac 81       	ldd	r26, Y+4	; 0x04
    4324:	bd 81       	ldd	r27, Y+5	; 0x05
    4326:	bc 01       	movw	r22, r24
    4328:	cd 01       	movw	r24, r26
    432a:	09 95       	icall
}
    432c:	0f 90       	pop	r0
    432e:	0f 90       	pop	r0
    4330:	0f 90       	pop	r0
    4332:	0f 90       	pop	r0
    4334:	0f 90       	pop	r0
    4336:	cf 91       	pop	r28
    4338:	df 91       	pop	r29
    433a:	08 95       	ret

0000433c <__divmodhi4>:
    433c:	97 fb       	bst	r25, 7
    433e:	09 2e       	mov	r0, r25
    4340:	07 26       	eor	r0, r23
    4342:	0a d0       	rcall	.+20     	; 0x4358 <__divmodhi4_neg1>
    4344:	77 fd       	sbrc	r23, 7
    4346:	04 d0       	rcall	.+8      	; 0x4350 <__divmodhi4_neg2>
    4348:	0c d0       	rcall	.+24     	; 0x4362 <__udivmodhi4>
    434a:	06 d0       	rcall	.+12     	; 0x4358 <__divmodhi4_neg1>
    434c:	00 20       	and	r0, r0
    434e:	1a f4       	brpl	.+6      	; 0x4356 <__divmodhi4_exit>

00004350 <__divmodhi4_neg2>:
    4350:	70 95       	com	r23
    4352:	61 95       	neg	r22
    4354:	7f 4f       	sbci	r23, 0xFF	; 255

00004356 <__divmodhi4_exit>:
    4356:	08 95       	ret

00004358 <__divmodhi4_neg1>:
    4358:	f6 f7       	brtc	.-4      	; 0x4356 <__divmodhi4_exit>
    435a:	90 95       	com	r25
    435c:	81 95       	neg	r24
    435e:	9f 4f       	sbci	r25, 0xFF	; 255
    4360:	08 95       	ret

00004362 <__udivmodhi4>:
    4362:	aa 1b       	sub	r26, r26
    4364:	bb 1b       	sub	r27, r27
    4366:	51 e1       	ldi	r21, 0x11	; 17
    4368:	07 c0       	rjmp	.+14     	; 0x4378 <__udivmodhi4_ep>

0000436a <__udivmodhi4_loop>:
    436a:	aa 1f       	adc	r26, r26
    436c:	bb 1f       	adc	r27, r27
    436e:	a6 17       	cp	r26, r22
    4370:	b7 07       	cpc	r27, r23
    4372:	10 f0       	brcs	.+4      	; 0x4378 <__udivmodhi4_ep>
    4374:	a6 1b       	sub	r26, r22
    4376:	b7 0b       	sbc	r27, r23

00004378 <__udivmodhi4_ep>:
    4378:	88 1f       	adc	r24, r24
    437a:	99 1f       	adc	r25, r25
    437c:	5a 95       	dec	r21
    437e:	a9 f7       	brne	.-22     	; 0x436a <__udivmodhi4_loop>
    4380:	80 95       	com	r24
    4382:	90 95       	com	r25
    4384:	bc 01       	movw	r22, r24
    4386:	cd 01       	movw	r24, r26
    4388:	08 95       	ret

0000438a <__prologue_saves__>:
    438a:	2f 92       	push	r2
    438c:	3f 92       	push	r3
    438e:	4f 92       	push	r4
    4390:	5f 92       	push	r5
    4392:	6f 92       	push	r6
    4394:	7f 92       	push	r7
    4396:	8f 92       	push	r8
    4398:	9f 92       	push	r9
    439a:	af 92       	push	r10
    439c:	bf 92       	push	r11
    439e:	cf 92       	push	r12
    43a0:	df 92       	push	r13
    43a2:	ef 92       	push	r14
    43a4:	ff 92       	push	r15
    43a6:	0f 93       	push	r16
    43a8:	1f 93       	push	r17
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	cd b7       	in	r28, 0x3d	; 61
    43b0:	de b7       	in	r29, 0x3e	; 62
    43b2:	ca 1b       	sub	r28, r26
    43b4:	db 0b       	sbc	r29, r27
    43b6:	0f b6       	in	r0, 0x3f	; 63
    43b8:	f8 94       	cli
    43ba:	de bf       	out	0x3e, r29	; 62
    43bc:	0f be       	out	0x3f, r0	; 63
    43be:	cd bf       	out	0x3d, r28	; 61
    43c0:	09 94       	ijmp

000043c2 <__epilogue_restores__>:
    43c2:	2a 88       	ldd	r2, Y+18	; 0x12
    43c4:	39 88       	ldd	r3, Y+17	; 0x11
    43c6:	48 88       	ldd	r4, Y+16	; 0x10
    43c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    43ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    43cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    43ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    43d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    43d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    43d4:	b9 84       	ldd	r11, Y+9	; 0x09
    43d6:	c8 84       	ldd	r12, Y+8	; 0x08
    43d8:	df 80       	ldd	r13, Y+7	; 0x07
    43da:	ee 80       	ldd	r14, Y+6	; 0x06
    43dc:	fd 80       	ldd	r15, Y+5	; 0x05
    43de:	0c 81       	ldd	r16, Y+4	; 0x04
    43e0:	1b 81       	ldd	r17, Y+3	; 0x03
    43e2:	aa 81       	ldd	r26, Y+2	; 0x02
    43e4:	b9 81       	ldd	r27, Y+1	; 0x01
    43e6:	ce 0f       	add	r28, r30
    43e8:	d1 1d       	adc	r29, r1
    43ea:	0f b6       	in	r0, 0x3f	; 63
    43ec:	f8 94       	cli
    43ee:	de bf       	out	0x3e, r29	; 62
    43f0:	0f be       	out	0x3f, r0	; 63
    43f2:	cd bf       	out	0x3d, r28	; 61
    43f4:	ed 01       	movw	r28, r26
    43f6:	08 95       	ret

000043f8 <_exit>:
    43f8:	f8 94       	cli

000043fa <__stop_program>:
    43fa:	ff cf       	rjmp	.-2      	; 0x43fa <__stop_program>
