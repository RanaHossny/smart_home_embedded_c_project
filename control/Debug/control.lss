
control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000441e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  0000441e  000044b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  0080017c  0080017c  000045ce  2**0
                  ALLOC
  3 .stab         0000363c  00000000  00000000  000045d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000171d  00000000  00000000  00007c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00009329  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  000094e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  000096fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000bd0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000d1dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000e4e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000e9cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f3e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <__vector_10>
      2c:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <main>
      8a:	0c 94 0d 22 	jmp	0x441a	; 0x441a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fa 21 	jmp	0x43f4	; 0x43f4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 df 21 	jmp	0x43be	; 0x43be <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 fb 21 	jmp	0x43f6	; 0x43f6 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 e6 21 	jmp	0x43cc	; 0x43cc <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 02 22 	jmp	0x4404	; 0x4404 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 fa 21 	jmp	0x43f4	; 0x43f4 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <DIO_voidInit>:
#include  "DIO_priv.h"

/* Description: function init is used  to scan the configuration from the user    */

void DIO_voidInit(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = CONC(DIO_u8DIR_PIN_7,DIO_u8DIR_PIN_6,DIO_u8DIR_PIN_5,DIO_u8DIR_PIN_4,DIO_u8DIR_PIN_3,DIO_u8DIR_PIN_2,DIO_u8DIR_PIN_1,DIO_u8DIR_PIN_0);
     ef2:	ea e3       	ldi	r30, 0x3A	; 58
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	80 83       	st	Z, r24
	DDRB = CONC(DIO_u8DIR_PIN_15,DIO_u8DIR_PIN_14,DIO_u8DIR_PIN_13,DIO_u8DIR_PIN_12,DIO_u8DIR_PIN_11,DIO_u8DIR_PIN_10,DIO_u8DIR_PIN_9,DIO_u8DIR_PIN_8);
     efa:	e7 e3       	ldi	r30, 0x37	; 55
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	80 83       	st	Z, r24
	DDRC = CONC(DIO_u8DIR_PIN_23,DIO_u8DIR_PIN_22,DIO_u8DIR_PIN_21,DIO_u8DIR_PIN_20,DIO_u8DIR_PIN_19,DIO_u8DIR_PIN_18,DIO_u8DIR_PIN_17,DIO_u8DIR_PIN_16);
     f02:	e4 e3       	ldi	r30, 0x34	; 52
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	80 83       	st	Z, r24
	DDRD = CONC(DIO_u8DIR_PIN_31,DIO_u8DIR_PIN_30,DIO_u8DIR_PIN_29,DIO_u8DIR_PIN_28,DIO_u8DIR_PIN_27,DIO_u8DIR_PIN_26,DIO_u8DIR_PIN_25,DIO_u8DIR_PIN_24);
     f0a:	e1 e3       	ldi	r30, 0x31	; 49
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	8a ef       	ldi	r24, 0xFA	; 250
     f10:	80 83       	st	Z, r24
	
}
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <DIO_enuWritePin>:

/* Description : function write DIO_u8HIGH or DIO_u8LOW on Pin start 0 to 31       */
tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy , uint8 u8PinValueCpy)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <DIO_enuWritePin+0x6>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <DIO_enuWritePin+0x8>
     f20:	0f 92       	push	r0
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	8a 83       	std	Y+2, r24	; 0x02
     f28:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStatusLoc = E_OK ;
     f2a:	19 82       	std	Y+1, r1	; 0x01
	
	switch (u8PinValueCpy)
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	3d 83       	std	Y+5, r19	; 0x05
     f34:	2c 83       	std	Y+4, r18	; 0x04
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	09 f4       	brne	.+2      	; 0xf40 <DIO_enuWritePin+0x28>
     f3e:	77 c0       	rjmp	.+238    	; 0x102e <DIO_enuWritePin+0x116>
     f40:	2c 81       	ldd	r18, Y+4	; 0x04
     f42:	3d 81       	ldd	r19, Y+5	; 0x05
     f44:	21 30       	cpi	r18, 0x01	; 1
     f46:	31 05       	cpc	r19, r1
     f48:	09 f0       	breq	.+2      	; 0xf4c <DIO_enuWritePin+0x34>
     f4a:	e6 c0       	rjmp	.+460    	; 0x1118 <DIO_enuWritePin+0x200>
		{
			case DIO_u8HIGH :
				if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	88 30       	cpi	r24, 0x08	; 8
     f50:	a0 f4       	brcc	.+40     	; 0xf7a <DIO_enuWritePin+0x62>
				{
					SET_BIT(ODRA , u8PinNumCpy ) ;	
     f52:	ab e3       	ldi	r26, 0x3B	; 59
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	eb e3       	ldi	r30, 0x3B	; 59
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_enuWritePin+0x58>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_enuWritePin+0x54>
     f74:	84 2b       	or	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	d1 c0       	rjmp	.+418    	; 0x111c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	88 30       	cpi	r24, 0x08	; 8
     f7e:	d0 f0       	brcs	.+52     	; 0xfb4 <DIO_enuWritePin+0x9c>
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	80 31       	cpi	r24, 0x10	; 16
     f84:	b8 f4       	brcc	.+46     	; 0xfb4 <DIO_enuWritePin+0x9c>
				{
					SET_BIT(ODRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
     f86:	a8 e3       	ldi	r26, 0x38	; 56
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e8 e3       	ldi	r30, 0x38	; 56
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9c 01       	movw	r18, r24
     f9a:	27 70       	andi	r18, 0x07	; 7
     f9c:	30 70       	andi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_enuWritePin+0x92>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_enuWritePin+0x8e>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	b4 c0       	rjmp	.+360    	; 0x111c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	80 31       	cpi	r24, 0x10	; 16
     fb8:	d0 f0       	brcs	.+52     	; 0xfee <DIO_enuWritePin+0xd6>
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	88 31       	cpi	r24, 0x18	; 24
     fbe:	b8 f4       	brcc	.+46     	; 0xfee <DIO_enuWritePin+0xd6>
				{
					SET_BIT(ODRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
     fc0:	a5 e3       	ldi	r26, 0x35	; 53
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e5 e3       	ldi	r30, 0x35	; 53
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	9c 01       	movw	r18, r24
     fd4:	27 70       	andi	r18, 0x07	; 7
     fd6:	30 70       	andi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_enuWritePin+0xcc>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_enuWritePin+0xc8>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	97 c0       	rjmp	.+302    	; 0x111c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	88 31       	cpi	r24, 0x18	; 24
     ff2:	d0 f0       	brcs	.+52     	; 0x1028 <DIO_enuWritePin+0x110>
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	80 32       	cpi	r24, 0x20	; 32
     ff8:	b8 f4       	brcc	.+46     	; 0x1028 <DIO_enuWritePin+0x110>
				{
					SET_BIT(ODRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
     ffa:	a2 e3       	ldi	r26, 0x32	; 50
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e2 e3       	ldi	r30, 0x32	; 50
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9c 01       	movw	r18, r24
    100e:	27 70       	andi	r18, 0x07	; 7
    1010:	30 70       	andi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_enuWritePin+0x106>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_enuWritePin+0x102>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	7a c0       	rjmp	.+244    	; 0x111c <DIO_enuWritePin+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	77 c0       	rjmp	.+238    	; 0x111c <DIO_enuWritePin+0x204>
				}
			break ;
			case DIO_u8LOW :
				if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	88 30       	cpi	r24, 0x08	; 8
    1032:	a8 f4       	brcc	.+42     	; 0x105e <DIO_enuWritePin+0x146>
				{		
					CLR_BIT(ODRA , u8PinNumCpy ) ;
    1034:	ab e3       	ldi	r26, 0x3B	; 59
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	eb e3       	ldi	r30, 0x3B	; 59
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_enuWritePin+0x13a>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_enuWritePin+0x136>
    1056:	80 95       	com	r24
    1058:	84 23       	and	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	5f c0       	rjmp	.+190    	; 0x111c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	88 30       	cpi	r24, 0x08	; 8
    1062:	d8 f0       	brcs	.+54     	; 0x109a <DIO_enuWritePin+0x182>
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	80 31       	cpi	r24, 0x10	; 16
    1068:	c0 f4       	brcc	.+48     	; 0x109a <DIO_enuWritePin+0x182>
				{
					CLR_BIT(ODRB , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    106a:	a8 e3       	ldi	r26, 0x38	; 56
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e8 e3       	ldi	r30, 0x38	; 56
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9c 01       	movw	r18, r24
    107e:	27 70       	andi	r18, 0x07	; 7
    1080:	30 70       	andi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_enuWritePin+0x176>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_enuWritePin+0x172>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	41 c0       	rjmp	.+130    	; 0x111c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	80 31       	cpi	r24, 0x10	; 16
    109e:	d8 f0       	brcs	.+54     	; 0x10d6 <DIO_enuWritePin+0x1be>
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	88 31       	cpi	r24, 0x18	; 24
    10a4:	c0 f4       	brcc	.+48     	; 0x10d6 <DIO_enuWritePin+0x1be>
				{
					CLR_BIT(ODRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    10a6:	a5 e3       	ldi	r26, 0x35	; 53
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e3       	ldi	r30, 0x35	; 53
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9c 01       	movw	r18, r24
    10ba:	27 70       	andi	r18, 0x07	; 7
    10bc:	30 70       	andi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_enuWritePin+0x1b2>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_enuWritePin+0x1ae>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	23 c0       	rjmp	.+70     	; 0x111c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	88 31       	cpi	r24, 0x18	; 24
    10da:	d8 f0       	brcs	.+54     	; 0x1112 <DIO_enuWritePin+0x1fa>
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	80 32       	cpi	r24, 0x20	; 32
    10e0:	c0 f4       	brcc	.+48     	; 0x1112 <DIO_enuWritePin+0x1fa>
				{
					CLR_BIT(ODRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    10e2:	a2 e3       	ldi	r26, 0x32	; 50
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e2 e3       	ldi	r30, 0x32	; 50
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9c 01       	movw	r18, r24
    10f6:	27 70       	andi	r18, 0x07	; 7
    10f8:	30 70       	andi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_enuWritePin+0x1ee>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_enuWritePin+0x1ea>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	05 c0       	rjmp	.+10     	; 0x111c <DIO_enuWritePin+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_enuWritePin+0x204>
				}
			
			break ;
			default :
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	89 83       	std	Y+1, r24	; 0x01
			break ;
			
		}
	
	return enuReturnStatusLoc ;
    111c:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <DIO_enuReadPin>:

/* Description : function read the values  on Pin  0 to 31  and return the error state     */
tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy , uint8 * pu8PinValueCpy)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <DIO_enuReadPin+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <DIO_enuReadPin+0x8>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	8a 83       	std	Y+2, r24	; 0x02
    113c:	7c 83       	std	Y+4, r23	; 0x04
    113e:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    1140:	19 82       	std	Y+1, r1	; 0x01
	
	if (pu8PinValueCpy != NULL_PTR)
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	09 f4       	brne	.+2      	; 0x114c <DIO_enuReadPin+0x1e>
    114a:	6e c0       	rjmp	.+220    	; 0x1228 <DIO_enuReadPin+0xfa>
	{
		     if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	88 30       	cpi	r24, 0x08	; 8
    1150:	a0 f4       	brcc	.+40     	; 0x117a <DIO_enuReadPin+0x4c>
				{
					*pu8PinValueCpy = GET_BIT(IDRA , u8PinNumCpy ) ;	
    1152:	e9 e3       	ldi	r30, 0x39	; 57
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a9 01       	movw	r20, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_enuReadPin+0x3c>
    1166:	55 95       	asr	r21
    1168:	47 95       	ror	r20
    116a:	8a 95       	dec	r24
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_enuReadPin+0x38>
    116e:	ca 01       	movw	r24, r20
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	eb 81       	ldd	r30, Y+3	; 0x03
    1174:	fc 81       	ldd	r31, Y+4	; 0x04
    1176:	80 83       	st	Z, r24
    1178:	59 c0       	rjmp	.+178    	; 0x122c <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	88 30       	cpi	r24, 0x08	; 8
    117e:	c8 f0       	brcs	.+50     	; 0x11b2 <DIO_enuReadPin+0x84>
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 31       	cpi	r24, 0x10	; 16
    1184:	b0 f4       	brcc	.+44     	; 0x11b2 <DIO_enuReadPin+0x84>
				{
					*pu8PinValueCpy = GET_BIT(IDRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    1186:	e6 e3       	ldi	r30, 0x36	; 54
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	88 2f       	mov	r24, r24
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	87 70       	andi	r24, 0x07	; 7
    1198:	90 70       	andi	r25, 0x00	; 0
    119a:	a9 01       	movw	r20, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_enuReadPin+0x74>
    119e:	55 95       	asr	r21
    11a0:	47 95       	ror	r20
    11a2:	8a 95       	dec	r24
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_enuReadPin+0x70>
    11a6:	ca 01       	movw	r24, r20
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	eb 81       	ldd	r30, Y+3	; 0x03
    11ac:	fc 81       	ldd	r31, Y+4	; 0x04
    11ae:	80 83       	st	Z, r24
    11b0:	3d c0       	rjmp	.+122    	; 0x122c <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	80 31       	cpi	r24, 0x10	; 16
    11b6:	c8 f0       	brcs	.+50     	; 0x11ea <DIO_enuReadPin+0xbc>
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	88 31       	cpi	r24, 0x18	; 24
    11bc:	b0 f4       	brcc	.+44     	; 0x11ea <DIO_enuReadPin+0xbc>
				{
					*pu8PinValueCpy = GET_BIT(IDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    11be:	e3 e3       	ldi	r30, 0x33	; 51
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	87 70       	andi	r24, 0x07	; 7
    11d0:	90 70       	andi	r25, 0x00	; 0
    11d2:	a9 01       	movw	r20, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_enuReadPin+0xac>
    11d6:	55 95       	asr	r21
    11d8:	47 95       	ror	r20
    11da:	8a 95       	dec	r24
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_enuReadPin+0xa8>
    11de:	ca 01       	movw	r24, r20
    11e0:	81 70       	andi	r24, 0x01	; 1
    11e2:	eb 81       	ldd	r30, Y+3	; 0x03
    11e4:	fc 81       	ldd	r31, Y+4	; 0x04
    11e6:	80 83       	st	Z, r24
    11e8:	21 c0       	rjmp	.+66     	; 0x122c <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	88 31       	cpi	r24, 0x18	; 24
    11ee:	c8 f0       	brcs	.+50     	; 0x1222 <DIO_enuReadPin+0xf4>
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	80 32       	cpi	r24, 0x20	; 32
    11f4:	b0 f4       	brcc	.+44     	; 0x1222 <DIO_enuReadPin+0xf4>
				{
					*pu8PinValueCpy = GET_BIT(IDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    11f6:	e0 e3       	ldi	r30, 0x30	; 48
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	87 70       	andi	r24, 0x07	; 7
    1208:	90 70       	andi	r25, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO_enuReadPin+0xe4>
    120e:	55 95       	asr	r21
    1210:	47 95       	ror	r20
    1212:	8a 95       	dec	r24
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO_enuReadPin+0xe0>
    1216:	ca 01       	movw	r24, r20
    1218:	81 70       	andi	r24, 0x01	; 1
    121a:	eb 81       	ldd	r30, Y+3	; 0x03
    121c:	fc 81       	ldd	r31, Y+4	; 0x04
    121e:	80 83       	st	Z, r24
    1220:	05 c0       	rjmp	.+10     	; 0x122c <DIO_enuReadPin+0xfe>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_enuReadPin+0xfe>
				}
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStatusLoc ;
    122c:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <DIO_enuPullWrite>:
/* Description : function pullwrite ask to write a value of DIO_u8HIGH OR DIO_u8LOW in pin from 0 to 31            */
/* and return the error state                                                                                      */

tenuErrorStatus DIO_enuPullWrite(uint8 u8PinNumCpy , uint8 u8PinStateCpy)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <DIO_enuPullWrite+0x6>
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enuWritePin(u8PinNumCpy , u8PinStateCpy );
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	6a 81       	ldd	r22, Y+2	; 0x02
    124e:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <DIO_enuWriteBus>:

/* Description : function writebus used to write a value of DIO_u8HIGH OR DIO_u8LOW in many  pins from 0 to 31     */
/* and return the error state                                                                                      */

tenuErrorStatus DIO_enuWriteBus(tstrPinMapping * pastrPinMappingCpy , uint8 u8SizeCpy )
{
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <DIO_enuWriteBus+0xa>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <DIO_enuWriteBus+0xc>
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	9c 83       	std	Y+4, r25	; 0x04
    1270:	8b 83       	std	Y+3, r24	; 0x03
    1272:	6d 83       	std	Y+5, r22	; 0x05
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    1274:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	if(pastrPinMappingCpy !=NULL_PTR)
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	09 f4       	brne	.+2      	; 0x1280 <DIO_enuWriteBus+0x24>
    127e:	3f c0       	rjmp	.+126    	; 0x12fe <DIO_enuWriteBus+0xa2>
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS )
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	81 32       	cpi	r24, 0x21	; 33
    1284:	c8 f5       	brcc	.+114    	; 0x12f8 <DIO_enuWriteBus+0x9c>
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    1286:	19 82       	std	Y+1, r1	; 0x01
    1288:	32 c0       	rjmp	.+100    	; 0x12ee <DIO_enuWriteBus+0x92>
			{
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuWritePin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , pastrPinMappingCpy[u8CntrLoc].u8PinValue );
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	c9 01       	movw	r24, r18
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	28 0f       	add	r18, r24
    1298:	39 1f       	adc	r19, r25
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	8c 01       	movw	r16, r24
    12a0:	02 0f       	add	r16, r18
    12a2:	13 1f       	adc	r17, r19
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	c9 01       	movw	r24, r18
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	28 0f       	add	r18, r24
    12b2:	39 1f       	adc	r19, r25
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	fc 01       	movw	r30, r24
    12ba:	e2 0f       	add	r30, r18
    12bc:	f3 1f       	adc	r31, r19
    12be:	40 81       	ld	r20, Z
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	c9 01       	movw	r24, r18
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	28 0f       	add	r18, r24
    12ce:	39 1f       	adc	r19, r25
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	fc 01       	movw	r30, r24
    12d6:	e2 0f       	add	r30, r18
    12d8:	f3 1f       	adc	r31, r19
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	84 2f       	mov	r24, r20
    12de:	69 2f       	mov	r22, r25
    12e0:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
    12e4:	f8 01       	movw	r30, r16
    12e6:	82 83       	std	Z+2, r24	; 0x02
	uint8 u8CntrLoc ;
	if(pastrPinMappingCpy !=NULL_PTR)
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS )
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	8f 5f       	subi	r24, 0xFF	; 255
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	99 81       	ldd	r25, Y+1	; 0x01
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	98 17       	cp	r25, r24
    12f4:	50 f2       	brcs	.-108    	; 0x128a <DIO_enuWriteBus+0x2e>
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <DIO_enuWriteBus+0xa6>
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuWritePin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , pastrPinMappingCpy[u8CntrLoc].u8PinValue );
			}
		}
		else
		{
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    12f8:	82 e0       	ldi	r24, 0x02	; 2
    12fa:	8a 83       	std	Y+2, r24	; 0x02
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_enuWriteBus+0xa6>
		}
		
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	8a 83       	std	Y+2, r24	; 0x02
	}
	return enuReturnStatusLoc ;
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	08 95       	ret

00001318 <DIO_enuReadBus>:
/* Description : function readbus used to read a value of DIO_u8HIGH OR DIO_u8LOW in many  pins from 0 to 31       */
/* and return the error state                                                                                      */

tenuErrorStatus DIO_enuReadBus(tstrPinMapping * pastrPinMappingCpy , uint8 u8SizeCpy )
{
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <DIO_enuReadBus+0xa>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <DIO_enuReadBus+0xc>
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
    132e:	6d 83       	std	Y+5, r22	; 0x05
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    1330:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	
	if(pastrPinMappingCpy != NULL_PTR )
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	09 f4       	brne	.+2      	; 0x133c <DIO_enuReadBus+0x24>
    133a:	40 c0       	rjmp	.+128    	; 0x13bc <DIO_enuReadBus+0xa4>
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS)
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	81 32       	cpi	r24, 0x21	; 33
    1340:	d0 f5       	brcc	.+116    	; 0x13b6 <DIO_enuReadBus+0x9e>
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    1342:	19 82       	std	Y+1, r1	; 0x01
    1344:	33 c0       	rjmp	.+102    	; 0x13ac <DIO_enuReadBus+0x94>
			{
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuReadPin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , &(pastrPinMappingCpy[u8CntrLoc].u8PinValue) );
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	c9 01       	movw	r24, r18
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	28 0f       	add	r18, r24
    1354:	39 1f       	adc	r19, r25
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	8c 01       	movw	r16, r24
    135c:	02 0f       	add	r16, r18
    135e:	13 1f       	adc	r17, r19
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	c9 01       	movw	r24, r18
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	28 0f       	add	r18, r24
    136e:	39 1f       	adc	r19, r25
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	fc 01       	movw	r30, r24
    1376:	e2 0f       	add	r30, r18
    1378:	f3 1f       	adc	r31, r19
    137a:	40 81       	ld	r20, Z
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	c9 01       	movw	r24, r18
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	28 0f       	add	r18, r24
    138a:	39 1f       	adc	r19, r25
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	82 0f       	add	r24, r18
    1392:	93 1f       	adc	r25, r19
    1394:	9c 01       	movw	r18, r24
    1396:	2f 5f       	subi	r18, 0xFF	; 255
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	84 2f       	mov	r24, r20
    139c:	b9 01       	movw	r22, r18
    139e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_enuReadPin>
    13a2:	f8 01       	movw	r30, r16
    13a4:	82 83       	std	Z+2, r24	; 0x02
	
	if(pastrPinMappingCpy != NULL_PTR )
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS)
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	8f 5f       	subi	r24, 0xFF	; 255
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	99 81       	ldd	r25, Y+1	; 0x01
    13ae:	8d 81       	ldd	r24, Y+5	; 0x05
    13b0:	98 17       	cp	r25, r24
    13b2:	48 f2       	brcs	.-110    	; 0x1346 <DIO_enuReadBus+0x2e>
    13b4:	05 c0       	rjmp	.+10     	; 0x13c0 <DIO_enuReadBus+0xa8>
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuReadPin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , &(pastrPinMappingCpy[u8CntrLoc].u8PinValue) );
			}
		}
		else
		{
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_enuReadBus+0xa8>
		}
		
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    13bc:	83 e0       	ldi	r24, 0x03	; 3
    13be:	8a 83       	std	Y+2, r24	; 0x02
	}
	return enuReturnStatusLoc ;
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	08 95       	ret

000013d6 <DIO_enuWritePinDir>:

/* Description : function writePinDir to used to select dir from DIO_u8OUTPUT and DIO_u8INPUT at pin from 0 to 31  */
/* and return the error state                                                                                      */

tenuErrorStatus DIO_enuWritePinDir(uint8 u8PinNumCpy , uint8 u8PinDirCpy)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <DIO_enuWritePinDir+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <DIO_enuWritePinDir+0x8>
    13de:	0f 92       	push	r0
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	8a 83       	std	Y+2, r24	; 0x02
    13e6:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStatusLoc = E_OK ;
    13e8:	19 82       	std	Y+1, r1	; 0x01
	
	switch (u8PinDirCpy)
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3d 83       	std	Y+5, r19	; 0x05
    13f2:	2c 83       	std	Y+4, r18	; 0x04
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	09 f4       	brne	.+2      	; 0x13fe <DIO_enuWritePinDir+0x28>
    13fc:	77 c0       	rjmp	.+238    	; 0x14ec <DIO_enuWritePinDir+0x116>
    13fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1400:	3d 81       	ldd	r19, Y+5	; 0x05
    1402:	21 30       	cpi	r18, 0x01	; 1
    1404:	31 05       	cpc	r19, r1
    1406:	09 f0       	breq	.+2      	; 0x140a <DIO_enuWritePinDir+0x34>
    1408:	e6 c0       	rjmp	.+460    	; 0x15d6 <DIO_enuWritePinDir+0x200>
		{
			case DIO_u8OUTPUT :
			     if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 30       	cpi	r24, 0x08	; 8
    140e:	a0 f4       	brcc	.+40     	; 0x1438 <DIO_enuWritePinDir+0x62>
				{
					SET_BIT(DDRA , u8PinNumCpy ) ;	
    1410:	aa e3       	ldi	r26, 0x3A	; 58
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ea e3       	ldi	r30, 0x3A	; 58
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_enuWritePinDir+0x58>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_enuWritePinDir+0x54>
    1432:	84 2b       	or	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	d1 c0       	rjmp	.+418    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	88 30       	cpi	r24, 0x08	; 8
    143c:	d0 f0       	brcs	.+52     	; 0x1472 <DIO_enuWritePinDir+0x9c>
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	80 31       	cpi	r24, 0x10	; 16
    1442:	b8 f4       	brcc	.+46     	; 0x1472 <DIO_enuWritePinDir+0x9c>
				{
					SET_BIT(DDRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    1444:	a7 e3       	ldi	r26, 0x37	; 55
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e7 e3       	ldi	r30, 0x37	; 55
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	88 2f       	mov	r24, r24
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9c 01       	movw	r18, r24
    1458:	27 70       	andi	r18, 0x07	; 7
    145a:	30 70       	andi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <DIO_enuWritePinDir+0x92>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <DIO_enuWritePinDir+0x8e>
    146c:	84 2b       	or	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	b4 c0       	rjmp	.+360    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	80 31       	cpi	r24, 0x10	; 16
    1476:	d0 f0       	brcs	.+52     	; 0x14ac <DIO_enuWritePinDir+0xd6>
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	88 31       	cpi	r24, 0x18	; 24
    147c:	b8 f4       	brcc	.+46     	; 0x14ac <DIO_enuWritePinDir+0xd6>
				{
					SET_BIT(DDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    147e:	a4 e3       	ldi	r26, 0x34	; 52
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e4 e3       	ldi	r30, 0x34	; 52
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9c 01       	movw	r18, r24
    1492:	27 70       	andi	r18, 0x07	; 7
    1494:	30 70       	andi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_enuWritePinDir+0xcc>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_enuWritePinDir+0xc8>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	97 c0       	rjmp	.+302    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	88 31       	cpi	r24, 0x18	; 24
    14b0:	d0 f0       	brcs	.+52     	; 0x14e6 <DIO_enuWritePinDir+0x110>
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	80 32       	cpi	r24, 0x20	; 32
    14b6:	b8 f4       	brcc	.+46     	; 0x14e6 <DIO_enuWritePinDir+0x110>
				{
					SET_BIT(DDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    14b8:	a1 e3       	ldi	r26, 0x31	; 49
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e1 e3       	ldi	r30, 0x31	; 49
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	9c 01       	movw	r18, r24
    14cc:	27 70       	andi	r18, 0x07	; 7
    14ce:	30 70       	andi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_enuWritePinDir+0x106>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_enuWritePinDir+0x102>
    14e0:	84 2b       	or	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	7a c0       	rjmp	.+244    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	77 c0       	rjmp	.+238    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
			
			break ;
			case DIO_u8INPUT :
			   if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	88 30       	cpi	r24, 0x08	; 8
    14f0:	a8 f4       	brcc	.+42     	; 0x151c <DIO_enuWritePinDir+0x146>
				{		
					CLR_BIT(DDRA , u8PinNumCpy ) ;
    14f2:	aa e3       	ldi	r26, 0x3A	; 58
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	ea e3       	ldi	r30, 0x3A	; 58
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_enuWritePinDir+0x13a>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_enuWritePinDir+0x136>
    1514:	80 95       	com	r24
    1516:	84 23       	and	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	5f c0       	rjmp	.+190    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	88 30       	cpi	r24, 0x08	; 8
    1520:	d8 f0       	brcs	.+54     	; 0x1558 <DIO_enuWritePinDir+0x182>
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	80 31       	cpi	r24, 0x10	; 16
    1526:	c0 f4       	brcc	.+48     	; 0x1558 <DIO_enuWritePinDir+0x182>
				{
					CLR_BIT(DDRB , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    1528:	a7 e3       	ldi	r26, 0x37	; 55
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e7 e3       	ldi	r30, 0x37	; 55
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	88 2f       	mov	r24, r24
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9c 01       	movw	r18, r24
    153c:	27 70       	andi	r18, 0x07	; 7
    153e:	30 70       	andi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <DIO_enuWritePinDir+0x176>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <DIO_enuWritePinDir+0x172>
    1550:	80 95       	com	r24
    1552:	84 23       	and	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	41 c0       	rjmp	.+130    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	80 31       	cpi	r24, 0x10	; 16
    155c:	d8 f0       	brcs	.+54     	; 0x1594 <DIO_enuWritePinDir+0x1be>
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	88 31       	cpi	r24, 0x18	; 24
    1562:	c0 f4       	brcc	.+48     	; 0x1594 <DIO_enuWritePinDir+0x1be>
				{
					CLR_BIT(DDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    1564:	a4 e3       	ldi	r26, 0x34	; 52
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e4 e3       	ldi	r30, 0x34	; 52
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	9c 01       	movw	r18, r24
    1578:	27 70       	andi	r18, 0x07	; 7
    157a:	30 70       	andi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_enuWritePinDir+0x1b2>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_enuWritePinDir+0x1ae>
    158c:	80 95       	com	r24
    158e:	84 23       	and	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	23 c0       	rjmp	.+70     	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	88 31       	cpi	r24, 0x18	; 24
    1598:	d8 f0       	brcs	.+54     	; 0x15d0 <DIO_enuWritePinDir+0x1fa>
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	80 32       	cpi	r24, 0x20	; 32
    159e:	c0 f4       	brcc	.+48     	; 0x15d0 <DIO_enuWritePinDir+0x1fa>
				{
					CLR_BIT(DDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    15a0:	a1 e3       	ldi	r26, 0x31	; 49
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e1 e3       	ldi	r30, 0x31	; 49
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9c 01       	movw	r18, r24
    15b4:	27 70       	andi	r18, 0x07	; 7
    15b6:	30 70       	andi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <DIO_enuWritePinDir+0x1ee>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <DIO_enuWritePinDir+0x1ea>
    15c8:	80 95       	com	r24
    15ca:	84 23       	and	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_enuWritePinDir+0x204>
				}
			break ;
			default :
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    15d6:	82 e0       	ldi	r24, 0x02	; 2
    15d8:	89 83       	std	Y+1, r24	; 0x01
			break ;
			
		}
	
	return enuReturnStatusLoc ;
    15da:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <DIO_enuTogglePin>:
/* Description : function togglePin to used to toggle pin from 0 and 31                                     */
/* and return the error state                                                                               */

tenuErrorStatus DIO_enuTogglePin(uint8 u8PinNumCpy)
{ tenuErrorStatus enuReturnStatusLoc = E_OK ;
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <DIO_enuTogglePin+0x6>
    15f2:	0f 92       	push	r0
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	19 82       	std	Y+1, r1	; 0x01
uint8 temp;
DIO_enuReadPin(u8PinNumCpy,&temp);
    15fc:	9e 01       	movw	r18, r28
    15fe:	2e 5f       	subi	r18, 0xFE	; 254
    1600:	3f 4f       	sbci	r19, 0xFF	; 255
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	b9 01       	movw	r22, r18
    1606:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_enuReadPin>
  if(u8PinNumCpy>=DIO_u8PIN_0 && u8PinNumCpy<= DIO_u8PIN_0){
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	88 23       	and	r24, r24
    160e:	a9 f4       	brne	.+42     	; 0x163a <DIO_enuTogglePin+0x4e>
	if(temp==DIO_u8HIGH){
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	31 f4       	brne	.+12     	; 0x1622 <DIO_enuTogglePin+0x36>
		enuReturnStatusLoc=DIO_enuWritePin(u8PinNumCpy,DIO_u8LOW);
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	0e c0       	rjmp	.+28     	; 0x163e <DIO_enuTogglePin+0x52>
	}
	else if(temp==DIO_u8LOW){
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	88 23       	and	r24, r24
    1626:	31 f4       	brne	.+12     	; 0x1634 <DIO_enuTogglePin+0x48>
		enuReturnStatusLoc= DIO_enuWritePin(u8PinNumCpy,DIO_u8HIGH);
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	05 c0       	rjmp	.+10     	; 0x163e <DIO_enuTogglePin+0x52>
	}
	else{
		enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_enuTogglePin+0x52>
	}

}
else{
enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;	
    163a:	82 e0       	ldi	r24, 0x02	; 2
    163c:	89 83       	std	Y+1, r24	; 0x01
}
	
	return enuReturnStatusLoc ;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <EXTINT0_voidInit>:


pf EXTINT0_pfCallback ;

void EXTINT0_voidInit(void)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
#if EXTINT0_SENSE_MODE == LOW_LEVEL
	CLR_BIT(MCUCR , 0) ;
	CLR_BIT(MCUCR , 1) ;
	
#elif EXTINT0_SENSE_MODE ==IOC 
	SET_BIT(MCUCR , 0) ;
    1654:	a5 e5       	ldi	r26, 0x55	; 85
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e5 e5       	ldi	r30, 0x55	; 85
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	81 60       	ori	r24, 0x01	; 1
    1660:	8c 93       	st	X, r24
	CLR_BIT(MCUCR , 1) ;
    1662:	a5 e5       	ldi	r26, 0x55	; 85
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e5 e5       	ldi	r30, 0x55	; 85
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	8d 7f       	andi	r24, 0xFD	; 253
    166e:	8c 93       	st	X, r24
#else
	SET_BIT(MCUCR , 0) ;
	SET_BIT(MCUCR , 1) ;
#endif 

	CLR_BIT(GICR,6); // Disable External interrupt 0
    1670:	ab e5       	ldi	r26, 0x5B	; 91
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	eb e5       	ldi	r30, 0x5B	; 91
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	8f 7b       	andi	r24, 0xBF	; 191
    167c:	8c 93       	st	X, r24
	SET_BIT(GIFR,6); //Clear External interrupt 0 Flag 
    167e:	aa e5       	ldi	r26, 0x5A	; 90
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	ea e5       	ldi	r30, 0x5A	; 90
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	80 64       	ori	r24, 0x40	; 64
    168a:	8c 93       	st	X, r24

}
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <EXTINT0_voidEnable>:

void EXTINT0_voidEnable(void)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,6);
    169a:	ab e5       	ldi	r26, 0x5B	; 91
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	eb e5       	ldi	r30, 0x5B	; 91
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	80 64       	ori	r24, 0x40	; 64
    16a6:	8c 93       	st	X, r24
}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <EXTINT0_voidDisable>:

void EXTINT0_voidDisable(void)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,6);
    16b6:	ab e5       	ldi	r26, 0x5B	; 91
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	eb e5       	ldi	r30, 0x5B	; 91
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	8f 7b       	andi	r24, 0xBF	; 191
    16c2:	8c 93       	st	X, r24
}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <EXTINT0_voidSetCallBack>:

void EXTINT0_voidSetCallBack(pf pfCallbackCpy)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <EXTINT0_voidSetCallBack+0x6>
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	89 83       	std	Y+1, r24	; 0x01
	EXTINT0_pfCallback = pfCallbackCpy ;
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	90 93 88 01 	sts	0x0188, r25
    16e0:	80 93 87 01 	sts	0x0187, r24
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <__vector_1>:

void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	11 24       	eor	r1, r1
    16f8:	2f 93       	push	r18
    16fa:	3f 93       	push	r19
    16fc:	4f 93       	push	r20
    16fe:	5f 93       	push	r21
    1700:	6f 93       	push	r22
    1702:	7f 93       	push	r23
    1704:	8f 93       	push	r24
    1706:	9f 93       	push	r25
    1708:	af 93       	push	r26
    170a:	bf 93       	push	r27
    170c:	ef 93       	push	r30
    170e:	ff 93       	push	r31
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
	EXTINT0_pfCallback();
    1718:	e0 91 87 01 	lds	r30, 0x0187
    171c:	f0 91 88 01 	lds	r31, 0x0188
    1720:	09 95       	icall
}
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	ff 91       	pop	r31
    1728:	ef 91       	pop	r30
    172a:	bf 91       	pop	r27
    172c:	af 91       	pop	r26
    172e:	9f 91       	pop	r25
    1730:	8f 91       	pop	r24
    1732:	7f 91       	pop	r23
    1734:	6f 91       	pop	r22
    1736:	5f 91       	pop	r21
    1738:	4f 91       	pop	r20
    173a:	3f 91       	pop	r19
    173c:	2f 91       	pop	r18
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <EXTINT0_voidSetSenseValue>:
void EXTINT0_voidSetSenseValue(uint8 u8SenseValueCpy){
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	0f 92       	push	r0
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	89 83       	std	Y+1, r24	; 0x01
	if(u8SenseValueCpy==FALLING_EDGE){
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	8a 30       	cpi	r24, 0x0A	; 10
    1758:	71 f4       	brne	.+28     	; 0x1776 <EXTINT0_voidSetSenseValue+0x2e>
	CLR_BIT(MCUCR , 0) ;
    175a:	a5 e5       	ldi	r26, 0x55	; 85
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e5 e5       	ldi	r30, 0x55	; 85
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	8e 7f       	andi	r24, 0xFE	; 254
    1766:	8c 93       	st	X, r24
	SET_BIT(MCUCR , 1) ;
    1768:	a5 e5       	ldi	r26, 0x55	; 85
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e5 e5       	ldi	r30, 0x55	; 85
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	82 60       	ori	r24, 0x02	; 2
    1774:	8c 93       	st	X, r24
		
	}
	if(u8SenseValueCpy==RISING_EDGE){
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	8f 30       	cpi	r24, 0x0F	; 15
    177a:	71 f4       	brne	.+28     	; 0x1798 <EXTINT0_voidSetSenseValue+0x50>
	SET_BIT(MCUCR , 0) ;
    177c:	a5 e5       	ldi	r26, 0x55	; 85
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e5 e5       	ldi	r30, 0x55	; 85
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	81 60       	ori	r24, 0x01	; 1
    1788:	8c 93       	st	X, r24
	SET_BIT(MCUCR , 1) ;
    178a:	a5 e5       	ldi	r26, 0x55	; 85
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e5 e5       	ldi	r30, 0x55	; 85
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	82 60       	ori	r24, 0x02	; 2
    1796:	8c 93       	st	X, r24
	}
	
}
    1798:	0f 90       	pop	r0
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <GIE_voidEnable>:
#include "GIE.h"
#include "GIE_cfg.h"
#include "GIE_priv.h"

void GIE_voidEnable(void)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    17a8:	af e5       	ldi	r26, 0x5F	; 95
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	ef e5       	ldi	r30, 0x5F	; 95
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	80 68       	ori	r24, 0x80	; 128
    17b4:	8c 93       	st	X, r24
}
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    17c4:	af e5       	ldi	r26, 0x5F	; 95
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	ef e5       	ldi	r30, 0x5F	; 95
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	8f 77       	andi	r24, 0x7F	; 127
    17d0:	8c 93       	st	X, r24
}
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <LCD_voidInit>:


static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy) ;

void LCD_voidInit(void) 
{
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	c6 5c       	subi	r28, 0xC6	; 198
    17e6:	d0 40       	sbci	r29, 0x00	; 0
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
    17f2:	fe 01       	movw	r30, r28
    17f4:	ea 53       	subi	r30, 0x3A	; 58
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	10 82       	st	Z, r1
    17fa:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <LCD_voidInit+0x15f4>
    17fe:	fe 01       	movw	r30, r28
    1800:	ef 53       	subi	r30, 0x3F	; 63
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a0 ef       	ldi	r26, 0xF0	; 240
    180a:	b1 e4       	ldi	r27, 0x41	; 65
    180c:	80 83       	st	Z, r24
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	a2 83       	std	Z+2, r26	; 0x02
    1812:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1814:	8e 01       	movw	r16, r28
    1816:	03 54       	subi	r16, 0x43	; 67
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	fe 01       	movw	r30, r28
    181c:	ef 53       	subi	r30, 0x3F	; 63
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	60 81       	ld	r22, Z
    1822:	71 81       	ldd	r23, Z+1	; 0x01
    1824:	82 81       	ldd	r24, Z+2	; 0x02
    1826:	93 81       	ldd	r25, Z+3	; 0x03
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	4a ef       	ldi	r20, 0xFA	; 250
    182e:	54 e4       	ldi	r21, 0x44	; 68
    1830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	f8 01       	movw	r30, r16
    183a:	80 83       	st	Z, r24
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	a2 83       	std	Z+2, r26	; 0x02
    1840:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1842:	fe 01       	movw	r30, r28
    1844:	e3 54       	subi	r30, 0x43	; 67
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	60 81       	ld	r22, Z
    184a:	71 81       	ldd	r23, Z+1	; 0x01
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    185c:	88 23       	and	r24, r24
    185e:	44 f4       	brge	.+16     	; 0x1870 <LCD_voidInit+0x98>
		__ticks = 1;
    1860:	fe 01       	movw	r30, r28
    1862:	e5 54       	subi	r30, 0x45	; 69
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	80 83       	st	Z, r24
    186e:	64 c0       	rjmp	.+200    	; 0x1938 <LCD_voidInit+0x160>
	else if (__tmp > 65535)
    1870:	fe 01       	movw	r30, r28
    1872:	e3 54       	subi	r30, 0x43	; 67
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	3f ef       	ldi	r19, 0xFF	; 255
    1882:	4f e7       	ldi	r20, 0x7F	; 127
    1884:	57 e4       	ldi	r21, 0x47	; 71
    1886:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    188a:	18 16       	cp	r1, r24
    188c:	0c f0       	brlt	.+2      	; 0x1890 <LCD_voidInit+0xb8>
    188e:	43 c0       	rjmp	.+134    	; 0x1916 <LCD_voidInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1890:	fe 01       	movw	r30, r28
    1892:	ef 53       	subi	r30, 0x3F	; 63
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	60 81       	ld	r22, Z
    1898:	71 81       	ldd	r23, Z+1	; 0x01
    189a:	82 81       	ldd	r24, Z+2	; 0x02
    189c:	93 81       	ldd	r25, Z+3	; 0x03
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e2       	ldi	r20, 0x20	; 32
    18a4:	51 e4       	ldi	r21, 0x41	; 65
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8e 01       	movw	r16, r28
    18b0:	05 54       	subi	r16, 0x45	; 69
    18b2:	1f 4f       	sbci	r17, 0xFF	; 255
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	f8 01       	movw	r30, r16
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	80 83       	st	Z, r24
    18c6:	1f c0       	rjmp	.+62     	; 0x1906 <LCD_voidInit+0x12e>
    18c8:	fe 01       	movw	r30, r28
    18ca:	e7 54       	subi	r30, 0x47	; 71
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	88 ec       	ldi	r24, 0xC8	; 200
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18d6:	fe 01       	movw	r30, r28
    18d8:	e7 54       	subi	r30, 0x47	; 71
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 81       	ld	r24, Z
    18de:	91 81       	ldd	r25, Z+1	; 0x01
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <LCD_voidInit+0x108>
    18e4:	fe 01       	movw	r30, r28
    18e6:	e7 54       	subi	r30, 0x47	; 71
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	91 83       	std	Z+1, r25	; 0x01
    18ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ee:	de 01       	movw	r26, r28
    18f0:	a5 54       	subi	r26, 0x45	; 69
    18f2:	bf 4f       	sbci	r27, 0xFF	; 255
    18f4:	fe 01       	movw	r30, r28
    18f6:	e5 54       	subi	r30, 0x45	; 69
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	11 96       	adiw	r26, 0x01	; 1
    1902:	9c 93       	st	X, r25
    1904:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1906:	fe 01       	movw	r30, r28
    1908:	e5 54       	subi	r30, 0x45	; 69
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	d1 f6       	brne	.-76     	; 0x18c8 <LCD_voidInit+0xf0>
    1914:	28 c0       	rjmp	.+80     	; 0x1966 <LCD_voidInit+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1916:	8e 01       	movw	r16, r28
    1918:	05 54       	subi	r16, 0x45	; 69
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	fe 01       	movw	r30, r28
    191e:	e3 54       	subi	r30, 0x43	; 67
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	f8 01       	movw	r30, r16
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	80 83       	st	Z, r24
    1938:	de 01       	movw	r26, r28
    193a:	a9 54       	subi	r26, 0x49	; 73
    193c:	bf 4f       	sbci	r27, 0xFF	; 255
    193e:	fe 01       	movw	r30, r28
    1940:	e5 54       	subi	r30, 0x45	; 69
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	11 96       	adiw	r26, 0x01	; 1
    194a:	9c 93       	st	X, r25
    194c:	8e 93       	st	-X, r24
    194e:	fe 01       	movw	r30, r28
    1950:	e9 54       	subi	r30, 0x49	; 73
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_voidInit+0x180>
    195c:	fe 01       	movw	r30, r28
    195e:	e9 54       	subi	r30, 0x49	; 73
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	80 83       	st	Z, r24
	{
		_delay_ms(30);
		if (LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
    1966:	fe 01       	movw	r30, r28
    1968:	ea 53       	subi	r30, 0x3A	; 58
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	80 81       	ld	r24, Z
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	c9 01       	movw	r24, r18
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	82 0f       	add	r24, r18
    197a:	93 1f       	adc	r25, r19
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	fc 01       	movw	r30, r24
    1986:	e8 59       	subi	r30, 0x98	; 152
    1988:	fe 4f       	sbci	r31, 0xFE	; 254
    198a:	80 81       	ld	r24, Z
    198c:	82 95       	swap	r24
    198e:	86 95       	lsr	r24
    1990:	87 70       	andi	r24, 0x07	; 7
    1992:	81 70       	andi	r24, 0x01	; 1
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	09 f0       	breq	.+2      	; 0x199a <LCD_voidInit+0x1c2>
    1998:	bf c3       	rjmp	.+1918   	; 0x2118 <LCD_voidInit+0x940>
		{
			u8CmdLoc = 0x30|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<3 | 
    199a:	fe 01       	movw	r30, r28
    199c:	ea 53       	subi	r30, 0x3A	; 58
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 81       	ld	r24, Z
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	c9 01       	movw	r24, r18
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	82 0f       	add	r24, r18
    19ae:	93 1f       	adc	r25, r19
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	fc 01       	movw	r30, r24
    19ba:	e8 59       	subi	r30, 0x98	; 152
    19bc:	fe 4f       	sbci	r31, 0xFE	; 254
    19be:	80 81       	ld	r24, Z
    19c0:	81 70       	andi	r24, 0x01	; 1
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	48 2f       	mov	r20, r24
    19d4:	40 63       	ori	r20, 0x30	; 48
    19d6:	fe 01       	movw	r30, r28
    19d8:	ea 53       	subi	r30, 0x3A	; 58
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 81       	ld	r24, Z
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	c9 01       	movw	r24, r18
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	82 0f       	add	r24, r18
    19ea:	93 1f       	adc	r25, r19
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	fc 01       	movw	r30, r24
    19f6:	e8 59       	subi	r30, 0x98	; 152
    19f8:	fe 4f       	sbci	r31, 0xFE	; 254
    19fa:	80 81       	ld	r24, Z
    19fc:	86 95       	lsr	r24
    19fe:	81 70       	andi	r24, 0x01	; 1
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	84 2b       	or	r24, r20
    1a0e:	fe 01       	movw	r30, r28
    1a10:	eb 53       	subi	r30, 0x3B	; 59
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	80 83       	st	Z, r24
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<2 ; 
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    1a16:	fe 01       	movw	r30, r28
    1a18:	ea 53       	subi	r30, 0x3A	; 58
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	de 01       	movw	r26, r28
    1a1e:	ab 53       	subi	r26, 0x3B	; 59
    1a20:	bf 4f       	sbci	r27, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
    1a24:	6c 91       	ld	r22, X
    1a26:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	ed 54       	subi	r30, 0x4D	; 77
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a0 e8       	ldi	r26, 0x80	; 128
    1a36:	bf e3       	ldi	r27, 0x3F	; 63
    1a38:	80 83       	st	Z, r24
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	a2 83       	std	Z+2, r26	; 0x02
    1a3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a40:	8e 01       	movw	r16, r28
    1a42:	01 55       	subi	r16, 0x51	; 81
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
    1a46:	fe 01       	movw	r30, r28
    1a48:	ed 54       	subi	r30, 0x4D	; 77
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	60 81       	ld	r22, Z
    1a4e:	71 81       	ldd	r23, Z+1	; 0x01
    1a50:	82 81       	ldd	r24, Z+2	; 0x02
    1a52:	93 81       	ldd	r25, Z+3	; 0x03
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	4a ef       	ldi	r20, 0xFA	; 250
    1a5a:	54 e4       	ldi	r21, 0x44	; 68
    1a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	f8 01       	movw	r30, r16
    1a66:	80 83       	st	Z, r24
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	a2 83       	std	Z+2, r26	; 0x02
    1a6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e1 55       	subi	r30, 0x51	; 81
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	93 81       	ldd	r25, Z+3	; 0x03
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e8       	ldi	r20, 0x80	; 128
    1a82:	5f e3       	ldi	r21, 0x3F	; 63
    1a84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a88:	88 23       	and	r24, r24
    1a8a:	44 f4       	brge	.+16     	; 0x1a9c <LCD_voidInit+0x2c4>
		__ticks = 1;
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e3 55       	subi	r30, 0x53	; 83
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
    1a9a:	64 c0       	rjmp	.+200    	; 0x1b64 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e1 55       	subi	r30, 0x51	; 81
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	60 81       	ld	r22, Z
    1aa4:	71 81       	ldd	r23, Z+1	; 0x01
    1aa6:	82 81       	ldd	r24, Z+2	; 0x02
    1aa8:	93 81       	ldd	r25, Z+3	; 0x03
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	3f ef       	ldi	r19, 0xFF	; 255
    1aae:	4f e7       	ldi	r20, 0x7F	; 127
    1ab0:	57 e4       	ldi	r21, 0x47	; 71
    1ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	0c f0       	brlt	.+2      	; 0x1abc <LCD_voidInit+0x2e4>
    1aba:	43 c0       	rjmp	.+134    	; 0x1b42 <LCD_voidInit+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abc:	fe 01       	movw	r30, r28
    1abe:	ed 54       	subi	r30, 0x4D	; 77
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	60 81       	ld	r22, Z
    1ac4:	71 81       	ldd	r23, Z+1	; 0x01
    1ac6:	82 81       	ldd	r24, Z+2	; 0x02
    1ac8:	93 81       	ldd	r25, Z+3	; 0x03
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e2       	ldi	r20, 0x20	; 32
    1ad0:	51 e4       	ldi	r21, 0x41	; 65
    1ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	8e 01       	movw	r16, r28
    1adc:	03 55       	subi	r16, 0x53	; 83
    1ade:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	f8 01       	movw	r30, r16
    1aee:	91 83       	std	Z+1, r25	; 0x01
    1af0:	80 83       	st	Z, r24
    1af2:	1f c0       	rjmp	.+62     	; 0x1b32 <LCD_voidInit+0x35a>
    1af4:	fe 01       	movw	r30, r28
    1af6:	e5 55       	subi	r30, 0x55	; 85
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	88 ec       	ldi	r24, 0xC8	; 200
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	80 83       	st	Z, r24
    1b02:	fe 01       	movw	r30, r28
    1b04:	e5 55       	subi	r30, 0x55	; 85
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 81       	ld	r24, Z
    1b0a:	91 81       	ldd	r25, Z+1	; 0x01
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_voidInit+0x334>
    1b10:	fe 01       	movw	r30, r28
    1b12:	e5 55       	subi	r30, 0x55	; 85
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1a:	de 01       	movw	r26, r28
    1b1c:	a3 55       	subi	r26, 0x53	; 83
    1b1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b20:	fe 01       	movw	r30, r28
    1b22:	e3 55       	subi	r30, 0x53	; 83
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	80 81       	ld	r24, Z
    1b28:	91 81       	ldd	r25, Z+1	; 0x01
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	11 96       	adiw	r26, 0x01	; 1
    1b2e:	9c 93       	st	X, r25
    1b30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b32:	fe 01       	movw	r30, r28
    1b34:	e3 55       	subi	r30, 0x53	; 83
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	d1 f6       	brne	.-76     	; 0x1af4 <LCD_voidInit+0x31c>
    1b40:	27 c0       	rjmp	.+78     	; 0x1b90 <LCD_voidInit+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b42:	8e 01       	movw	r16, r28
    1b44:	03 55       	subi	r16, 0x53	; 83
    1b46:	1f 4f       	sbci	r17, 0xFF	; 255
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e1 55       	subi	r30, 0x51	; 81
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	60 81       	ld	r22, Z
    1b50:	71 81       	ldd	r23, Z+1	; 0x01
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	f8 01       	movw	r30, r16
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	80 83       	st	Z, r24
    1b64:	de 01       	movw	r26, r28
    1b66:	a7 55       	subi	r26, 0x57	; 87
    1b68:	bf 4f       	sbci	r27, 0xFF	; 255
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	e3 55       	subi	r30, 0x53	; 83
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	80 81       	ld	r24, Z
    1b72:	91 81       	ldd	r25, Z+1	; 0x01
    1b74:	8d 93       	st	X+, r24
    1b76:	9c 93       	st	X, r25
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e7 55       	subi	r30, 0x57	; 87
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	80 81       	ld	r24, Z
    1b80:	91 81       	ldd	r25, Z+1	; 0x01
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LCD_voidInit+0x3aa>
    1b86:	fe 01       	movw	r30, r28
    1b88:	e7 55       	subi	r30, 0x57	; 87
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	91 83       	std	Z+1, r25	; 0x01
    1b8e:	80 83       	st	Z, r24
		    _delay_ms(1);
			
			u8CmdLoc = 0x08 |LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<2 |
    1b90:	fe 01       	movw	r30, r28
    1b92:	ea 53       	subi	r30, 0x3A	; 58
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	80 81       	ld	r24, Z
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	c9 01       	movw	r24, r18
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	82 0f       	add	r24, r18
    1ba4:	93 1f       	adc	r25, r19
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	fc 01       	movw	r30, r24
    1bb0:	e8 59       	subi	r30, 0x98	; 152
    1bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb4:	80 81       	ld	r24, Z
    1bb6:	86 95       	lsr	r24
    1bb8:	86 95       	lsr	r24
    1bba:	81 70       	andi	r24, 0x01	; 1
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	48 2f       	mov	r20, r24
    1bca:	48 60       	ori	r20, 0x08	; 8
    1bcc:	fe 01       	movw	r30, r28
    1bce:	ea 53       	subi	r30, 0x3A	; 58
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 81       	ld	r24, Z
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	c9 01       	movw	r24, r18
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	82 0f       	add	r24, r18
    1be0:	93 1f       	adc	r25, r19
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	fc 01       	movw	r30, r24
    1bec:	e8 59       	subi	r30, 0x98	; 152
    1bee:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf0:	80 81       	ld	r24, Z
    1bf2:	86 95       	lsr	r24
    1bf4:	86 95       	lsr	r24
    1bf6:	86 95       	lsr	r24
    1bf8:	81 70       	andi	r24, 0x01	; 1
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	48 2b       	or	r20, r24
    1c04:	fe 01       	movw	r30, r28
    1c06:	ea 53       	subi	r30, 0x3A	; 58
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	80 81       	ld	r24, Z
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	c9 01       	movw	r24, r18
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	82 0f       	add	r24, r18
    1c18:	93 1f       	adc	r25, r19
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	fc 01       	movw	r30, r24
    1c24:	e8 59       	subi	r30, 0x98	; 152
    1c26:	fe 4f       	sbci	r31, 0xFE	; 254
    1c28:	80 81       	ld	r24, Z
    1c2a:	82 95       	swap	r24
    1c2c:	8f 70       	andi	r24, 0x0F	; 15
    1c2e:	81 70       	andi	r24, 0x01	; 1
    1c30:	84 2b       	or	r24, r20
    1c32:	fe 01       	movw	r30, r28
    1c34:	eb 53       	subi	r30, 0x3B	; 59
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	80 83       	st	Z, r24
                             LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<1 |
							 LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<0 ;
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ea 53       	subi	r30, 0x3A	; 58
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	de 01       	movw	r26, r28
    1c42:	ab 53       	subi	r26, 0x3B	; 59
    1c44:	bf 4f       	sbci	r27, 0xFF	; 255
    1c46:	80 81       	ld	r24, Z
    1c48:	6c 91       	ld	r22, X
    1c4a:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    1c4e:	fe 01       	movw	r30, r28
    1c50:	eb 55       	subi	r30, 0x5B	; 91
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	a0 e8       	ldi	r26, 0x80	; 128
    1c5a:	bf e3       	ldi	r27, 0x3F	; 63
    1c5c:	80 83       	st	Z, r24
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	a2 83       	std	Z+2, r26	; 0x02
    1c62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c64:	8e 01       	movw	r16, r28
    1c66:	0f 55       	subi	r16, 0x5F	; 95
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	eb 55       	subi	r30, 0x5B	; 91
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	60 81       	ld	r22, Z
    1c72:	71 81       	ldd	r23, Z+1	; 0x01
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	93 81       	ldd	r25, Z+3	; 0x03
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	4a ef       	ldi	r20, 0xFA	; 250
    1c7e:	54 e4       	ldi	r21, 0x44	; 68
    1c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	f8 01       	movw	r30, r16
    1c8a:	80 83       	st	Z, r24
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	a2 83       	std	Z+2, r26	; 0x02
    1c90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c92:	fe 01       	movw	r30, r28
    1c94:	ef 55       	subi	r30, 0x5F	; 95
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e8       	ldi	r20, 0x80	; 128
    1ca6:	5f e3       	ldi	r21, 0x3F	; 63
    1ca8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cac:	88 23       	and	r24, r24
    1cae:	44 f4       	brge	.+16     	; 0x1cc0 <LCD_voidInit+0x4e8>
		__ticks = 1;
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e1 56       	subi	r30, 0x61	; 97
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	91 83       	std	Z+1, r25	; 0x01
    1cbc:	80 83       	st	Z, r24
    1cbe:	64 c0       	rjmp	.+200    	; 0x1d88 <LCD_voidInit+0x5b0>
	else if (__tmp > 65535)
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	ef 55       	subi	r30, 0x5F	; 95
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	60 81       	ld	r22, Z
    1cc8:	71 81       	ldd	r23, Z+1	; 0x01
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	93 81       	ldd	r25, Z+3	; 0x03
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	3f ef       	ldi	r19, 0xFF	; 255
    1cd2:	4f e7       	ldi	r20, 0x7F	; 127
    1cd4:	57 e4       	ldi	r21, 0x47	; 71
    1cd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cda:	18 16       	cp	r1, r24
    1cdc:	0c f0       	brlt	.+2      	; 0x1ce0 <LCD_voidInit+0x508>
    1cde:	43 c0       	rjmp	.+134    	; 0x1d66 <LCD_voidInit+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	eb 55       	subi	r30, 0x5B	; 91
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	60 81       	ld	r22, Z
    1ce8:	71 81       	ldd	r23, Z+1	; 0x01
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8e 01       	movw	r16, r28
    1d00:	01 56       	subi	r16, 0x61	; 97
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	f8 01       	movw	r30, r16
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	80 83       	st	Z, r24
    1d16:	1f c0       	rjmp	.+62     	; 0x1d56 <LCD_voidInit+0x57e>
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e3 56       	subi	r30, 0x63	; 99
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	88 ec       	ldi	r24, 0xC8	; 200
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	80 83       	st	Z, r24
    1d26:	fe 01       	movw	r30, r28
    1d28:	e3 56       	subi	r30, 0x63	; 99
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <LCD_voidInit+0x558>
    1d34:	fe 01       	movw	r30, r28
    1d36:	e3 56       	subi	r30, 0x63	; 99
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	de 01       	movw	r26, r28
    1d40:	a1 56       	subi	r26, 0x61	; 97
    1d42:	bf 4f       	sbci	r27, 0xFF	; 255
    1d44:	fe 01       	movw	r30, r28
    1d46:	e1 56       	subi	r30, 0x61	; 97
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 81       	ld	r24, Z
    1d4c:	91 81       	ldd	r25, Z+1	; 0x01
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	11 96       	adiw	r26, 0x01	; 1
    1d52:	9c 93       	st	X, r25
    1d54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d56:	fe 01       	movw	r30, r28
    1d58:	e1 56       	subi	r30, 0x61	; 97
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	d1 f6       	brne	.-76     	; 0x1d18 <LCD_voidInit+0x540>
    1d64:	27 c0       	rjmp	.+78     	; 0x1db4 <LCD_voidInit+0x5dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	8e 01       	movw	r16, r28
    1d68:	01 56       	subi	r16, 0x61	; 97
    1d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	ef 55       	subi	r30, 0x5F	; 95
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	f8 01       	movw	r30, r16
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
    1d88:	de 01       	movw	r26, r28
    1d8a:	a5 56       	subi	r26, 0x65	; 101
    1d8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e1 56       	subi	r30, 0x61	; 97
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
    1d98:	8d 93       	st	X+, r24
    1d9a:	9c 93       	st	X, r25
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	e5 56       	subi	r30, 0x65	; 101
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_voidInit+0x5ce>
    1daa:	fe 01       	movw	r30, r28
    1dac:	e5 56       	subi	r30, 0x65	; 101
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
		    _delay_ms(1);
			
			LCD_enuWriteCmd(u8CntrLoc , LCD_u8CLEAR);
    1db4:	fe 01       	movw	r30, r28
    1db6:	ea 53       	subi	r30, 0x3A	; 58
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	80 81       	ld	r24, Z
    1dbc:	61 e0       	ldi	r22, 0x01	; 1
    1dbe:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e9 56       	subi	r30, 0x69	; 105
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	a0 e0       	ldi	r26, 0x00	; 0
    1dce:	b0 e4       	ldi	r27, 0x40	; 64
    1dd0:	80 83       	st	Z, r24
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	a2 83       	std	Z+2, r26	; 0x02
    1dd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd8:	8e 01       	movw	r16, r28
    1dda:	0d 56       	subi	r16, 0x6D	; 109
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	fe 01       	movw	r30, r28
    1de0:	e9 56       	subi	r30, 0x69	; 105
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	4a ef       	ldi	r20, 0xFA	; 250
    1df2:	54 e4       	ldi	r21, 0x44	; 68
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	80 83       	st	Z, r24
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	a2 83       	std	Z+2, r26	; 0x02
    1e04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e06:	fe 01       	movw	r30, r28
    1e08:	ed 56       	subi	r30, 0x6D	; 109
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	60 81       	ld	r22, Z
    1e0e:	71 81       	ldd	r23, Z+1	; 0x01
    1e10:	82 81       	ldd	r24, Z+2	; 0x02
    1e12:	93 81       	ldd	r25, Z+3	; 0x03
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e8       	ldi	r20, 0x80	; 128
    1e1a:	5f e3       	ldi	r21, 0x3F	; 63
    1e1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e20:	88 23       	and	r24, r24
    1e22:	44 f4       	brge	.+16     	; 0x1e34 <LCD_voidInit+0x65c>
		__ticks = 1;
    1e24:	fe 01       	movw	r30, r28
    1e26:	ef 56       	subi	r30, 0x6F	; 111
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	91 83       	std	Z+1, r25	; 0x01
    1e30:	80 83       	st	Z, r24
    1e32:	64 c0       	rjmp	.+200    	; 0x1efc <LCD_voidInit+0x724>
	else if (__tmp > 65535)
    1e34:	fe 01       	movw	r30, r28
    1e36:	ed 56       	subi	r30, 0x6D	; 109
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	60 81       	ld	r22, Z
    1e3c:	71 81       	ldd	r23, Z+1	; 0x01
    1e3e:	82 81       	ldd	r24, Z+2	; 0x02
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	3f ef       	ldi	r19, 0xFF	; 255
    1e46:	4f e7       	ldi	r20, 0x7F	; 127
    1e48:	57 e4       	ldi	r21, 0x47	; 71
    1e4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e4e:	18 16       	cp	r1, r24
    1e50:	0c f0       	brlt	.+2      	; 0x1e54 <LCD_voidInit+0x67c>
    1e52:	43 c0       	rjmp	.+134    	; 0x1eda <LCD_voidInit+0x702>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e54:	fe 01       	movw	r30, r28
    1e56:	e9 56       	subi	r30, 0x69	; 105
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	60 81       	ld	r22, Z
    1e5c:	71 81       	ldd	r23, Z+1	; 0x01
    1e5e:	82 81       	ldd	r24, Z+2	; 0x02
    1e60:	93 81       	ldd	r25, Z+3	; 0x03
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e2       	ldi	r20, 0x20	; 32
    1e68:	51 e4       	ldi	r21, 0x41	; 65
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	8e 01       	movw	r16, r28
    1e74:	0f 56       	subi	r16, 0x6F	; 111
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	f8 01       	movw	r30, r16
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	80 83       	st	Z, r24
    1e8a:	1f c0       	rjmp	.+62     	; 0x1eca <LCD_voidInit+0x6f2>
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e1 57       	subi	r30, 0x71	; 113
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	88 ec       	ldi	r24, 0xC8	; 200
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	80 83       	st	Z, r24
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e1 57       	subi	r30, 0x71	; 113
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 81       	ld	r24, Z
    1ea2:	91 81       	ldd	r25, Z+1	; 0x01
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <LCD_voidInit+0x6cc>
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e1 57       	subi	r30, 0x71	; 113
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb2:	de 01       	movw	r26, r28
    1eb4:	af 56       	subi	r26, 0x6F	; 111
    1eb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ef 56       	subi	r30, 0x6F	; 111
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	11 96       	adiw	r26, 0x01	; 1
    1ec6:	9c 93       	st	X, r25
    1ec8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ef 56       	subi	r30, 0x6F	; 111
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	d1 f6       	brne	.-76     	; 0x1e8c <LCD_voidInit+0x6b4>
    1ed8:	27 c0       	rjmp	.+78     	; 0x1f28 <LCD_voidInit+0x750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eda:	8e 01       	movw	r16, r28
    1edc:	0f 56       	subi	r16, 0x6F	; 111
    1ede:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	ed 56       	subi	r30, 0x6D	; 109
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	60 81       	ld	r22, Z
    1ee8:	71 81       	ldd	r23, Z+1	; 0x01
    1eea:	82 81       	ldd	r24, Z+2	; 0x02
    1eec:	93 81       	ldd	r25, Z+3	; 0x03
    1eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	f8 01       	movw	r30, r16
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	80 83       	st	Z, r24
    1efc:	de 01       	movw	r26, r28
    1efe:	a3 57       	subi	r26, 0x73	; 115
    1f00:	bf 4f       	sbci	r27, 0xFF	; 255
    1f02:	fe 01       	movw	r30, r28
    1f04:	ef 56       	subi	r30, 0x6F	; 111
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	80 81       	ld	r24, Z
    1f0a:	91 81       	ldd	r25, Z+1	; 0x01
    1f0c:	8d 93       	st	X+, r24
    1f0e:	9c 93       	st	X, r25
    1f10:	fe 01       	movw	r30, r28
    1f12:	e3 57       	subi	r30, 0x73	; 115
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_voidInit+0x742>
    1f1e:	fe 01       	movw	r30, r28
    1f20:	e3 57       	subi	r30, 0x73	; 115
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	80 83       	st	Z, r24
		    _delay_ms(2);
			
			u8CmdLoc = 0x04|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment   <<1 | 
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ea 53       	subi	r30, 0x3A	; 58
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 81       	ld	r24, Z
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	c9 01       	movw	r24, r18
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	82 0f       	add	r24, r18
    1f3c:	93 1f       	adc	r25, r19
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	fc 01       	movw	r30, r24
    1f48:	e8 59       	subi	r30, 0x98	; 152
    1f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4c:	80 81       	ld	r24, Z
    1f4e:	82 95       	swap	r24
    1f50:	86 95       	lsr	r24
    1f52:	86 95       	lsr	r24
    1f54:	83 70       	andi	r24, 0x03	; 3
    1f56:	81 70       	andi	r24, 0x01	; 1
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	48 2f       	mov	r20, r24
    1f62:	44 60       	ori	r20, 0x04	; 4
    1f64:	fe 01       	movw	r30, r28
    1f66:	ea 53       	subi	r30, 0x3A	; 58
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 81       	ld	r24, Z
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	c9 01       	movw	r24, r18
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	82 0f       	add	r24, r18
    1f78:	93 1f       	adc	r25, r19
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	fc 01       	movw	r30, r24
    1f84:	e8 59       	subi	r30, 0x98	; 152
    1f86:	fe 4f       	sbci	r31, 0xFE	; 254
    1f88:	80 81       	ld	r24, Z
    1f8a:	88 1f       	adc	r24, r24
    1f8c:	88 27       	eor	r24, r24
    1f8e:	88 1f       	adc	r24, r24
    1f90:	84 2b       	or	r24, r20
    1f92:	fe 01       	movw	r30, r28
    1f94:	eb 53       	subi	r30, 0x3B	; 59
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 83       	st	Z, r24
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift<<0 ; 
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	ea 53       	subi	r30, 0x3A	; 58
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	de 01       	movw	r26, r28
    1fa2:	ab 53       	subi	r26, 0x3B	; 59
    1fa4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	6c 91       	ld	r22, X
    1faa:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e7 57       	subi	r30, 0x77	; 119
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a0 e0       	ldi	r26, 0x00	; 0
    1fba:	b0 e4       	ldi	r27, 0x40	; 64
    1fbc:	80 83       	st	Z, r24
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	a2 83       	std	Z+2, r26	; 0x02
    1fc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc4:	8e 01       	movw	r16, r28
    1fc6:	0b 57       	subi	r16, 0x7B	; 123
    1fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e7 57       	subi	r30, 0x77	; 119
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	60 81       	ld	r22, Z
    1fd2:	71 81       	ldd	r23, Z+1	; 0x01
    1fd4:	82 81       	ldd	r24, Z+2	; 0x02
    1fd6:	93 81       	ldd	r25, Z+3	; 0x03
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a ef       	ldi	r20, 0xFA	; 250
    1fde:	54 e4       	ldi	r21, 0x44	; 68
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	f8 01       	movw	r30, r16
    1fea:	80 83       	st	Z, r24
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	a2 83       	std	Z+2, r26	; 0x02
    1ff0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	eb 57       	subi	r30, 0x7B	; 123
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    200c:	88 23       	and	r24, r24
    200e:	44 f4       	brge	.+16     	; 0x2020 <LCD_voidInit+0x848>
		__ticks = 1;
    2010:	fe 01       	movw	r30, r28
    2012:	ed 57       	subi	r30, 0x7D	; 125
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
    201e:	64 c0       	rjmp	.+200    	; 0x20e8 <LCD_voidInit+0x910>
	else if (__tmp > 65535)
    2020:	fe 01       	movw	r30, r28
    2022:	eb 57       	subi	r30, 0x7B	; 123
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	0c f0       	brlt	.+2      	; 0x2040 <LCD_voidInit+0x868>
    203e:	43 c0       	rjmp	.+134    	; 0x20c6 <LCD_voidInit+0x8ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2040:	fe 01       	movw	r30, r28
    2042:	e7 57       	subi	r30, 0x77	; 119
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e2       	ldi	r20, 0x20	; 32
    2054:	51 e4       	ldi	r21, 0x41	; 65
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	8e 01       	movw	r16, r28
    2060:	0d 57       	subi	r16, 0x7D	; 125
    2062:	1f 4f       	sbci	r17, 0xFF	; 255
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	f8 01       	movw	r30, r16
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
    2076:	1f c0       	rjmp	.+62     	; 0x20b6 <LCD_voidInit+0x8de>
    2078:	fe 01       	movw	r30, r28
    207a:	ef 57       	subi	r30, 0x7F	; 127
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	88 ec       	ldi	r24, 0xC8	; 200
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
    2086:	fe 01       	movw	r30, r28
    2088:	ef 57       	subi	r30, 0x7F	; 127
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	80 81       	ld	r24, Z
    208e:	91 81       	ldd	r25, Z+1	; 0x01
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_voidInit+0x8b8>
    2094:	fe 01       	movw	r30, r28
    2096:	ef 57       	subi	r30, 0x7F	; 127
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209e:	de 01       	movw	r26, r28
    20a0:	ad 57       	subi	r26, 0x7D	; 125
    20a2:	bf 4f       	sbci	r27, 0xFF	; 255
    20a4:	fe 01       	movw	r30, r28
    20a6:	ed 57       	subi	r30, 0x7D	; 125
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 81       	ld	r24, Z
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	11 96       	adiw	r26, 0x01	; 1
    20b2:	9c 93       	st	X, r25
    20b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b6:	fe 01       	movw	r30, r28
    20b8:	ed 57       	subi	r30, 0x7D	; 125
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 81       	ld	r24, Z
    20be:	91 81       	ldd	r25, Z+1	; 0x01
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	d1 f6       	brne	.-76     	; 0x2078 <LCD_voidInit+0x8a0>
    20c4:	7a c6       	rjmp	.+3316   	; 0x2dba <LCD_voidInit+0x15e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	8e 01       	movw	r16, r28
    20c8:	0d 57       	subi	r16, 0x7D	; 125
    20ca:	1f 4f       	sbci	r17, 0xFF	; 255
    20cc:	fe 01       	movw	r30, r28
    20ce:	eb 57       	subi	r30, 0x7B	; 123
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	f8 01       	movw	r30, r16
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	80 83       	st	Z, r24
    20e8:	de 01       	movw	r26, r28
    20ea:	a1 58       	subi	r26, 0x81	; 129
    20ec:	bf 4f       	sbci	r27, 0xFF	; 255
    20ee:	fe 01       	movw	r30, r28
    20f0:	ed 57       	subi	r30, 0x7D	; 125
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	91 81       	ldd	r25, Z+1	; 0x01
    20f8:	11 96       	adiw	r26, 0x01	; 1
    20fa:	9c 93       	st	X, r25
    20fc:	8e 93       	st	-X, r24
    20fe:	fe 01       	movw	r30, r28
    2100:	e1 58       	subi	r30, 0x81	; 129
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	80 81       	ld	r24, Z
    2106:	91 81       	ldd	r25, Z+1	; 0x01
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <LCD_voidInit+0x930>
    210c:	fe 01       	movw	r30, r28
    210e:	e1 58       	subi	r30, 0x81	; 129
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	80 83       	st	Z, r24
    2116:	51 c6       	rjmp	.+3234   	; 0x2dba <LCD_voidInit+0x15e2>
			 _delay_ms(2);
			
		}
		else 
		{
				LCD_enuWriteCmd(u8CntrLoc , 0x20);
    2118:	fe 01       	movw	r30, r28
    211a:	ea 53       	subi	r30, 0x3A	; 58
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 81       	ld	r24, Z
    2120:	60 e2       	ldi	r22, 0x20	; 32
    2122:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    2126:	fe 01       	movw	r30, r28
    2128:	e5 58       	subi	r30, 0x85	; 133
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a0 e8       	ldi	r26, 0x80	; 128
    2132:	bf e3       	ldi	r27, 0x3F	; 63
    2134:	80 83       	st	Z, r24
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	a2 83       	std	Z+2, r26	; 0x02
    213a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213c:	8e 01       	movw	r16, r28
    213e:	09 58       	subi	r16, 0x89	; 137
    2140:	1f 4f       	sbci	r17, 0xFF	; 255
    2142:	fe 01       	movw	r30, r28
    2144:	e5 58       	subi	r30, 0x85	; 133
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	60 81       	ld	r22, Z
    214a:	71 81       	ldd	r23, Z+1	; 0x01
    214c:	82 81       	ldd	r24, Z+2	; 0x02
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a ef       	ldi	r20, 0xFA	; 250
    2156:	54 e4       	ldi	r21, 0x44	; 68
    2158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	f8 01       	movw	r30, r16
    2162:	80 83       	st	Z, r24
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	a2 83       	std	Z+2, r26	; 0x02
    2168:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    216a:	fe 01       	movw	r30, r28
    216c:	e9 58       	subi	r30, 0x89	; 137
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	60 81       	ld	r22, Z
    2172:	71 81       	ldd	r23, Z+1	; 0x01
    2174:	82 81       	ldd	r24, Z+2	; 0x02
    2176:	93 81       	ldd	r25, Z+3	; 0x03
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e8       	ldi	r20, 0x80	; 128
    217e:	5f e3       	ldi	r21, 0x3F	; 63
    2180:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2184:	88 23       	and	r24, r24
    2186:	44 f4       	brge	.+16     	; 0x2198 <LCD_voidInit+0x9c0>
		__ticks = 1;
    2188:	fe 01       	movw	r30, r28
    218a:	eb 58       	subi	r30, 0x8B	; 139
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	80 83       	st	Z, r24
    2196:	64 c0       	rjmp	.+200    	; 0x2260 <LCD_voidInit+0xa88>
	else if (__tmp > 65535)
    2198:	fe 01       	movw	r30, r28
    219a:	e9 58       	subi	r30, 0x89	; 137
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	60 81       	ld	r22, Z
    21a0:	71 81       	ldd	r23, Z+1	; 0x01
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f e7       	ldi	r20, 0x7F	; 127
    21ac:	57 e4       	ldi	r21, 0x47	; 71
    21ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	0c f0       	brlt	.+2      	; 0x21b8 <LCD_voidInit+0x9e0>
    21b6:	43 c0       	rjmp	.+134    	; 0x223e <LCD_voidInit+0xa66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b8:	fe 01       	movw	r30, r28
    21ba:	e5 58       	subi	r30, 0x85	; 133
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	60 81       	ld	r22, Z
    21c0:	71 81       	ldd	r23, Z+1	; 0x01
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e2       	ldi	r20, 0x20	; 32
    21cc:	51 e4       	ldi	r21, 0x41	; 65
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	8e 01       	movw	r16, r28
    21d8:	0b 58       	subi	r16, 0x8B	; 139
    21da:	1f 4f       	sbci	r17, 0xFF	; 255
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	f8 01       	movw	r30, r16
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	80 83       	st	Z, r24
    21ee:	1f c0       	rjmp	.+62     	; 0x222e <LCD_voidInit+0xa56>
    21f0:	fe 01       	movw	r30, r28
    21f2:	ed 58       	subi	r30, 0x8D	; 141
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	88 ec       	ldi	r24, 0xC8	; 200
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	91 83       	std	Z+1, r25	; 0x01
    21fc:	80 83       	st	Z, r24
    21fe:	fe 01       	movw	r30, r28
    2200:	ed 58       	subi	r30, 0x8D	; 141
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 81       	ld	r24, Z
    2206:	91 81       	ldd	r25, Z+1	; 0x01
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <LCD_voidInit+0xa30>
    220c:	fe 01       	movw	r30, r28
    220e:	ed 58       	subi	r30, 0x8D	; 141
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	91 83       	std	Z+1, r25	; 0x01
    2214:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2216:	de 01       	movw	r26, r28
    2218:	ab 58       	subi	r26, 0x8B	; 139
    221a:	bf 4f       	sbci	r27, 0xFF	; 255
    221c:	fe 01       	movw	r30, r28
    221e:	eb 58       	subi	r30, 0x8B	; 139
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	80 81       	ld	r24, Z
    2224:	91 81       	ldd	r25, Z+1	; 0x01
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	11 96       	adiw	r26, 0x01	; 1
    222a:	9c 93       	st	X, r25
    222c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222e:	fe 01       	movw	r30, r28
    2230:	eb 58       	subi	r30, 0x8B	; 139
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	d1 f6       	brne	.-76     	; 0x21f0 <LCD_voidInit+0xa18>
    223c:	27 c0       	rjmp	.+78     	; 0x228c <LCD_voidInit+0xab4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	8e 01       	movw	r16, r28
    2240:	0b 58       	subi	r16, 0x8B	; 139
    2242:	1f 4f       	sbci	r17, 0xFF	; 255
    2244:	fe 01       	movw	r30, r28
    2246:	e9 58       	subi	r30, 0x89	; 137
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	60 81       	ld	r22, Z
    224c:	71 81       	ldd	r23, Z+1	; 0x01
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	f8 01       	movw	r30, r16
    225c:	91 83       	std	Z+1, r25	; 0x01
    225e:	80 83       	st	Z, r24
    2260:	de 01       	movw	r26, r28
    2262:	af 58       	subi	r26, 0x8F	; 143
    2264:	bf 4f       	sbci	r27, 0xFF	; 255
    2266:	fe 01       	movw	r30, r28
    2268:	eb 58       	subi	r30, 0x8B	; 139
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	80 81       	ld	r24, Z
    226e:	91 81       	ldd	r25, Z+1	; 0x01
    2270:	8d 93       	st	X+, r24
    2272:	9c 93       	st	X, r25
    2274:	fe 01       	movw	r30, r28
    2276:	ef 58       	subi	r30, 0x8F	; 143
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCD_voidInit+0xaa6>
    2282:	fe 01       	movw	r30, r28
    2284:	ef 58       	subi	r30, 0x8F	; 143
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	91 83       	std	Z+1, r25	; 0x01
    228a:	80 83       	st	Z, r24
				 _delay_ms(1);
				LCD_enuWriteCmd(u8CntrLoc , 0x20);
    228c:	fe 01       	movw	r30, r28
    228e:	ea 53       	subi	r30, 0x3A	; 58
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	60 e2       	ldi	r22, 0x20	; 32
    2296:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    229a:	fe 01       	movw	r30, r28
    229c:	e3 59       	subi	r30, 0x93	; 147
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	a0 e8       	ldi	r26, 0x80	; 128
    22a6:	bf e3       	ldi	r27, 0x3F	; 63
    22a8:	80 83       	st	Z, r24
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	a2 83       	std	Z+2, r26	; 0x02
    22ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b0:	8e 01       	movw	r16, r28
    22b2:	07 59       	subi	r16, 0x97	; 151
    22b4:	1f 4f       	sbci	r17, 0xFF	; 255
    22b6:	fe 01       	movw	r30, r28
    22b8:	e3 59       	subi	r30, 0x93	; 147
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	60 81       	ld	r22, Z
    22be:	71 81       	ldd	r23, Z+1	; 0x01
    22c0:	82 81       	ldd	r24, Z+2	; 0x02
    22c2:	93 81       	ldd	r25, Z+3	; 0x03
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	4a ef       	ldi	r20, 0xFA	; 250
    22ca:	54 e4       	ldi	r21, 0x44	; 68
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	f8 01       	movw	r30, r16
    22d6:	80 83       	st	Z, r24
    22d8:	91 83       	std	Z+1, r25	; 0x01
    22da:	a2 83       	std	Z+2, r26	; 0x02
    22dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22de:	fe 01       	movw	r30, r28
    22e0:	e7 59       	subi	r30, 0x97	; 151
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	60 81       	ld	r22, Z
    22e6:	71 81       	ldd	r23, Z+1	; 0x01
    22e8:	82 81       	ldd	r24, Z+2	; 0x02
    22ea:	93 81       	ldd	r25, Z+3	; 0x03
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f8:	88 23       	and	r24, r24
    22fa:	44 f4       	brge	.+16     	; 0x230c <LCD_voidInit+0xb34>
		__ticks = 1;
    22fc:	fe 01       	movw	r30, r28
    22fe:	e9 59       	subi	r30, 0x99	; 153
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	80 83       	st	Z, r24
    230a:	64 c0       	rjmp	.+200    	; 0x23d4 <LCD_voidInit+0xbfc>
	else if (__tmp > 65535)
    230c:	fe 01       	movw	r30, r28
    230e:	e7 59       	subi	r30, 0x97	; 151
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	60 81       	ld	r22, Z
    2314:	71 81       	ldd	r23, Z+1	; 0x01
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	93 81       	ldd	r25, Z+3	; 0x03
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	3f ef       	ldi	r19, 0xFF	; 255
    231e:	4f e7       	ldi	r20, 0x7F	; 127
    2320:	57 e4       	ldi	r21, 0x47	; 71
    2322:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2326:	18 16       	cp	r1, r24
    2328:	0c f0       	brlt	.+2      	; 0x232c <LCD_voidInit+0xb54>
    232a:	43 c0       	rjmp	.+134    	; 0x23b2 <LCD_voidInit+0xbda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232c:	fe 01       	movw	r30, r28
    232e:	e3 59       	subi	r30, 0x93	; 147
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	60 81       	ld	r22, Z
    2334:	71 81       	ldd	r23, Z+1	; 0x01
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e2       	ldi	r20, 0x20	; 32
    2340:	51 e4       	ldi	r21, 0x41	; 65
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	8e 01       	movw	r16, r28
    234c:	09 59       	subi	r16, 0x99	; 153
    234e:	1f 4f       	sbci	r17, 0xFF	; 255
    2350:	bc 01       	movw	r22, r24
    2352:	cd 01       	movw	r24, r26
    2354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	f8 01       	movw	r30, r16
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	80 83       	st	Z, r24
    2362:	1f c0       	rjmp	.+62     	; 0x23a2 <LCD_voidInit+0xbca>
    2364:	fe 01       	movw	r30, r28
    2366:	eb 59       	subi	r30, 0x9B	; 155
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	88 ec       	ldi	r24, 0xC8	; 200
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	91 83       	std	Z+1, r25	; 0x01
    2370:	80 83       	st	Z, r24
    2372:	fe 01       	movw	r30, r28
    2374:	eb 59       	subi	r30, 0x9B	; 155
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 81       	ld	r24, Z
    237a:	91 81       	ldd	r25, Z+1	; 0x01
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <LCD_voidInit+0xba4>
    2380:	fe 01       	movw	r30, r28
    2382:	eb 59       	subi	r30, 0x9B	; 155
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	91 83       	std	Z+1, r25	; 0x01
    2388:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238a:	de 01       	movw	r26, r28
    238c:	a9 59       	subi	r26, 0x99	; 153
    238e:	bf 4f       	sbci	r27, 0xFF	; 255
    2390:	fe 01       	movw	r30, r28
    2392:	e9 59       	subi	r30, 0x99	; 153
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	80 81       	ld	r24, Z
    2398:	91 81       	ldd	r25, Z+1	; 0x01
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	11 96       	adiw	r26, 0x01	; 1
    239e:	9c 93       	st	X, r25
    23a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a2:	fe 01       	movw	r30, r28
    23a4:	e9 59       	subi	r30, 0x99	; 153
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	d1 f6       	brne	.-76     	; 0x2364 <LCD_voidInit+0xb8c>
    23b0:	27 c0       	rjmp	.+78     	; 0x2400 <LCD_voidInit+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	8e 01       	movw	r16, r28
    23b4:	09 59       	subi	r16, 0x99	; 153
    23b6:	1f 4f       	sbci	r17, 0xFF	; 255
    23b8:	fe 01       	movw	r30, r28
    23ba:	e7 59       	subi	r30, 0x97	; 151
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	93 81       	ldd	r25, Z+3	; 0x03
    23c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	f8 01       	movw	r30, r16
    23d0:	91 83       	std	Z+1, r25	; 0x01
    23d2:	80 83       	st	Z, r24
    23d4:	de 01       	movw	r26, r28
    23d6:	ad 59       	subi	r26, 0x9D	; 157
    23d8:	bf 4f       	sbci	r27, 0xFF	; 255
    23da:	fe 01       	movw	r30, r28
    23dc:	e9 59       	subi	r30, 0x99	; 153
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 81       	ld	r24, Z
    23e2:	91 81       	ldd	r25, Z+1	; 0x01
    23e4:	8d 93       	st	X+, r24
    23e6:	9c 93       	st	X, r25
    23e8:	fe 01       	movw	r30, r28
    23ea:	ed 59       	subi	r30, 0x9D	; 157
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <LCD_voidInit+0xc1a>
    23f6:	fe 01       	movw	r30, r28
    23f8:	ed 59       	subi	r30, 0x9D	; 157
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	80 83       	st	Z, r24
				 _delay_ms(1);
				u8CmdLoc = 0x00|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<7 | 
    2400:	fe 01       	movw	r30, r28
    2402:	ea 53       	subi	r30, 0x3A	; 58
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	80 81       	ld	r24, Z
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	c9 01       	movw	r24, r18
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	82 0f       	add	r24, r18
    2414:	93 1f       	adc	r25, r19
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	fc 01       	movw	r30, r24
    2420:	e8 59       	subi	r30, 0x98	; 152
    2422:	fe 4f       	sbci	r31, 0xFE	; 254
    2424:	80 81       	ld	r24, Z
    2426:	81 70       	andi	r24, 0x01	; 1
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	96 95       	lsr	r25
    242e:	98 2f       	mov	r25, r24
    2430:	88 27       	eor	r24, r24
    2432:	97 95       	ror	r25
    2434:	87 95       	ror	r24
    2436:	48 2f       	mov	r20, r24
    2438:	fe 01       	movw	r30, r28
    243a:	ea 53       	subi	r30, 0x3A	; 58
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 81       	ld	r24, Z
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	c9 01       	movw	r24, r18
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	82 0f       	add	r24, r18
    244c:	93 1f       	adc	r25, r19
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	fc 01       	movw	r30, r24
    2458:	e8 59       	subi	r30, 0x98	; 152
    245a:	fe 4f       	sbci	r31, 0xFE	; 254
    245c:	80 81       	ld	r24, Z
    245e:	86 95       	lsr	r24
    2460:	81 70       	andi	r24, 0x01	; 1
    2462:	88 2f       	mov	r24, r24
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	00 24       	eor	r0, r0
    2468:	96 95       	lsr	r25
    246a:	87 95       	ror	r24
    246c:	07 94       	ror	r0
    246e:	96 95       	lsr	r25
    2470:	87 95       	ror	r24
    2472:	07 94       	ror	r0
    2474:	98 2f       	mov	r25, r24
    2476:	80 2d       	mov	r24, r0
    2478:	84 2b       	or	r24, r20
    247a:	fe 01       	movw	r30, r28
    247c:	eb 53       	subi	r30, 0x3B	; 59
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<6 ; 
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    2482:	fe 01       	movw	r30, r28
    2484:	ea 53       	subi	r30, 0x3A	; 58
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	de 01       	movw	r26, r28
    248a:	ab 53       	subi	r26, 0x3B	; 59
    248c:	bf 4f       	sbci	r27, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	6c 91       	ld	r22, X
    2492:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    2496:	fe 01       	movw	r30, r28
    2498:	e1 5a       	subi	r30, 0xA1	; 161
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	a0 e8       	ldi	r26, 0x80	; 128
    24a2:	bf e3       	ldi	r27, 0x3F	; 63
    24a4:	80 83       	st	Z, r24
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	a2 83       	std	Z+2, r26	; 0x02
    24aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ac:	8e 01       	movw	r16, r28
    24ae:	05 5a       	subi	r16, 0xA5	; 165
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	fe 01       	movw	r30, r28
    24b4:	e1 5a       	subi	r30, 0xA1	; 161
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a ef       	ldi	r20, 0xFA	; 250
    24c6:	54 e4       	ldi	r21, 0x44	; 68
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	f8 01       	movw	r30, r16
    24d2:	80 83       	st	Z, r24
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	a2 83       	std	Z+2, r26	; 0x02
    24d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24da:	fe 01       	movw	r30, r28
    24dc:	e5 5a       	subi	r30, 0xA5	; 165
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	60 81       	ld	r22, Z
    24e2:	71 81       	ldd	r23, Z+1	; 0x01
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	44 f4       	brge	.+16     	; 0x2508 <LCD_voidInit+0xd30>
		__ticks = 1;
    24f8:	fe 01       	movw	r30, r28
    24fa:	e7 5a       	subi	r30, 0xA7	; 167
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
    2506:	64 c0       	rjmp	.+200    	; 0x25d0 <LCD_voidInit+0xdf8>
	else if (__tmp > 65535)
    2508:	fe 01       	movw	r30, r28
    250a:	e5 5a       	subi	r30, 0xA5	; 165
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	3f ef       	ldi	r19, 0xFF	; 255
    251a:	4f e7       	ldi	r20, 0x7F	; 127
    251c:	57 e4       	ldi	r21, 0x47	; 71
    251e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2522:	18 16       	cp	r1, r24
    2524:	0c f0       	brlt	.+2      	; 0x2528 <LCD_voidInit+0xd50>
    2526:	43 c0       	rjmp	.+134    	; 0x25ae <LCD_voidInit+0xdd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	fe 01       	movw	r30, r28
    252a:	e1 5a       	subi	r30, 0xA1	; 161
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	60 81       	ld	r22, Z
    2530:	71 81       	ldd	r23, Z+1	; 0x01
    2532:	82 81       	ldd	r24, Z+2	; 0x02
    2534:	93 81       	ldd	r25, Z+3	; 0x03
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	8e 01       	movw	r16, r28
    2548:	07 5a       	subi	r16, 0xA7	; 167
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	f8 01       	movw	r30, r16
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	80 83       	st	Z, r24
    255e:	1f c0       	rjmp	.+62     	; 0x259e <LCD_voidInit+0xdc6>
    2560:	fe 01       	movw	r30, r28
    2562:	e9 5a       	subi	r30, 0xA9	; 169
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	88 ec       	ldi	r24, 0xC8	; 200
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
    256e:	fe 01       	movw	r30, r28
    2570:	e9 5a       	subi	r30, 0xA9	; 169
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_voidInit+0xda0>
    257c:	fe 01       	movw	r30, r28
    257e:	e9 5a       	subi	r30, 0xA9	; 169
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	de 01       	movw	r26, r28
    2588:	a7 5a       	subi	r26, 0xA7	; 167
    258a:	bf 4f       	sbci	r27, 0xFF	; 255
    258c:	fe 01       	movw	r30, r28
    258e:	e7 5a       	subi	r30, 0xA7	; 167
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	11 96       	adiw	r26, 0x01	; 1
    259a:	9c 93       	st	X, r25
    259c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	fe 01       	movw	r30, r28
    25a0:	e7 5a       	subi	r30, 0xA7	; 167
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	d1 f6       	brne	.-76     	; 0x2560 <LCD_voidInit+0xd88>
    25ac:	27 c0       	rjmp	.+78     	; 0x25fc <LCD_voidInit+0xe24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	8e 01       	movw	r16, r28
    25b0:	07 5a       	subi	r16, 0xA7	; 167
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	fe 01       	movw	r30, r28
    25b6:	e5 5a       	subi	r30, 0xA5	; 165
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	f8 01       	movw	r30, r16
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
    25d0:	de 01       	movw	r26, r28
    25d2:	ab 5a       	subi	r26, 0xAB	; 171
    25d4:	bf 4f       	sbci	r27, 0xFF	; 255
    25d6:	fe 01       	movw	r30, r28
    25d8:	e7 5a       	subi	r30, 0xA7	; 167
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	8d 93       	st	X+, r24
    25e2:	9c 93       	st	X, r25
    25e4:	fe 01       	movw	r30, r28
    25e6:	eb 5a       	subi	r30, 0xAB	; 171
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_voidInit+0xe16>
    25f2:	fe 01       	movw	r30, r28
    25f4:	eb 5a       	subi	r30, 0xAB	; 171
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	80 83       	st	Z, r24
				 _delay_ms(1);
				 
				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    25fc:	fe 01       	movw	r30, r28
    25fe:	ea 53       	subi	r30, 0x3A	; 58
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 81       	ld	r24, Z
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    260a:	fe 01       	movw	r30, r28
    260c:	ef 5a       	subi	r30, 0xAF	; 175
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	a0 e8       	ldi	r26, 0x80	; 128
    2616:	bf e3       	ldi	r27, 0x3F	; 63
    2618:	80 83       	st	Z, r24
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	a2 83       	std	Z+2, r26	; 0x02
    261e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2620:	8e 01       	movw	r16, r28
    2622:	03 5b       	subi	r16, 0xB3	; 179
    2624:	1f 4f       	sbci	r17, 0xFF	; 255
    2626:	fe 01       	movw	r30, r28
    2628:	ef 5a       	subi	r30, 0xAF	; 175
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	60 81       	ld	r22, Z
    262e:	71 81       	ldd	r23, Z+1	; 0x01
    2630:	82 81       	ldd	r24, Z+2	; 0x02
    2632:	93 81       	ldd	r25, Z+3	; 0x03
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	4a ef       	ldi	r20, 0xFA	; 250
    263a:	54 e4       	ldi	r21, 0x44	; 68
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	f8 01       	movw	r30, r16
    2646:	80 83       	st	Z, r24
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	a2 83       	std	Z+2, r26	; 0x02
    264c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    264e:	fe 01       	movw	r30, r28
    2650:	e3 5b       	subi	r30, 0xB3	; 179
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e8       	ldi	r20, 0x80	; 128
    2662:	5f e3       	ldi	r21, 0x3F	; 63
    2664:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2668:	88 23       	and	r24, r24
    266a:	44 f4       	brge	.+16     	; 0x267c <LCD_voidInit+0xea4>
		__ticks = 1;
    266c:	fe 01       	movw	r30, r28
    266e:	e5 5b       	subi	r30, 0xB5	; 181
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	80 83       	st	Z, r24
    267a:	64 c0       	rjmp	.+200    	; 0x2744 <LCD_voidInit+0xf6c>
	else if (__tmp > 65535)
    267c:	fe 01       	movw	r30, r28
    267e:	e3 5b       	subi	r30, 0xB3	; 179
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	3f ef       	ldi	r19, 0xFF	; 255
    268e:	4f e7       	ldi	r20, 0x7F	; 127
    2690:	57 e4       	ldi	r21, 0x47	; 71
    2692:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2696:	18 16       	cp	r1, r24
    2698:	0c f0       	brlt	.+2      	; 0x269c <LCD_voidInit+0xec4>
    269a:	43 c0       	rjmp	.+134    	; 0x2722 <LCD_voidInit+0xf4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269c:	fe 01       	movw	r30, r28
    269e:	ef 5a       	subi	r30, 0xAF	; 175
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	60 81       	ld	r22, Z
    26a4:	71 81       	ldd	r23, Z+1	; 0x01
    26a6:	82 81       	ldd	r24, Z+2	; 0x02
    26a8:	93 81       	ldd	r25, Z+3	; 0x03
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e2       	ldi	r20, 0x20	; 32
    26b0:	51 e4       	ldi	r21, 0x41	; 65
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	8e 01       	movw	r16, r28
    26bc:	05 5b       	subi	r16, 0xB5	; 181
    26be:	1f 4f       	sbci	r17, 0xFF	; 255
    26c0:	bc 01       	movw	r22, r24
    26c2:	cd 01       	movw	r24, r26
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	f8 01       	movw	r30, r16
    26ce:	91 83       	std	Z+1, r25	; 0x01
    26d0:	80 83       	st	Z, r24
    26d2:	1f c0       	rjmp	.+62     	; 0x2712 <LCD_voidInit+0xf3a>
    26d4:	fe 01       	movw	r30, r28
    26d6:	e7 5b       	subi	r30, 0xB7	; 183
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	88 ec       	ldi	r24, 0xC8	; 200
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	80 83       	st	Z, r24
    26e2:	fe 01       	movw	r30, r28
    26e4:	e7 5b       	subi	r30, 0xB7	; 183
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	80 81       	ld	r24, Z
    26ea:	91 81       	ldd	r25, Z+1	; 0x01
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <LCD_voidInit+0xf14>
    26f0:	fe 01       	movw	r30, r28
    26f2:	e7 5b       	subi	r30, 0xB7	; 183
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fa:	de 01       	movw	r26, r28
    26fc:	a5 5b       	subi	r26, 0xB5	; 181
    26fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2700:	fe 01       	movw	r30, r28
    2702:	e5 5b       	subi	r30, 0xB5	; 181
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	91 81       	ldd	r25, Z+1	; 0x01
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	11 96       	adiw	r26, 0x01	; 1
    270e:	9c 93       	st	X, r25
    2710:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2712:	fe 01       	movw	r30, r28
    2714:	e5 5b       	subi	r30, 0xB5	; 181
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	91 81       	ldd	r25, Z+1	; 0x01
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	d1 f6       	brne	.-76     	; 0x26d4 <LCD_voidInit+0xefc>
    2720:	27 c0       	rjmp	.+78     	; 0x2770 <LCD_voidInit+0xf98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2722:	8e 01       	movw	r16, r28
    2724:	05 5b       	subi	r16, 0xB5	; 181
    2726:	1f 4f       	sbci	r17, 0xFF	; 255
    2728:	fe 01       	movw	r30, r28
    272a:	e3 5b       	subi	r30, 0xB3	; 179
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	60 81       	ld	r22, Z
    2730:	71 81       	ldd	r23, Z+1	; 0x01
    2732:	82 81       	ldd	r24, Z+2	; 0x02
    2734:	93 81       	ldd	r25, Z+3	; 0x03
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	f8 01       	movw	r30, r16
    2740:	91 83       	std	Z+1, r25	; 0x01
    2742:	80 83       	st	Z, r24
    2744:	de 01       	movw	r26, r28
    2746:	a9 5b       	subi	r26, 0xB9	; 185
    2748:	bf 4f       	sbci	r27, 0xFF	; 255
    274a:	fe 01       	movw	r30, r28
    274c:	e5 5b       	subi	r30, 0xB5	; 181
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	8d 93       	st	X+, r24
    2756:	9c 93       	st	X, r25
    2758:	fe 01       	movw	r30, r28
    275a:	e9 5b       	subi	r30, 0xB9	; 185
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <LCD_voidInit+0xf8a>
    2766:	fe 01       	movw	r30, r28
    2768:	e9 5b       	subi	r30, 0xB9	; 185
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	80 83       	st	Z, r24
				 _delay_ms(1);
				 
				u8CmdLoc = 0x80|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<6 | 
    2770:	fe 01       	movw	r30, r28
    2772:	ea 53       	subi	r30, 0x3A	; 58
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	80 81       	ld	r24, Z
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	c9 01       	movw	r24, r18
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	82 0f       	add	r24, r18
    2784:	93 1f       	adc	r25, r19
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	fc 01       	movw	r30, r24
    2790:	e8 59       	subi	r30, 0x98	; 152
    2792:	fe 4f       	sbci	r31, 0xFE	; 254
    2794:	80 81       	ld	r24, Z
    2796:	86 95       	lsr	r24
    2798:	86 95       	lsr	r24
    279a:	81 70       	andi	r24, 0x01	; 1
    279c:	88 2f       	mov	r24, r24
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	00 24       	eor	r0, r0
    27a2:	96 95       	lsr	r25
    27a4:	87 95       	ror	r24
    27a6:	07 94       	ror	r0
    27a8:	96 95       	lsr	r25
    27aa:	87 95       	ror	r24
    27ac:	07 94       	ror	r0
    27ae:	98 2f       	mov	r25, r24
    27b0:	80 2d       	mov	r24, r0
    27b2:	48 2f       	mov	r20, r24
    27b4:	40 68       	ori	r20, 0x80	; 128
    27b6:	fe 01       	movw	r30, r28
    27b8:	ea 53       	subi	r30, 0x3A	; 58
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	80 81       	ld	r24, Z
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	c9 01       	movw	r24, r18
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	82 0f       	add	r24, r18
    27ca:	93 1f       	adc	r25, r19
    27cc:	88 0f       	add	r24, r24
    27ce:	99 1f       	adc	r25, r25
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	fc 01       	movw	r30, r24
    27d6:	e8 59       	subi	r30, 0x98	; 152
    27d8:	fe 4f       	sbci	r31, 0xFE	; 254
    27da:	80 81       	ld	r24, Z
    27dc:	86 95       	lsr	r24
    27de:	86 95       	lsr	r24
    27e0:	86 95       	lsr	r24
    27e2:	81 70       	andi	r24, 0x01	; 1
    27e4:	88 2f       	mov	r24, r24
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	88 0f       	add	r24, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	82 95       	swap	r24
    27ee:	92 95       	swap	r25
    27f0:	90 7f       	andi	r25, 0xF0	; 240
    27f2:	98 27       	eor	r25, r24
    27f4:	80 7f       	andi	r24, 0xF0	; 240
    27f6:	98 27       	eor	r25, r24
    27f8:	48 2b       	or	r20, r24
    27fa:	fe 01       	movw	r30, r28
    27fc:	ea 53       	subi	r30, 0x3A	; 58
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	80 81       	ld	r24, Z
    2802:	28 2f       	mov	r18, r24
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	c9 01       	movw	r24, r18
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	82 0f       	add	r24, r18
    280e:	93 1f       	adc	r25, r19
    2810:	88 0f       	add	r24, r24
    2812:	99 1f       	adc	r25, r25
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	fc 01       	movw	r30, r24
    281a:	e8 59       	subi	r30, 0x98	; 152
    281c:	fe 4f       	sbci	r31, 0xFE	; 254
    281e:	80 81       	ld	r24, Z
    2820:	82 95       	swap	r24
    2822:	8f 70       	andi	r24, 0x0F	; 15
    2824:	81 70       	andi	r24, 0x01	; 1
    2826:	88 2f       	mov	r24, r24
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	82 95       	swap	r24
    282c:	92 95       	swap	r25
    282e:	90 7f       	andi	r25, 0xF0	; 240
    2830:	98 27       	eor	r25, r24
    2832:	80 7f       	andi	r24, 0xF0	; 240
    2834:	98 27       	eor	r25, r24
    2836:	84 2b       	or	r24, r20
    2838:	fe 01       	movw	r30, r28
    283a:	eb 53       	subi	r30, 0x3B	; 59
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<5 |
								LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<4 ; 
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    2840:	fe 01       	movw	r30, r28
    2842:	ea 53       	subi	r30, 0x3A	; 58
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	de 01       	movw	r26, r28
    2848:	ab 53       	subi	r26, 0x3B	; 59
    284a:	bf 4f       	sbci	r27, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	6c 91       	ld	r22, X
    2850:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    2854:	fe 01       	movw	r30, r28
    2856:	ed 5b       	subi	r30, 0xBD	; 189
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	a0 e8       	ldi	r26, 0x80	; 128
    2860:	bf e3       	ldi	r27, 0x3F	; 63
    2862:	80 83       	st	Z, r24
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	a2 83       	std	Z+2, r26	; 0x02
    2868:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286a:	8e 01       	movw	r16, r28
    286c:	01 5c       	subi	r16, 0xC1	; 193
    286e:	1f 4f       	sbci	r17, 0xFF	; 255
    2870:	fe 01       	movw	r30, r28
    2872:	ed 5b       	subi	r30, 0xBD	; 189
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	60 81       	ld	r22, Z
    2878:	71 81       	ldd	r23, Z+1	; 0x01
    287a:	82 81       	ldd	r24, Z+2	; 0x02
    287c:	93 81       	ldd	r25, Z+3	; 0x03
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	4a ef       	ldi	r20, 0xFA	; 250
    2884:	54 e4       	ldi	r21, 0x44	; 68
    2886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	f8 01       	movw	r30, r16
    2890:	80 83       	st	Z, r24
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	a2 83       	std	Z+2, r26	; 0x02
    2896:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2898:	fe 01       	movw	r30, r28
    289a:	ff 96       	adiw	r30, 0x3f	; 63
    289c:	60 81       	ld	r22, Z
    289e:	71 81       	ldd	r23, Z+1	; 0x01
    28a0:	82 81       	ldd	r24, Z+2	; 0x02
    28a2:	93 81       	ldd	r25, Z+3	; 0x03
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e8       	ldi	r20, 0x80	; 128
    28aa:	5f e3       	ldi	r21, 0x3F	; 63
    28ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b0:	88 23       	and	r24, r24
    28b2:	2c f4       	brge	.+10     	; 0x28be <LCD_voidInit+0x10e6>
		__ticks = 1;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9e af       	std	Y+62, r25	; 0x3e
    28ba:	8d af       	std	Y+61, r24	; 0x3d
    28bc:	46 c0       	rjmp	.+140    	; 0x294a <LCD_voidInit+0x1172>
	else if (__tmp > 65535)
    28be:	fe 01       	movw	r30, r28
    28c0:	ff 96       	adiw	r30, 0x3f	; 63
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	3f ef       	ldi	r19, 0xFF	; 255
    28ce:	4f e7       	ldi	r20, 0x7F	; 127
    28d0:	57 e4       	ldi	r21, 0x47	; 71
    28d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d6:	18 16       	cp	r1, r24
    28d8:	64 f5       	brge	.+88     	; 0x2932 <LCD_voidInit+0x115a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28da:	fe 01       	movw	r30, r28
    28dc:	ed 5b       	subi	r30, 0xBD	; 189
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	60 81       	ld	r22, Z
    28e2:	71 81       	ldd	r23, Z+1	; 0x01
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	9e af       	std	Y+62, r25	; 0x3e
    2906:	8d af       	std	Y+61, r24	; 0x3d
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <LCD_voidInit+0x1150>
    290a:	88 ec       	ldi	r24, 0xC8	; 200
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9c af       	std	Y+60, r25	; 0x3c
    2910:	8b af       	std	Y+59, r24	; 0x3b
    2912:	8b ad       	ldd	r24, Y+59	; 0x3b
    2914:	9c ad       	ldd	r25, Y+60	; 0x3c
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <LCD_voidInit+0x113e>
    291a:	9c af       	std	Y+60, r25	; 0x3c
    291c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2920:	9e ad       	ldd	r25, Y+62	; 0x3e
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	9e af       	std	Y+62, r25	; 0x3e
    2926:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2928:	8d ad       	ldd	r24, Y+61	; 0x3d
    292a:	9e ad       	ldd	r25, Y+62	; 0x3e
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	69 f7       	brne	.-38     	; 0x290a <LCD_voidInit+0x1132>
    2930:	16 c0       	rjmp	.+44     	; 0x295e <LCD_voidInit+0x1186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2932:	fe 01       	movw	r30, r28
    2934:	ff 96       	adiw	r30, 0x3f	; 63
    2936:	60 81       	ld	r22, Z
    2938:	71 81       	ldd	r23, Z+1	; 0x01
    293a:	82 81       	ldd	r24, Z+2	; 0x02
    293c:	93 81       	ldd	r25, Z+3	; 0x03
    293e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	9e af       	std	Y+62, r25	; 0x3e
    2948:	8d af       	std	Y+61, r24	; 0x3d
    294a:	8d ad       	ldd	r24, Y+61	; 0x3d
    294c:	9e ad       	ldd	r25, Y+62	; 0x3e
    294e:	9a af       	std	Y+58, r25	; 0x3a
    2950:	89 af       	std	Y+57, r24	; 0x39
    2952:	89 ad       	ldd	r24, Y+57	; 0x39
    2954:	9a ad       	ldd	r25, Y+58	; 0x3a
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	f1 f7       	brne	.-4      	; 0x2956 <LCD_voidInit+0x117e>
    295a:	9a af       	std	Y+58, r25	; 0x3a
    295c:	89 af       	std	Y+57, r24	; 0x39
				 _delay_ms(1);
				
				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    295e:	fe 01       	movw	r30, r28
    2960:	ea 53       	subi	r30, 0x3A	; 58
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 81       	ld	r24, Z
    2966:	60 e0       	ldi	r22, 0x00	; 0
    2968:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	a0 e8       	ldi	r26, 0x80	; 128
    2972:	bf e3       	ldi	r27, 0x3F	; 63
    2974:	8d ab       	std	Y+53, r24	; 0x35
    2976:	9e ab       	std	Y+54, r25	; 0x36
    2978:	af ab       	std	Y+55, r26	; 0x37
    297a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297c:	6d a9       	ldd	r22, Y+53	; 0x35
    297e:	7e a9       	ldd	r23, Y+54	; 0x36
    2980:	8f a9       	ldd	r24, Y+55	; 0x37
    2982:	98 ad       	ldd	r25, Y+56	; 0x38
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	4a ef       	ldi	r20, 0xFA	; 250
    298a:	54 e4       	ldi	r21, 0x44	; 68
    298c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	89 ab       	std	Y+49, r24	; 0x31
    2996:	9a ab       	std	Y+50, r25	; 0x32
    2998:	ab ab       	std	Y+51, r26	; 0x33
    299a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    299c:	69 a9       	ldd	r22, Y+49	; 0x31
    299e:	7a a9       	ldd	r23, Y+50	; 0x32
    29a0:	8b a9       	ldd	r24, Y+51	; 0x33
    29a2:	9c a9       	ldd	r25, Y+52	; 0x34
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e8       	ldi	r20, 0x80	; 128
    29aa:	5f e3       	ldi	r21, 0x3F	; 63
    29ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29b0:	88 23       	and	r24, r24
    29b2:	2c f4       	brge	.+10     	; 0x29be <LCD_voidInit+0x11e6>
		__ticks = 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	98 ab       	std	Y+48, r25	; 0x30
    29ba:	8f a7       	std	Y+47, r24	; 0x2f
    29bc:	3f c0       	rjmp	.+126    	; 0x2a3c <LCD_voidInit+0x1264>
	else if (__tmp > 65535)
    29be:	69 a9       	ldd	r22, Y+49	; 0x31
    29c0:	7a a9       	ldd	r23, Y+50	; 0x32
    29c2:	8b a9       	ldd	r24, Y+51	; 0x33
    29c4:	9c a9       	ldd	r25, Y+52	; 0x34
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f e7       	ldi	r20, 0x7F	; 127
    29cc:	57 e4       	ldi	r21, 0x47	; 71
    29ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	4c f5       	brge	.+82     	; 0x2a28 <LCD_voidInit+0x1250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	6d a9       	ldd	r22, Y+53	; 0x35
    29d8:	7e a9       	ldd	r23, Y+54	; 0x36
    29da:	8f a9       	ldd	r24, Y+55	; 0x37
    29dc:	98 ad       	ldd	r25, Y+56	; 0x38
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e2       	ldi	r20, 0x20	; 32
    29e4:	51 e4       	ldi	r21, 0x41	; 65
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	98 ab       	std	Y+48, r25	; 0x30
    29fc:	8f a7       	std	Y+47, r24	; 0x2f
    29fe:	0f c0       	rjmp	.+30     	; 0x2a1e <LCD_voidInit+0x1246>
    2a00:	88 ec       	ldi	r24, 0xC8	; 200
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9e a7       	std	Y+46, r25	; 0x2e
    2a06:	8d a7       	std	Y+45, r24	; 0x2d
    2a08:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a0a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <LCD_voidInit+0x1234>
    2a10:	9e a7       	std	Y+46, r25	; 0x2e
    2a12:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a16:	98 a9       	ldd	r25, Y+48	; 0x30
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	98 ab       	std	Y+48, r25	; 0x30
    2a1c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a20:	98 a9       	ldd	r25, Y+48	; 0x30
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	69 f7       	brne	.-38     	; 0x2a00 <LCD_voidInit+0x1228>
    2a26:	14 c0       	rjmp	.+40     	; 0x2a50 <LCD_voidInit+0x1278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a28:	69 a9       	ldd	r22, Y+49	; 0x31
    2a2a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a2e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	98 ab       	std	Y+48, r25	; 0x30
    2a3a:	8f a7       	std	Y+47, r24	; 0x2f
    2a3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a40:	9c a7       	std	Y+44, r25	; 0x2c
    2a42:	8b a7       	std	Y+43, r24	; 0x2b
    2a44:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a46:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <LCD_voidInit+0x1270>
    2a4c:	9c a7       	std	Y+44, r25	; 0x2c
    2a4e:	8b a7       	std	Y+43, r24	; 0x2b
			    _delay_ms(1);
				LCD_enuWriteCmd(u8CntrLoc , 0x10 );
    2a50:	fe 01       	movw	r30, r28
    2a52:	ea 53       	subi	r30, 0x3A	; 58
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 81       	ld	r24, Z
    2a58:	60 e1       	ldi	r22, 0x10	; 16
    2a5a:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a0 e8       	ldi	r26, 0x80	; 128
    2a64:	bf e3       	ldi	r27, 0x3F	; 63
    2a66:	8f a3       	std	Y+39, r24	; 0x27
    2a68:	98 a7       	std	Y+40, r25	; 0x28
    2a6a:	a9 a7       	std	Y+41, r26	; 0x29
    2a6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a70:	78 a5       	ldd	r23, Y+40	; 0x28
    2a72:	89 a5       	ldd	r24, Y+41	; 0x29
    2a74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	4a ef       	ldi	r20, 0xFA	; 250
    2a7c:	54 e4       	ldi	r21, 0x44	; 68
    2a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	8b a3       	std	Y+35, r24	; 0x23
    2a88:	9c a3       	std	Y+36, r25	; 0x24
    2a8a:	ad a3       	std	Y+37, r26	; 0x25
    2a8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a90:	7c a1       	ldd	r23, Y+36	; 0x24
    2a92:	8d a1       	ldd	r24, Y+37	; 0x25
    2a94:	9e a1       	ldd	r25, Y+38	; 0x26
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e8       	ldi	r20, 0x80	; 128
    2a9c:	5f e3       	ldi	r21, 0x3F	; 63
    2a9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa2:	88 23       	and	r24, r24
    2aa4:	2c f4       	brge	.+10     	; 0x2ab0 <LCD_voidInit+0x12d8>
		__ticks = 1;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	9a a3       	std	Y+34, r25	; 0x22
    2aac:	89 a3       	std	Y+33, r24	; 0x21
    2aae:	3f c0       	rjmp	.+126    	; 0x2b2e <LCD_voidInit+0x1356>
	else if (__tmp > 65535)
    2ab0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ab2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ab4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	3f ef       	ldi	r19, 0xFF	; 255
    2abc:	4f e7       	ldi	r20, 0x7F	; 127
    2abe:	57 e4       	ldi	r21, 0x47	; 71
    2ac0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac4:	18 16       	cp	r1, r24
    2ac6:	4c f5       	brge	.+82     	; 0x2b1a <LCD_voidInit+0x1342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac8:	6f a1       	ldd	r22, Y+39	; 0x27
    2aca:	78 a5       	ldd	r23, Y+40	; 0x28
    2acc:	89 a5       	ldd	r24, Y+41	; 0x29
    2ace:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e2       	ldi	r20, 0x20	; 32
    2ad6:	51 e4       	ldi	r21, 0x41	; 65
    2ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9a a3       	std	Y+34, r25	; 0x22
    2aee:	89 a3       	std	Y+33, r24	; 0x21
    2af0:	0f c0       	rjmp	.+30     	; 0x2b10 <LCD_voidInit+0x1338>
    2af2:	88 ec       	ldi	r24, 0xC8	; 200
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	98 a3       	std	Y+32, r25	; 0x20
    2af8:	8f 8f       	std	Y+31, r24	; 0x1f
    2afa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2afc:	98 a1       	ldd	r25, Y+32	; 0x20
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <LCD_voidInit+0x1326>
    2b02:	98 a3       	std	Y+32, r25	; 0x20
    2b04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b06:	89 a1       	ldd	r24, Y+33	; 0x21
    2b08:	9a a1       	ldd	r25, Y+34	; 0x22
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	9a a3       	std	Y+34, r25	; 0x22
    2b0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b10:	89 a1       	ldd	r24, Y+33	; 0x21
    2b12:	9a a1       	ldd	r25, Y+34	; 0x22
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	69 f7       	brne	.-38     	; 0x2af2 <LCD_voidInit+0x131a>
    2b18:	14 c0       	rjmp	.+40     	; 0x2b42 <LCD_voidInit+0x136a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b20:	9e a1       	ldd	r25, Y+38	; 0x26
    2b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	9a a3       	std	Y+34, r25	; 0x22
    2b2c:	89 a3       	std	Y+33, r24	; 0x21
    2b2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b30:	9a a1       	ldd	r25, Y+34	; 0x22
    2b32:	9e 8f       	std	Y+30, r25	; 0x1e
    2b34:	8d 8f       	std	Y+29, r24	; 0x1d
    2b36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <LCD_voidInit+0x1362>
    2b3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b40:	8d 8f       	std	Y+29, r24	; 0x1d
				 _delay_ms(1);

				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    2b42:	fe 01       	movw	r30, r28
    2b44:	ea 53       	subi	r30, 0x3A	; 58
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	60 e0       	ldi	r22, 0x00	; 0
    2b4c:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a0 e8       	ldi	r26, 0x80	; 128
    2b56:	bf e3       	ldi	r27, 0x3F	; 63
    2b58:	89 8f       	std	Y+25, r24	; 0x19
    2b5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2b5c:	ab 8f       	std	Y+27, r26	; 0x1b
    2b5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b60:	69 8d       	ldd	r22, Y+25	; 0x19
    2b62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	4a ef       	ldi	r20, 0xFA	; 250
    2b6e:	54 e4       	ldi	r21, 0x44	; 68
    2b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	8d 8b       	std	Y+21, r24	; 0x15
    2b7a:	9e 8b       	std	Y+22, r25	; 0x16
    2b7c:	af 8b       	std	Y+23, r26	; 0x17
    2b7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b80:	6d 89       	ldd	r22, Y+21	; 0x15
    2b82:	7e 89       	ldd	r23, Y+22	; 0x16
    2b84:	8f 89       	ldd	r24, Y+23	; 0x17
    2b86:	98 8d       	ldd	r25, Y+24	; 0x18
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e8       	ldi	r20, 0x80	; 128
    2b8e:	5f e3       	ldi	r21, 0x3F	; 63
    2b90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b94:	88 23       	and	r24, r24
    2b96:	2c f4       	brge	.+10     	; 0x2ba2 <LCD_voidInit+0x13ca>
		__ticks = 1;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	9c 8b       	std	Y+20, r25	; 0x14
    2b9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ba0:	3f c0       	rjmp	.+126    	; 0x2c20 <LCD_voidInit+0x1448>
	else if (__tmp > 65535)
    2ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	3f ef       	ldi	r19, 0xFF	; 255
    2bae:	4f e7       	ldi	r20, 0x7F	; 127
    2bb0:	57 e4       	ldi	r21, 0x47	; 71
    2bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb6:	18 16       	cp	r1, r24
    2bb8:	4c f5       	brge	.+82     	; 0x2c0c <LCD_voidInit+0x1434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bba:	69 8d       	ldd	r22, Y+25	; 0x19
    2bbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e2       	ldi	r20, 0x20	; 32
    2bc8:	51 e4       	ldi	r21, 0x41	; 65
    2bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9c 8b       	std	Y+20, r25	; 0x14
    2be0:	8b 8b       	std	Y+19, r24	; 0x13
    2be2:	0f c0       	rjmp	.+30     	; 0x2c02 <LCD_voidInit+0x142a>
    2be4:	88 ec       	ldi	r24, 0xC8	; 200
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	9a 8b       	std	Y+18, r25	; 0x12
    2bea:	89 8b       	std	Y+17, r24	; 0x11
    2bec:	89 89       	ldd	r24, Y+17	; 0x11
    2bee:	9a 89       	ldd	r25, Y+18	; 0x12
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <LCD_voidInit+0x1418>
    2bf4:	9a 8b       	std	Y+18, r25	; 0x12
    2bf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	9c 8b       	std	Y+20, r25	; 0x14
    2c00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c02:	8b 89       	ldd	r24, Y+19	; 0x13
    2c04:	9c 89       	ldd	r25, Y+20	; 0x14
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	69 f7       	brne	.-38     	; 0x2be4 <LCD_voidInit+0x140c>
    2c0a:	14 c0       	rjmp	.+40     	; 0x2c34 <LCD_voidInit+0x145c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c10:	8f 89       	ldd	r24, Y+23	; 0x17
    2c12:	98 8d       	ldd	r25, Y+24	; 0x18
    2c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	9c 8b       	std	Y+20, r25	; 0x14
    2c1e:	8b 8b       	std	Y+19, r24	; 0x13
    2c20:	8b 89       	ldd	r24, Y+19	; 0x13
    2c22:	9c 89       	ldd	r25, Y+20	; 0x14
    2c24:	98 8b       	std	Y+16, r25	; 0x10
    2c26:	8f 87       	std	Y+15, r24	; 0x0f
    2c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c2a:	98 89       	ldd	r25, Y+16	; 0x10
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <LCD_voidInit+0x1454>
    2c30:	98 8b       	std	Y+16, r25	; 0x10
    2c32:	8f 87       	std	Y+15, r24	; 0x0f
			    _delay_ms(1);
				
				u8CmdLoc = 0x40|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment    <<5 | 
    2c34:	fe 01       	movw	r30, r28
    2c36:	ea 53       	subi	r30, 0x3A	; 58
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	28 2f       	mov	r18, r24
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	c9 01       	movw	r24, r18
    2c42:	88 0f       	add	r24, r24
    2c44:	99 1f       	adc	r25, r25
    2c46:	82 0f       	add	r24, r18
    2c48:	93 1f       	adc	r25, r19
    2c4a:	88 0f       	add	r24, r24
    2c4c:	99 1f       	adc	r25, r25
    2c4e:	88 0f       	add	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	fc 01       	movw	r30, r24
    2c54:	e8 59       	subi	r30, 0x98	; 152
    2c56:	fe 4f       	sbci	r31, 0xFE	; 254
    2c58:	80 81       	ld	r24, Z
    2c5a:	82 95       	swap	r24
    2c5c:	86 95       	lsr	r24
    2c5e:	86 95       	lsr	r24
    2c60:	83 70       	andi	r24, 0x03	; 3
    2c62:	81 70       	andi	r24, 0x01	; 1
    2c64:	88 2f       	mov	r24, r24
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	82 95       	swap	r24
    2c6e:	92 95       	swap	r25
    2c70:	90 7f       	andi	r25, 0xF0	; 240
    2c72:	98 27       	eor	r25, r24
    2c74:	80 7f       	andi	r24, 0xF0	; 240
    2c76:	98 27       	eor	r25, r24
    2c78:	48 2f       	mov	r20, r24
    2c7a:	40 64       	ori	r20, 0x40	; 64
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	ea 53       	subi	r30, 0x3A	; 58
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	80 81       	ld	r24, Z
    2c84:	28 2f       	mov	r18, r24
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	c9 01       	movw	r24, r18
    2c8a:	88 0f       	add	r24, r24
    2c8c:	99 1f       	adc	r25, r25
    2c8e:	82 0f       	add	r24, r18
    2c90:	93 1f       	adc	r25, r19
    2c92:	88 0f       	add	r24, r24
    2c94:	99 1f       	adc	r25, r25
    2c96:	88 0f       	add	r24, r24
    2c98:	99 1f       	adc	r25, r25
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	e8 59       	subi	r30, 0x98	; 152
    2c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca0:	80 81       	ld	r24, Z
    2ca2:	88 1f       	adc	r24, r24
    2ca4:	88 27       	eor	r24, r24
    2ca6:	88 1f       	adc	r24, r24
    2ca8:	88 2f       	mov	r24, r24
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	82 95       	swap	r24
    2cae:	92 95       	swap	r25
    2cb0:	90 7f       	andi	r25, 0xF0	; 240
    2cb2:	98 27       	eor	r25, r24
    2cb4:	80 7f       	andi	r24, 0xF0	; 240
    2cb6:	98 27       	eor	r25, r24
    2cb8:	84 2b       	or	r24, r20
    2cba:	fe 01       	movw	r30, r28
    2cbc:	eb 53       	subi	r30, 0x3B	; 59
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift <<4 ; 
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	ea 53       	subi	r30, 0x3A	; 58
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	de 01       	movw	r26, r28
    2cca:	ab 53       	subi	r26, 0x3B	; 59
    2ccc:	bf 4f       	sbci	r27, 0xFF	; 255
    2cce:	80 81       	ld	r24, Z
    2cd0:	6c 91       	ld	r22, X
    2cd2:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	a0 e8       	ldi	r26, 0x80	; 128
    2cdc:	bf e3       	ldi	r27, 0x3F	; 63
    2cde:	8b 87       	std	Y+11, r24	; 0x0b
    2ce0:	9c 87       	std	Y+12, r25	; 0x0c
    2ce2:	ad 87       	std	Y+13, r26	; 0x0d
    2ce4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	4a ef       	ldi	r20, 0xFA	; 250
    2cf4:	54 e4       	ldi	r21, 0x44	; 68
    2cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	8f 83       	std	Y+7, r24	; 0x07
    2d00:	98 87       	std	Y+8, r25	; 0x08
    2d02:	a9 87       	std	Y+9, r26	; 0x09
    2d04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d06:	6f 81       	ldd	r22, Y+7	; 0x07
    2d08:	78 85       	ldd	r23, Y+8	; 0x08
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e8       	ldi	r20, 0x80	; 128
    2d14:	5f e3       	ldi	r21, 0x3F	; 63
    2d16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d1a:	88 23       	and	r24, r24
    2d1c:	2c f4       	brge	.+10     	; 0x2d28 <LCD_voidInit+0x1550>
		__ticks = 1;
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	9e 83       	std	Y+6, r25	; 0x06
    2d24:	8d 83       	std	Y+5, r24	; 0x05
    2d26:	3f c0       	rjmp	.+126    	; 0x2da6 <LCD_voidInit+0x15ce>
	else if (__tmp > 65535)
    2d28:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2a:	78 85       	ldd	r23, Y+8	; 0x08
    2d2c:	89 85       	ldd	r24, Y+9	; 0x09
    2d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	3f ef       	ldi	r19, 0xFF	; 255
    2d34:	4f e7       	ldi	r20, 0x7F	; 127
    2d36:	57 e4       	ldi	r21, 0x47	; 71
    2d38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d3c:	18 16       	cp	r1, r24
    2d3e:	4c f5       	brge	.+82     	; 0x2d92 <LCD_voidInit+0x15ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e2       	ldi	r20, 0x20	; 32
    2d4e:	51 e4       	ldi	r21, 0x41	; 65
    2d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	bc 01       	movw	r22, r24
    2d5a:	cd 01       	movw	r24, r26
    2d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	9e 83       	std	Y+6, r25	; 0x06
    2d66:	8d 83       	std	Y+5, r24	; 0x05
    2d68:	0f c0       	rjmp	.+30     	; 0x2d88 <LCD_voidInit+0x15b0>
    2d6a:	88 ec       	ldi	r24, 0xC8	; 200
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	9c 83       	std	Y+4, r25	; 0x04
    2d70:	8b 83       	std	Y+3, r24	; 0x03
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	9c 81       	ldd	r25, Y+4	; 0x04
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <LCD_voidInit+0x159e>
    2d7a:	9c 83       	std	Y+4, r25	; 0x04
    2d7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d80:	9e 81       	ldd	r25, Y+6	; 0x06
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	9e 83       	std	Y+6, r25	; 0x06
    2d86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d88:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	69 f7       	brne	.-38     	; 0x2d6a <LCD_voidInit+0x1592>
    2d90:	14 c0       	rjmp	.+40     	; 0x2dba <LCD_voidInit+0x15e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d92:	6f 81       	ldd	r22, Y+7	; 0x07
    2d94:	78 85       	ldd	r23, Y+8	; 0x08
    2d96:	89 85       	ldd	r24, Y+9	; 0x09
    2d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	9e 83       	std	Y+6, r25	; 0x06
    2da4:	8d 83       	std	Y+5, r24	; 0x05
    2da6:	8d 81       	ldd	r24, Y+5	; 0x05
    2da8:	9e 81       	ldd	r25, Y+6	; 0x06
    2daa:	9a 83       	std	Y+2, r25	; 0x02
    2dac:	89 83       	std	Y+1, r24	; 0x01
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	9a 81       	ldd	r25, Y+2	; 0x02
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	f1 f7       	brne	.-4      	; 0x2db2 <LCD_voidInit+0x15da>
    2db6:	9a 83       	std	Y+2, r25	; 0x02
    2db8:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void) 
{
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
    2dba:	de 01       	movw	r26, r28
    2dbc:	aa 53       	subi	r26, 0x3A	; 58
    2dbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	ea 53       	subi	r30, 0x3A	; 58
    2dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc6:	80 81       	ld	r24, Z
    2dc8:	8f 5f       	subi	r24, 0xFF	; 255
    2dca:	8c 93       	st	X, r24
    2dcc:	fe 01       	movw	r30, r28
    2dce:	ea 53       	subi	r30, 0x3A	; 58
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	88 23       	and	r24, r24
    2dd6:	11 f4       	brne	.+4      	; 0x2ddc <LCD_voidInit+0x1604>
    2dd8:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <LCD_voidInit+0x26>
		
		
		
		
	}
}
    2ddc:	ca 53       	subi	r28, 0x3A	; 58
    2dde:	df 4f       	sbci	r29, 0xFF	; 255
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	f8 94       	cli
    2de4:	de bf       	out	0x3e, r29	; 62
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	cd bf       	out	0x3d, r28	; 61
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	1f 91       	pop	r17
    2df0:	0f 91       	pop	r16
    2df2:	08 95       	ret

00002df4 <LCD_enuWriteCmd>:

tenuErrorStatus LCD_enuWriteCmd (uint8 u8LcdNumCpy , uint8 u8CmdCpy)
{
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <LCD_enuWriteCmd+0x6>
    2dfa:	0f 92       	push	r0
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	8a 83       	std	Y+2, r24	; 0x02
    2e02:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    2e04:	19 82       	std	Y+1, r1	; 0x01
	if (u8LcdNumCpy < LCD_MAX_NUM )
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	88 23       	and	r24, r24
    2e0a:	c9 f4       	brne	.+50     	; 0x2e3e <LCD_enuWriteCmd+0x4a>
	{
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect,DIO_u8LOW);
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	c9 01       	movw	r24, r18
    2e14:	88 0f       	add	r24, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	82 0f       	add	r24, r18
    2e1a:	93 1f       	adc	r25, r19
    2e1c:	88 0f       	add	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	88 0f       	add	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	fc 01       	movw	r30, r24
    2e26:	e7 59       	subi	r30, 0x97	; 151
    2e28:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2a:	80 81       	ld	r24, Z
    2e2c:	60 e0       	ldi	r22, 0x00	; 0
    2e2e:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy , u8CmdCpy );
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	6b 81       	ldd	r22, Y+3	; 0x03
    2e36:	0e 94 56 17 	call	0x2eac	; 0x2eac <LCD_enuHelp>
    2e3a:	89 83       	std	Y+1, r24	; 0x01
    2e3c:	02 c0       	rjmp	.+4      	; 0x2e42 <LCD_enuWriteCmd+0x4e>
	}
	else 
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ; 
    2e3e:	82 e0       	ldi	r24, 0x02	; 2
    2e40:	89 83       	std	Y+1, r24	; 0x01
	}	
	
	
	return enuErrorStateLoc ;
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	08 95       	ret

00002e50 <LCD_enuWriteChar>:

tenuErrorStatus LCD_enuWriteChar (uint8 u8LcdNumCpy , uint8 u8DataCpy)
{
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <LCD_enuWriteChar+0x6>
    2e56:	0f 92       	push	r0
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	8a 83       	std	Y+2, r24	; 0x02
    2e5e:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    2e60:	19 82       	std	Y+1, r1	; 0x01
	if (u8LcdNumCpy < LCD_MAX_NUM )
    2e62:	8a 81       	ldd	r24, Y+2	; 0x02
    2e64:	88 23       	and	r24, r24
    2e66:	c9 f4       	brne	.+50     	; 0x2e9a <LCD_enuWriteChar+0x4a>
	{
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect,DIO_u8HIGH);
    2e68:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	c9 01       	movw	r24, r18
    2e70:	88 0f       	add	r24, r24
    2e72:	99 1f       	adc	r25, r25
    2e74:	82 0f       	add	r24, r18
    2e76:	93 1f       	adc	r25, r19
    2e78:	88 0f       	add	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	88 0f       	add	r24, r24
    2e7e:	99 1f       	adc	r25, r25
    2e80:	fc 01       	movw	r30, r24
    2e82:	e7 59       	subi	r30, 0x97	; 151
    2e84:	fe 4f       	sbci	r31, 0xFE	; 254
    2e86:	80 81       	ld	r24, Z
    2e88:	61 e0       	ldi	r22, 0x01	; 1
    2e8a:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy , u8DataCpy );
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	6b 81       	ldd	r22, Y+3	; 0x03
    2e92:	0e 94 56 17 	call	0x2eac	; 0x2eac <LCD_enuHelp>
    2e96:	89 83       	std	Y+1, r24	; 0x01
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <LCD_enuWriteChar+0x4e>
	}
	else 
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ; 
    2e9a:	82 e0       	ldi	r24, 0x02	; 2
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	}	
	
	
	return enuErrorStateLoc ;
    2e9e:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <LCD_enuHelp>:

static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy)
{
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <LCD_enuHelp+0x6>
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <LCD_enuHelp+0x8>
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
    2eb8:	8b 83       	std	Y+3, r24	; 0x03
    2eba:	6c 83       	std	Y+4, r22	; 0x04
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    2ebc:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch   ,DIO_u8HIGH);
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	28 2f       	mov	r18, r24
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	c9 01       	movw	r24, r18
    2ec6:	88 0f       	add	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	82 0f       	add	r24, r18
    2ecc:	93 1f       	adc	r25, r19
    2ece:	88 0f       	add	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	88 0f       	add	r24, r24
    2ed4:	99 1f       	adc	r25, r25
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	e5 59       	subi	r30, 0x95	; 149
    2eda:	fe 4f       	sbci	r31, 0xFE	; 254
    2edc:	80 81       	ld	r24, Z
    2ede:	61 e0       	ldi	r22, 0x01	; 1
    2ee0:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite     ,DIO_u8LOW);
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	c9 01       	movw	r24, r18
    2eec:	88 0f       	add	r24, r24
    2eee:	99 1f       	adc	r25, r25
    2ef0:	82 0f       	add	r24, r18
    2ef2:	93 1f       	adc	r25, r19
    2ef4:	88 0f       	add	r24, r24
    2ef6:	99 1f       	adc	r25, r25
    2ef8:	01 96       	adiw	r24, 0x01	; 1
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	fc 01       	movw	r30, r24
    2f00:	e8 59       	subi	r30, 0x98	; 152
    2f02:	fe 4f       	sbci	r31, 0xFE	; 254
    2f04:	80 81       	ld	r24, Z
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
		
		if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	c9 01       	movw	r24, r18
    2f14:	88 0f       	add	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	82 0f       	add	r24, r18
    2f1a:	93 1f       	adc	r25, r19
    2f1c:	88 0f       	add	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	88 0f       	add	r24, r24
    2f22:	99 1f       	adc	r25, r25
    2f24:	fc 01       	movw	r30, r24
    2f26:	e8 59       	subi	r30, 0x98	; 152
    2f28:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2a:	80 81       	ld	r24, Z
    2f2c:	82 95       	swap	r24
    2f2e:	86 95       	lsr	r24
    2f30:	87 70       	andi	r24, 0x07	; 7
    2f32:	81 70       	andi	r24, 0x01	; 1
    2f34:	81 30       	cpi	r24, 0x01	; 1
    2f36:	89 f5       	brne	.+98     	; 0x2f9a <LCD_enuHelp+0xee>
		{
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
    2f38:	19 82       	std	Y+1, r1	; 0x01
    2f3a:	2b c0       	rjmp	.+86     	; 0x2f92 <LCD_enuHelp+0xe6>
			  {
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
    2f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3e:	28 2f       	mov	r18, r24
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	48 2f       	mov	r20, r24
    2f46:	50 e0       	ldi	r21, 0x00	; 0
    2f48:	c9 01       	movw	r24, r18
    2f4a:	88 0f       	add	r24, r24
    2f4c:	99 1f       	adc	r25, r25
    2f4e:	82 0f       	add	r24, r18
    2f50:	93 1f       	adc	r25, r19
    2f52:	88 0f       	add	r24, r24
    2f54:	99 1f       	adc	r25, r25
    2f56:	88 0f       	add	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	84 0f       	add	r24, r20
    2f5c:	95 1f       	adc	r25, r21
    2f5e:	fc 01       	movw	r30, r24
    2f60:	e4 59       	subi	r30, 0x94	; 148
    2f62:	fe 4f       	sbci	r31, 0xFE	; 254
    2f64:	40 81       	ld	r20, Z
    2f66:	8c 81       	ldd	r24, Y+4	; 0x04
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	88 2f       	mov	r24, r24
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	b9 01       	movw	r22, r18
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <LCD_enuHelp+0xce>
    2f76:	75 95       	asr	r23
    2f78:	67 95       	ror	r22
    2f7a:	8a 95       	dec	r24
    2f7c:	e2 f7       	brpl	.-8      	; 0x2f76 <LCD_enuHelp+0xca>
    2f7e:	cb 01       	movw	r24, r22
    2f80:	98 2f       	mov	r25, r24
    2f82:	91 70       	andi	r25, 0x01	; 1
    2f84:	84 2f       	mov	r24, r20
    2f86:	69 2f       	mov	r22, r25
    2f88:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch   ,DIO_u8HIGH);
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite     ,DIO_u8LOW);
		
		if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
		{
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	8f 5f       	subi	r24, 0xFF	; 255
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	88 30       	cpi	r24, 0x08	; 8
    2f96:	90 f2       	brcs	.-92     	; 0x2f3c <LCD_enuHelp+0x90>
    2f98:	4a c0       	rjmp	.+148    	; 0x302e <LCD_enuHelp+0x182>
			  {
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
			  }
		}
		else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	c9 01       	movw	r24, r18
    2fa2:	88 0f       	add	r24, r24
    2fa4:	99 1f       	adc	r25, r25
    2fa6:	82 0f       	add	r24, r18
    2fa8:	93 1f       	adc	r25, r19
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	88 0f       	add	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	e8 59       	subi	r30, 0x98	; 152
    2fb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb8:	80 81       	ld	r24, Z
    2fba:	82 95       	swap	r24
    2fbc:	86 95       	lsr	r24
    2fbe:	87 70       	andi	r24, 0x07	; 7
    2fc0:	81 70       	andi	r24, 0x01	; 1
    2fc2:	88 23       	and	r24, r24
    2fc4:	91 f5       	brne	.+100    	; 0x302a <LCD_enuHelp+0x17e>
		{   
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
    2fc6:	84 e0       	ldi	r24, 0x04	; 4
    2fc8:	89 83       	std	Y+1, r24	; 0x01
    2fca:	2b c0       	rjmp	.+86     	; 0x3022 <LCD_enuHelp+0x176>
			{
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
    2fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fce:	28 2f       	mov	r18, r24
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
    2fd4:	48 2f       	mov	r20, r24
    2fd6:	50 e0       	ldi	r21, 0x00	; 0
    2fd8:	c9 01       	movw	r24, r18
    2fda:	88 0f       	add	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	82 0f       	add	r24, r18
    2fe0:	93 1f       	adc	r25, r19
    2fe2:	88 0f       	add	r24, r24
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	84 0f       	add	r24, r20
    2fec:	95 1f       	adc	r25, r21
    2fee:	fc 01       	movw	r30, r24
    2ff0:	e4 59       	subi	r30, 0x94	; 148
    2ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff4:	40 81       	ld	r20, Z
    2ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff8:	28 2f       	mov	r18, r24
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	88 2f       	mov	r24, r24
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	b9 01       	movw	r22, r18
    3004:	02 c0       	rjmp	.+4      	; 0x300a <LCD_enuHelp+0x15e>
    3006:	75 95       	asr	r23
    3008:	67 95       	ror	r22
    300a:	8a 95       	dec	r24
    300c:	e2 f7       	brpl	.-8      	; 0x3006 <LCD_enuHelp+0x15a>
    300e:	cb 01       	movw	r24, r22
    3010:	98 2f       	mov	r25, r24
    3012:	91 70       	andi	r25, 0x01	; 1
    3014:	84 2f       	mov	r24, r20
    3016:	69 2f       	mov	r22, r25
    3018:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
			  }
		}
		else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
		{   
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	8f 5f       	subi	r24, 0xFF	; 255
    3020:	89 83       	std	Y+1, r24	; 0x01
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	88 30       	cpi	r24, 0x08	; 8
    3026:	90 f2       	brcs	.-92     	; 0x2fcc <LCD_enuHelp+0x120>
    3028:	02 c0       	rjmp	.+4      	; 0x302e <LCD_enuHelp+0x182>
			}
			
		}
		else
		{
			enuErrorStateLoc = E_NOK_CONFIG_PARM_ERROR ; 
    302a:	84 e0       	ldi	r24, 0x04	; 4
    302c:	8a 83       	std	Y+2, r24	; 0x02
		}
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch     ,DIO_u8LOW);
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	28 2f       	mov	r18, r24
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	c9 01       	movw	r24, r18
    3036:	88 0f       	add	r24, r24
    3038:	99 1f       	adc	r25, r25
    303a:	82 0f       	add	r24, r18
    303c:	93 1f       	adc	r25, r19
    303e:	88 0f       	add	r24, r24
    3040:	99 1f       	adc	r25, r25
    3042:	88 0f       	add	r24, r24
    3044:	99 1f       	adc	r25, r25
    3046:	fc 01       	movw	r30, r24
    3048:	e5 59       	subi	r30, 0x95	; 149
    304a:	fe 4f       	sbci	r31, 0xFE	; 254
    304c:	80 81       	ld	r24, Z
    304e:	60 e0       	ldi	r22, 0x00	; 0
    3050:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
	
	return enuErrorStateLoc ;
    3054:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	0f 90       	pop	r0
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	08 95       	ret

00003064 <LCD_enuWriteData>:


tenuErrorStatus LCD_enuWriteData (uint8 u8LcdNumCpy , uint8 *  pu8DataCpy , uint8 u8SizeCpy)
{
    3064:	df 93       	push	r29
    3066:	cf 93       	push	r28
    3068:	00 d0       	rcall	.+0      	; 0x306a <LCD_enuWriteData+0x6>
    306a:	00 d0       	rcall	.+0      	; 0x306c <LCD_enuWriteData+0x8>
    306c:	0f 92       	push	r0
    306e:	cd b7       	in	r28, 0x3d	; 61
    3070:	de b7       	in	r29, 0x3e	; 62
    3072:	89 83       	std	Y+1, r24	; 0x01
    3074:	7b 83       	std	Y+3, r23	; 0x03
    3076:	6a 83       	std	Y+2, r22	; 0x02
    3078:	4c 83       	std	Y+4, r20	; 0x04
	
}
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	cf 91       	pop	r28
    3086:	df 91       	pop	r29
    3088:	08 95       	ret

0000308a <LCD_enuCreateCustChar>:


tenuErrorStatus LCD_enuCreateCustChar (uint8 u8LcdNumCpy , uint8 *pu8PatternCpy , uint8 u8LocationCpy) 
{
    308a:	df 93       	push	r29
    308c:	cf 93       	push	r28
    308e:	00 d0       	rcall	.+0      	; 0x3090 <LCD_enuCreateCustChar+0x6>
    3090:	00 d0       	rcall	.+0      	; 0x3092 <LCD_enuCreateCustChar+0x8>
    3092:	00 d0       	rcall	.+0      	; 0x3094 <LCD_enuCreateCustChar+0xa>
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	8b 83       	std	Y+3, r24	; 0x03
    309a:	7d 83       	std	Y+5, r23	; 0x05
    309c:	6c 83       	std	Y+4, r22	; 0x04
    309e:	4e 83       	std	Y+6, r20	; 0x06
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    30a0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc;
	if(u8LcdNumCpy < LCD_MAX_NUM && u8LocationCpy < 9)
    30a2:	8b 81       	ldd	r24, Y+3	; 0x03
    30a4:	88 23       	and	r24, r24
    30a6:	41 f5       	brne	.+80     	; 0x30f8 <LCD_enuCreateCustChar+0x6e>
    30a8:	8e 81       	ldd	r24, Y+6	; 0x06
    30aa:	89 30       	cpi	r24, 0x09	; 9
    30ac:	28 f5       	brcc	.+74     	; 0x30f8 <LCD_enuCreateCustChar+0x6e>
	{
		LCD_enuWriteCmd(u8LcdNumCpy , 0x40+(u8LocationCpy * 8 ));
    30ae:	8e 81       	ldd	r24, Y+6	; 0x06
    30b0:	88 2f       	mov	r24, r24
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	08 96       	adiw	r24, 0x08	; 8
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	88 0f       	add	r24, r24
    30bc:	99 1f       	adc	r25, r25
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	98 2f       	mov	r25, r24
    30c4:	8b 81       	ldd	r24, Y+3	; 0x03
    30c6:	69 2f       	mov	r22, r25
    30c8:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
		
		for (u8CntrLoc = 0 ;u8CntrLoc < 8 ; u8CntrLoc++ )
    30cc:	19 82       	std	Y+1, r1	; 0x01
    30ce:	10 c0       	rjmp	.+32     	; 0x30f0 <LCD_enuCreateCustChar+0x66>
		{
			LCD_enuWriteChar(u8LcdNumCpy ,pu8PatternCpy[u8CntrLoc] );
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
    30d2:	28 2f       	mov	r18, r24
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	8c 81       	ldd	r24, Y+4	; 0x04
    30d8:	9d 81       	ldd	r25, Y+5	; 0x05
    30da:	fc 01       	movw	r30, r24
    30dc:	e2 0f       	add	r30, r18
    30de:	f3 1f       	adc	r31, r19
    30e0:	90 81       	ld	r25, Z
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	69 2f       	mov	r22, r25
    30e6:	0e 94 28 17 	call	0x2e50	; 0x2e50 <LCD_enuWriteChar>
	uint8 u8CntrLoc;
	if(u8LcdNumCpy < LCD_MAX_NUM && u8LocationCpy < 9)
	{
		LCD_enuWriteCmd(u8LcdNumCpy , 0x40+(u8LocationCpy * 8 ));
		
		for (u8CntrLoc = 0 ;u8CntrLoc < 8 ; u8CntrLoc++ )
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	8f 5f       	subi	r24, 0xFF	; 255
    30ee:	89 83       	std	Y+1, r24	; 0x01
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	88 30       	cpi	r24, 0x08	; 8
    30f4:	68 f3       	brcs	.-38     	; 0x30d0 <LCD_enuCreateCustChar+0x46>
    30f6:	02 c0       	rjmp	.+4      	; 0x30fc <LCD_enuCreateCustChar+0x72>
		}
		
	}
	else
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;	
    30f8:	82 e0       	ldi	r24, 0x02	; 2
    30fa:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	return enuErrorStateLoc ;
    30fc:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    30fe:	26 96       	adiw	r28, 0x06	; 6
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	08 95       	ret

00003110 <LCD_enuWritenumber>:
void LCD_enuWritenumber(uint8 u8LcdNumCpy ,float32  pu8DataCpy)
{
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	df 93       	push	r29
    3116:	cf 93       	push	r28
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
    311c:	cf 56       	subi	r28, 0x6F	; 111
    311e:	d0 40       	sbci	r29, 0x00	; 0
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	cd bf       	out	0x3d, r28	; 61
    312a:	fe 01       	movw	r30, r28
    312c:	e5 59       	subi	r30, 0x95	; 149
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	80 83       	st	Z, r24
    3132:	fe 01       	movw	r30, r28
    3134:	e4 59       	subi	r30, 0x94	; 148
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	40 83       	st	Z, r20
    313a:	51 83       	std	Z+1, r21	; 0x01
    313c:	62 83       	std	Z+2, r22	; 0x02
    313e:	73 83       	std	Z+3, r23	; 0x03
	uint8 array[100];
	uint8 cntr = 0 ;
    3140:	1e 82       	std	Y+6, r1	; 0x06
	sint8 loopcntr;
	float32 temp;

    if(pu8DataCpy < 0)
    3142:	fe 01       	movw	r30, r28
    3144:	e4 59       	subi	r30, 0x94	; 148
    3146:	ff 4f       	sbci	r31, 0xFF	; 255
    3148:	60 81       	ld	r22, Z
    314a:	71 81       	ldd	r23, Z+1	; 0x01
    314c:	82 81       	ldd	r24, Z+2	; 0x02
    314e:	93 81       	ldd	r25, Z+3	; 0x03
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	40 e0       	ldi	r20, 0x00	; 0
    3156:	50 e0       	ldi	r21, 0x00	; 0
    3158:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    315c:	88 23       	and	r24, r24
    315e:	94 f5       	brge	.+100    	; 0x31c4 <LCD_enuWritenumber+0xb4>
    {
         LCD_enuWriteChar(u8LcdNumCpy , '-');
    3160:	fe 01       	movw	r30, r28
    3162:	e5 59       	subi	r30, 0x95	; 149
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	80 81       	ld	r24, Z
    3168:	6d e2       	ldi	r22, 0x2D	; 45
    316a:	0e 94 28 17 	call	0x2e50	; 0x2e50 <LCD_enuWriteChar>
         temp = 0 - pu8DataCpy;
    316e:	fe 01       	movw	r30, r28
    3170:	e4 59       	subi	r30, 0x94	; 148
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	60 e0       	ldi	r22, 0x00	; 0
    3176:	70 e0       	ldi	r23, 0x00	; 0
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	20 81       	ld	r18, Z
    317e:	31 81       	ldd	r19, Z+1	; 0x01
    3180:	42 81       	ldd	r20, Z+2	; 0x02
    3182:	53 81       	ldd	r21, Z+3	; 0x03
    3184:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	89 83       	std	Y+1, r24	; 0x01
    318e:	9a 83       	std	Y+2, r25	; 0x02
    3190:	ab 83       	std	Y+3, r26	; 0x03
    3192:	bc 83       	std	Y+4, r27	; 0x04
         pu8DataCpy = 0 - pu8DataCpy ;
    3194:	8e 01       	movw	r16, r28
    3196:	04 59       	subi	r16, 0x94	; 148
    3198:	1f 4f       	sbci	r17, 0xFF	; 255
    319a:	fe 01       	movw	r30, r28
    319c:	e4 59       	subi	r30, 0x94	; 148
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	60 e0       	ldi	r22, 0x00	; 0
    31a2:	70 e0       	ldi	r23, 0x00	; 0
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	20 81       	ld	r18, Z
    31aa:	31 81       	ldd	r19, Z+1	; 0x01
    31ac:	42 81       	ldd	r20, Z+2	; 0x02
    31ae:	53 81       	ldd	r21, Z+3	; 0x03
    31b0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	f8 01       	movw	r30, r16
    31ba:	80 83       	st	Z, r24
    31bc:	91 83       	std	Z+1, r25	; 0x01
    31be:	a2 83       	std	Z+2, r26	; 0x02
    31c0:	b3 83       	std	Z+3, r27	; 0x03
    31c2:	0b c0       	rjmp	.+22     	; 0x31da <LCD_enuWritenumber+0xca>
    }
    else
    {
    	temp = pu8DataCpy ;
    31c4:	fe 01       	movw	r30, r28
    31c6:	e4 59       	subi	r30, 0x94	; 148
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	80 81       	ld	r24, Z
    31cc:	91 81       	ldd	r25, Z+1	; 0x01
    31ce:	a2 81       	ldd	r26, Z+2	; 0x02
    31d0:	b3 81       	ldd	r27, Z+3	; 0x03
    31d2:	89 83       	std	Y+1, r24	; 0x01
    31d4:	9a 83       	std	Y+2, r25	; 0x02
    31d6:	ab 83       	std	Y+3, r26	; 0x03
    31d8:	bc 83       	std	Y+4, r27	; 0x04
    }

	do{
		array[cntr] = (int)(temp)%10 ;
    31da:	8e 81       	ldd	r24, Y+6	; 0x06
    31dc:	08 2f       	mov	r16, r24
    31de:	10 e0       	ldi	r17, 0x00	; 0
    31e0:	69 81       	ldd	r22, Y+1	; 0x01
    31e2:	7a 81       	ldd	r23, Y+2	; 0x02
    31e4:	8b 81       	ldd	r24, Y+3	; 0x03
    31e6:	9c 81       	ldd	r25, Y+4	; 0x04
    31e8:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	2a e0       	ldi	r18, 0x0A	; 10
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	b9 01       	movw	r22, r18
    31f6:	0e 94 af 21 	call	0x435e	; 0x435e <__divmodhi4>
    31fa:	28 2f       	mov	r18, r24
    31fc:	ce 01       	movw	r24, r28
    31fe:	07 96       	adiw	r24, 0x07	; 7
    3200:	fc 01       	movw	r30, r24
    3202:	e0 0f       	add	r30, r16
    3204:	f1 1f       	adc	r31, r17
    3206:	20 83       	st	Z, r18
		array[cntr] = array[cntr] + '0' ;
    3208:	8e 81       	ldd	r24, Y+6	; 0x06
    320a:	48 2f       	mov	r20, r24
    320c:	50 e0       	ldi	r21, 0x00	; 0
    320e:	8e 81       	ldd	r24, Y+6	; 0x06
    3210:	28 2f       	mov	r18, r24
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	ce 01       	movw	r24, r28
    3216:	07 96       	adiw	r24, 0x07	; 7
    3218:	fc 01       	movw	r30, r24
    321a:	e2 0f       	add	r30, r18
    321c:	f3 1f       	adc	r31, r19
    321e:	80 81       	ld	r24, Z
    3220:	28 2f       	mov	r18, r24
    3222:	20 5d       	subi	r18, 0xD0	; 208
    3224:	ce 01       	movw	r24, r28
    3226:	07 96       	adiw	r24, 0x07	; 7
    3228:	fc 01       	movw	r30, r24
    322a:	e4 0f       	add	r30, r20
    322c:	f5 1f       	adc	r31, r21
    322e:	20 83       	st	Z, r18
		temp = temp/10;
    3230:	69 81       	ldd	r22, Y+1	; 0x01
    3232:	7a 81       	ldd	r23, Y+2	; 0x02
    3234:	8b 81       	ldd	r24, Y+3	; 0x03
    3236:	9c 81       	ldd	r25, Y+4	; 0x04
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	40 e2       	ldi	r20, 0x20	; 32
    323e:	51 e4       	ldi	r21, 0x41	; 65
    3240:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	89 83       	std	Y+1, r24	; 0x01
    324a:	9a 83       	std	Y+2, r25	; 0x02
    324c:	ab 83       	std	Y+3, r26	; 0x03
    324e:	bc 83       	std	Y+4, r27	; 0x04
		cntr++;
    3250:	8e 81       	ldd	r24, Y+6	; 0x06
    3252:	8f 5f       	subi	r24, 0xFF	; 255
    3254:	8e 83       	std	Y+6, r24	; 0x06
	}while( (int)temp !=0);
    3256:	69 81       	ldd	r22, Y+1	; 0x01
    3258:	7a 81       	ldd	r23, Y+2	; 0x02
    325a:	8b 81       	ldd	r24, Y+3	; 0x03
    325c:	9c 81       	ldd	r25, Y+4	; 0x04
    325e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	00 97       	sbiw	r24, 0x00	; 0
    3268:	09 f0       	breq	.+2      	; 0x326c <LCD_enuWritenumber+0x15c>
    326a:	b7 cf       	rjmp	.-146    	; 0x31da <LCD_enuWritenumber+0xca>

	for(loopcntr = (cntr-1) ; loopcntr >=0  ; loopcntr --){
    326c:	8e 81       	ldd	r24, Y+6	; 0x06
    326e:	81 50       	subi	r24, 0x01	; 1
    3270:	8d 83       	std	Y+5, r24	; 0x05
    3272:	15 c0       	rjmp	.+42     	; 0x329e <LCD_enuWritenumber+0x18e>
		LCD_enuWriteChar(u8LcdNumCpy ,array[loopcntr]);
    3274:	8d 81       	ldd	r24, Y+5	; 0x05
    3276:	28 2f       	mov	r18, r24
    3278:	33 27       	eor	r19, r19
    327a:	27 fd       	sbrc	r18, 7
    327c:	30 95       	com	r19
    327e:	ce 01       	movw	r24, r28
    3280:	07 96       	adiw	r24, 0x07	; 7
    3282:	fc 01       	movw	r30, r24
    3284:	e2 0f       	add	r30, r18
    3286:	f3 1f       	adc	r31, r19
    3288:	90 81       	ld	r25, Z
    328a:	fe 01       	movw	r30, r28
    328c:	e5 59       	subi	r30, 0x95	; 149
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	80 81       	ld	r24, Z
    3292:	69 2f       	mov	r22, r25
    3294:	0e 94 28 17 	call	0x2e50	; 0x2e50 <LCD_enuWriteChar>
		array[cntr] = array[cntr] + '0' ;
		temp = temp/10;
		cntr++;
	}while( (int)temp !=0);

	for(loopcntr = (cntr-1) ; loopcntr >=0  ; loopcntr --){
    3298:	8d 81       	ldd	r24, Y+5	; 0x05
    329a:	81 50       	subi	r24, 0x01	; 1
    329c:	8d 83       	std	Y+5, r24	; 0x05
    329e:	8d 81       	ldd	r24, Y+5	; 0x05
    32a0:	88 23       	and	r24, r24
    32a2:	44 f7       	brge	.-48     	; 0x3274 <LCD_enuWritenumber+0x164>
		LCD_enuWriteChar(u8LcdNumCpy ,array[loopcntr]);
	}


	if( (pu8DataCpy - (int)pu8DataCpy ) > 0.001 ){
    32a4:	fe 01       	movw	r30, r28
    32a6:	e4 59       	subi	r30, 0x94	; 148
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	60 81       	ld	r22, Z
    32ac:	71 81       	ldd	r23, Z+1	; 0x01
    32ae:	82 81       	ldd	r24, Z+2	; 0x02
    32b0:	93 81       	ldd	r25, Z+3	; 0x03
    32b2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	aa 27       	eor	r26, r26
    32bc:	97 fd       	sbrc	r25, 7
    32be:	a0 95       	com	r26
    32c0:	ba 2f       	mov	r27, r26
    32c2:	bc 01       	movw	r22, r24
    32c4:	cd 01       	movw	r24, r26
    32c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    32ca:	9b 01       	movw	r18, r22
    32cc:	ac 01       	movw	r20, r24
    32ce:	fe 01       	movw	r30, r28
    32d0:	e4 59       	subi	r30, 0x94	; 148
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	60 81       	ld	r22, Z
    32d6:	71 81       	ldd	r23, Z+1	; 0x01
    32d8:	82 81       	ldd	r24, Z+2	; 0x02
    32da:	93 81       	ldd	r25, Z+3	; 0x03
    32dc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	bc 01       	movw	r22, r24
    32e6:	cd 01       	movw	r24, r26
    32e8:	2f e6       	ldi	r18, 0x6F	; 111
    32ea:	32 e1       	ldi	r19, 0x12	; 18
    32ec:	43 e8       	ldi	r20, 0x83	; 131
    32ee:	5a e3       	ldi	r21, 0x3A	; 58
    32f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32f4:	18 16       	cp	r1, r24
    32f6:	0c f0       	brlt	.+2      	; 0x32fa <LCD_enuWritenumber+0x1ea>
    32f8:	79 c0       	rjmp	.+242    	; 0x33ec <LCD_enuWritenumber+0x2dc>

		LCD_enuWriteChar(u8LcdNumCpy , '.');
    32fa:	fe 01       	movw	r30, r28
    32fc:	e5 59       	subi	r30, 0x95	; 149
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	80 81       	ld	r24, Z
    3302:	6e e2       	ldi	r22, 0x2E	; 46
    3304:	0e 94 28 17 	call	0x2e50	; 0x2e50 <LCD_enuWriteChar>

		for(loopcntr = 0 ; loopcntr < 4 ; loopcntr++ ){
    3308:	1d 82       	std	Y+5, r1	; 0x05
    330a:	6c c0       	rjmp	.+216    	; 0x33e4 <LCD_enuWritenumber+0x2d4>
			pu8DataCpy = pu8DataCpy - (int)pu8DataCpy;
    330c:	fe 01       	movw	r30, r28
    330e:	e4 59       	subi	r30, 0x94	; 148
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	60 81       	ld	r22, Z
    3314:	71 81       	ldd	r23, Z+1	; 0x01
    3316:	82 81       	ldd	r24, Z+2	; 0x02
    3318:	93 81       	ldd	r25, Z+3	; 0x03
    331a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	aa 27       	eor	r26, r26
    3324:	97 fd       	sbrc	r25, 7
    3326:	a0 95       	com	r26
    3328:	ba 2f       	mov	r27, r26
    332a:	bc 01       	movw	r22, r24
    332c:	cd 01       	movw	r24, r26
    332e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3332:	9b 01       	movw	r18, r22
    3334:	ac 01       	movw	r20, r24
    3336:	8e 01       	movw	r16, r28
    3338:	04 59       	subi	r16, 0x94	; 148
    333a:	1f 4f       	sbci	r17, 0xFF	; 255
    333c:	fe 01       	movw	r30, r28
    333e:	e4 59       	subi	r30, 0x94	; 148
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	60 81       	ld	r22, Z
    3344:	71 81       	ldd	r23, Z+1	; 0x01
    3346:	82 81       	ldd	r24, Z+2	; 0x02
    3348:	93 81       	ldd	r25, Z+3	; 0x03
    334a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	f8 01       	movw	r30, r16
    3354:	80 83       	st	Z, r24
    3356:	91 83       	std	Z+1, r25	; 0x01
    3358:	a2 83       	std	Z+2, r26	; 0x02
    335a:	b3 83       	std	Z+3, r27	; 0x03
			pu8DataCpy = pu8DataCpy*10 ;
    335c:	8e 01       	movw	r16, r28
    335e:	04 59       	subi	r16, 0x94	; 148
    3360:	1f 4f       	sbci	r17, 0xFF	; 255
    3362:	fe 01       	movw	r30, r28
    3364:	e4 59       	subi	r30, 0x94	; 148
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	60 81       	ld	r22, Z
    336a:	71 81       	ldd	r23, Z+1	; 0x01
    336c:	82 81       	ldd	r24, Z+2	; 0x02
    336e:	93 81       	ldd	r25, Z+3	; 0x03
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	40 e2       	ldi	r20, 0x20	; 32
    3376:	51 e4       	ldi	r21, 0x41	; 65
    3378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	f8 01       	movw	r30, r16
    3382:	80 83       	st	Z, r24
    3384:	91 83       	std	Z+1, r25	; 0x01
    3386:	a2 83       	std	Z+2, r26	; 0x02
    3388:	b3 83       	std	Z+3, r27	; 0x03
			temp = (int)pu8DataCpy + '0';
    338a:	fe 01       	movw	r30, r28
    338c:	e4 59       	subi	r30, 0x94	; 148
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	60 81       	ld	r22, Z
    3392:	71 81       	ldd	r23, Z+1	; 0x01
    3394:	82 81       	ldd	r24, Z+2	; 0x02
    3396:	93 81       	ldd	r25, Z+3	; 0x03
    3398:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	c0 96       	adiw	r24, 0x30	; 48
    33a2:	aa 27       	eor	r26, r26
    33a4:	97 fd       	sbrc	r25, 7
    33a6:	a0 95       	com	r26
    33a8:	ba 2f       	mov	r27, r26
    33aa:	bc 01       	movw	r22, r24
    33ac:	cd 01       	movw	r24, r26
    33ae:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	89 83       	std	Y+1, r24	; 0x01
    33b8:	9a 83       	std	Y+2, r25	; 0x02
    33ba:	ab 83       	std	Y+3, r26	; 0x03
    33bc:	bc 83       	std	Y+4, r27	; 0x04
			LCD_enuWriteChar(u8LcdNumCpy ,temp);
    33be:	69 81       	ldd	r22, Y+1	; 0x01
    33c0:	7a 81       	ldd	r23, Y+2	; 0x02
    33c2:	8b 81       	ldd	r24, Y+3	; 0x03
    33c4:	9c 81       	ldd	r25, Y+4	; 0x04
    33c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	98 2f       	mov	r25, r24
    33d0:	fe 01       	movw	r30, r28
    33d2:	e5 59       	subi	r30, 0x95	; 149
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	80 81       	ld	r24, Z
    33d8:	69 2f       	mov	r22, r25
    33da:	0e 94 28 17 	call	0x2e50	; 0x2e50 <LCD_enuWriteChar>

	if( (pu8DataCpy - (int)pu8DataCpy ) > 0.001 ){

		LCD_enuWriteChar(u8LcdNumCpy , '.');

		for(loopcntr = 0 ; loopcntr < 4 ; loopcntr++ ){
    33de:	8d 81       	ldd	r24, Y+5	; 0x05
    33e0:	8f 5f       	subi	r24, 0xFF	; 255
    33e2:	8d 83       	std	Y+5, r24	; 0x05
    33e4:	8d 81       	ldd	r24, Y+5	; 0x05
    33e6:	84 30       	cpi	r24, 0x04	; 4
    33e8:	0c f4       	brge	.+2      	; 0x33ec <LCD_enuWritenumber+0x2dc>
    33ea:	90 cf       	rjmp	.-224    	; 0x330c <LCD_enuWritenumber+0x1fc>
			LCD_enuWriteChar(u8LcdNumCpy ,temp);
		}

	}

}
    33ec:	c1 59       	subi	r28, 0x91	; 145
    33ee:	df 4f       	sbci	r29, 0xFF	; 255
    33f0:	0f b6       	in	r0, 0x3f	; 63
    33f2:	f8 94       	cli
    33f4:	de bf       	out	0x3e, r29	; 62
    33f6:	0f be       	out	0x3f, r0	; 63
    33f8:	cd bf       	out	0x3d, r28	; 61
    33fa:	cf 91       	pop	r28
    33fc:	df 91       	pop	r29
    33fe:	1f 91       	pop	r17
    3400:	0f 91       	pop	r16
    3402:	08 95       	ret

00003404 <TIM0_voidInit>:
pf TIM0_pfOvfCallback =TIM0_Void_dummy ;

uint8 u8_used ,factor;
uint32 counter, delay,TimerCounter;
void TIM0_voidInit(void)
{
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
#if   TIM0_MODE == TIM0_NORMAL_MODE
	CLR_BIT(TCCR0 , 6);
    340c:	a3 e5       	ldi	r26, 0x53	; 83
    340e:	b0 e0       	ldi	r27, 0x00	; 0
    3410:	e3 e5       	ldi	r30, 0x53	; 83
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	80 81       	ld	r24, Z
    3416:	8f 7b       	andi	r24, 0xBF	; 191
    3418:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , 3);
    341a:	a3 e5       	ldi	r26, 0x53	; 83
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	e3 e5       	ldi	r30, 0x53	; 83
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	87 7f       	andi	r24, 0xF7	; 247
    3426:	8c 93       	st	X, r24
#else
	SET_BIT(TCCR0 , 6);
	SET_BIT(TCCR0 , 3);
#endif

	TCCR0 &= (0xF8);/* clear reg 0b1111 1000 */
    3428:	a3 e5       	ldi	r26, 0x53	; 83
    342a:	b0 e0       	ldi	r27, 0x00	; 0
    342c:	e3 e5       	ldi	r30, 0x53	; 83
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	80 81       	ld	r24, Z
    3432:	88 7f       	andi	r24, 0xF8	; 248
    3434:	8c 93       	st	X, r24
	TCCR0 |=((0x07)& TIM0_PRESCALLER) ; /* write in reg */
    3436:	a3 e5       	ldi	r26, 0x53	; 83
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	e3 e5       	ldi	r30, 0x53	; 83
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	81 60       	ori	r24, 0x01	; 1
    3442:	8c 93       	st	X, r24
	TCNT0 = 0;
    3444:	e2 e5       	ldi	r30, 0x52	; 82
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	10 82       	st	Z, r1
	OCR0  = 0;
    344a:	ec e5       	ldi	r30, 0x5C	; 92
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	10 82       	st	Z, r1
	/* Disable Interrupt  OVF CM */
	CLR_BIT(TIMSK , 0) ;
    3450:	a9 e5       	ldi	r26, 0x59	; 89
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	e9 e5       	ldi	r30, 0x59	; 89
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	80 81       	ld	r24, Z
    345a:	8e 7f       	andi	r24, 0xFE	; 254
    345c:	8c 93       	st	X, r24
	CLR_BIT(TIMSK , 1) ;
    345e:	a9 e5       	ldi	r26, 0x59	; 89
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	e9 e5       	ldi	r30, 0x59	; 89
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	8d 7f       	andi	r24, 0xFD	; 253
    346a:	8c 93       	st	X, r24
	/* Clear IF flags OVF CM */
	SET_BIT(TIFR  , 0) ;
    346c:	a8 e5       	ldi	r26, 0x58	; 88
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	e8 e5       	ldi	r30, 0x58	; 88
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	81 60       	ori	r24, 0x01	; 1
    3478:	8c 93       	st	X, r24
	SET_BIT(TIFR  , 1) ;
    347a:	a8 e5       	ldi	r26, 0x58	; 88
    347c:	b0 e0       	ldi	r27, 0x00	; 0
    347e:	e8 e5       	ldi	r30, 0x58	; 88
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	82 60       	ori	r24, 0x02	; 2
    3486:	8c 93       	st	X, r24

}
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	08 95       	ret

0000348e <TIM0_voidSetPreloadValue>:
void TIM0_voidSetPreloadValue (uint8 u8PreloadValueCpy)
{
    348e:	df 93       	push	r29
    3490:	cf 93       	push	r28
    3492:	0f 92       	push	r0
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8PreloadValueCpy;
    349a:	e2 e5       	ldi	r30, 0x52	; 82
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	80 83       	st	Z, r24
}
    34a2:	0f 90       	pop	r0
    34a4:	cf 91       	pop	r28
    34a6:	df 91       	pop	r29
    34a8:	08 95       	ret

000034aa <TIM0_voidSetOutputCompareValue>:
void TIM0_voidSetOutputCompareValue (uint8 u8LoadValueCpy)
{
    34aa:	df 93       	push	r29
    34ac:	cf 93       	push	r28
    34ae:	0f 92       	push	r0
    34b0:	cd b7       	in	r28, 0x3d	; 61
    34b2:	de b7       	in	r29, 0x3e	; 62
    34b4:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8LoadValueCpy; 
    34b6:	ec e5       	ldi	r30, 0x5C	; 92
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	80 83       	st	Z, r24
}
    34be:	0f 90       	pop	r0
    34c0:	cf 91       	pop	r28
    34c2:	df 91       	pop	r29
    34c4:	08 95       	ret

000034c6 <TIM0_voidEnableOVFIntterrupt>:
void TIM0_voidEnableOVFIntterrupt(void)
{
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 0) ;
    34ce:	a9 e5       	ldi	r26, 0x59	; 89
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	e9 e5       	ldi	r30, 0x59	; 89
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	80 81       	ld	r24, Z
    34d8:	81 60       	ori	r24, 0x01	; 1
    34da:	8c 93       	st	X, r24
}
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	08 95       	ret

000034e2 <TIM0_voidDisableOVFIntterrupt>:
void TIM0_voidDisableOVFIntterrupt(void)
{
    34e2:	df 93       	push	r29
    34e4:	cf 93       	push	r28
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 0) ;
    34ea:	a9 e5       	ldi	r26, 0x59	; 89
    34ec:	b0 e0       	ldi	r27, 0x00	; 0
    34ee:	e9 e5       	ldi	r30, 0x59	; 89
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	8e 7f       	andi	r24, 0xFE	; 254
    34f6:	8c 93       	st	X, r24
}
    34f8:	cf 91       	pop	r28
    34fa:	df 91       	pop	r29
    34fc:	08 95       	ret

000034fe <TIM0_voidEnableCTCIntterrupt>:
void TIM0_voidEnableCTCIntterrupt(void)
{
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 1) ;
    3506:	a9 e5       	ldi	r26, 0x59	; 89
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	e9 e5       	ldi	r30, 0x59	; 89
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	82 60       	ori	r24, 0x02	; 2
    3512:	8c 93       	st	X, r24
}
    3514:	cf 91       	pop	r28
    3516:	df 91       	pop	r29
    3518:	08 95       	ret

0000351a <TIM0_voidDisableCTCIntterrupt>:
void TIM0_voidDisableCTCIntterrupt(void)
{
    351a:	df 93       	push	r29
    351c:	cf 93       	push	r28
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK , 1) ;
    3522:	a9 e5       	ldi	r26, 0x59	; 89
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	e9 e5       	ldi	r30, 0x59	; 89
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	80 81       	ld	r24, Z
    352c:	8d 7f       	andi	r24, 0xFD	; 253
    352e:	8c 93       	st	X, r24
}
    3530:	cf 91       	pop	r28
    3532:	df 91       	pop	r29
    3534:	08 95       	ret

00003536 <TIM0_voidSetOvfCallback>:
void TIM0_voidSetOvfCallback(pf pfOvfCallbackCpy)
{
    3536:	df 93       	push	r29
    3538:	cf 93       	push	r28
    353a:	00 d0       	rcall	.+0      	; 0x353c <TIM0_voidSetOvfCallback+0x6>
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	9a 83       	std	Y+2, r25	; 0x02
    3542:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfOvfCallback = pfOvfCallbackCpy ;
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	9a 81       	ldd	r25, Y+2	; 0x02
    3548:	90 93 77 01 	sts	0x0177, r25
    354c:	80 93 76 01 	sts	0x0176, r24

}
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	cf 91       	pop	r28
    3556:	df 91       	pop	r29
    3558:	08 95       	ret

0000355a <TIM0_voidSetCtcCallback>:
void TIM0_voidSetCtcCallback(pf pfCtcCallbackCpy)
{  
    355a:	df 93       	push	r29
    355c:	cf 93       	push	r28
    355e:	00 d0       	rcall	.+0      	; 0x3560 <TIM0_voidSetCtcCallback+0x6>
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	9a 83       	std	Y+2, r25	; 0x02
    3566:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfCtcCallback = pfCtcCallbackCpy;
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	9a 81       	ldd	r25, Y+2	; 0x02
    356c:	90 93 75 01 	sts	0x0175, r25
    3570:	80 93 74 01 	sts	0x0174, r24

}
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	08 95       	ret

0000357e <__vector_11>:
/*OVF ISR*/
void __vector_11 (void) __attribute__((signal ,used));
void __vector_11 (void)
{  
    357e:	1f 92       	push	r1
    3580:	0f 92       	push	r0
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	0f 92       	push	r0
    3586:	11 24       	eor	r1, r1
    3588:	2f 93       	push	r18
    358a:	3f 93       	push	r19
    358c:	4f 93       	push	r20
    358e:	5f 93       	push	r21
    3590:	6f 93       	push	r22
    3592:	7f 93       	push	r23
    3594:	8f 93       	push	r24
    3596:	9f 93       	push	r25
    3598:	af 93       	push	r26
    359a:	bf 93       	push	r27
    359c:	ef 93       	push	r30
    359e:	ff 93       	push	r31
    35a0:	df 93       	push	r29
    35a2:	cf 93       	push	r28
    35a4:	cd b7       	in	r28, 0x3d	; 61
    35a6:	de b7       	in	r29, 0x3e	; 62
	if ( TIM0__u8_get_detect_up() ) {       // voltage rise was detected previously
    35a8:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <TIM0__u8_get_detect_up>
    35ac:	88 23       	and	r24, r24
    35ae:	99 f0       	breq	.+38     	; 0x35d6 <__vector_11+0x58>
		TimerCounter++; // count the number of overflows
    35b0:	80 91 91 01 	lds	r24, 0x0191
    35b4:	90 91 92 01 	lds	r25, 0x0192
    35b8:	a0 91 93 01 	lds	r26, 0x0193
    35bc:	b0 91 94 01 	lds	r27, 0x0194
    35c0:	01 96       	adiw	r24, 0x01	; 1
    35c2:	a1 1d       	adc	r26, r1
    35c4:	b1 1d       	adc	r27, r1
    35c6:	80 93 91 01 	sts	0x0191, r24
    35ca:	90 93 92 01 	sts	0x0192, r25
    35ce:	a0 93 93 01 	sts	0x0193, r26
    35d2:	b0 93 94 01 	sts	0x0194, r27

		}
	if(u8_used){
    35d6:	80 91 96 01 	lds	r24, 0x0196
    35da:	88 23       	and	r24, r24
    35dc:	99 f0       	breq	.+38     	; 0x3604 <__vector_11+0x86>
		counter++;
    35de:	80 91 89 01 	lds	r24, 0x0189
    35e2:	90 91 8a 01 	lds	r25, 0x018A
    35e6:	a0 91 8b 01 	lds	r26, 0x018B
    35ea:	b0 91 8c 01 	lds	r27, 0x018C
    35ee:	01 96       	adiw	r24, 0x01	; 1
    35f0:	a1 1d       	adc	r26, r1
    35f2:	b1 1d       	adc	r27, r1
    35f4:	80 93 89 01 	sts	0x0189, r24
    35f8:	90 93 8a 01 	sts	0x018A, r25
    35fc:	a0 93 8b 01 	sts	0x018B, r26
    3600:	b0 93 8c 01 	sts	0x018C, r27
	}

	TIM0_pfOvfCallback();
    3604:	e0 91 76 01 	lds	r30, 0x0176
    3608:	f0 91 77 01 	lds	r31, 0x0177
    360c:	09 95       	icall

}
    360e:	cf 91       	pop	r28
    3610:	df 91       	pop	r29
    3612:	ff 91       	pop	r31
    3614:	ef 91       	pop	r30
    3616:	bf 91       	pop	r27
    3618:	af 91       	pop	r26
    361a:	9f 91       	pop	r25
    361c:	8f 91       	pop	r24
    361e:	7f 91       	pop	r23
    3620:	6f 91       	pop	r22
    3622:	5f 91       	pop	r21
    3624:	4f 91       	pop	r20
    3626:	3f 91       	pop	r19
    3628:	2f 91       	pop	r18
    362a:	0f 90       	pop	r0
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	0f 90       	pop	r0
    3630:	1f 90       	pop	r1
    3632:	18 95       	reti

00003634 <__vector_10>:
/*CM ISR*/
void __vector_10 (void) __attribute__((signal ,used));
void __vector_10 (void)
{
    3634:	1f 92       	push	r1
    3636:	0f 92       	push	r0
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	0f 92       	push	r0
    363c:	11 24       	eor	r1, r1
    363e:	2f 93       	push	r18
    3640:	3f 93       	push	r19
    3642:	4f 93       	push	r20
    3644:	5f 93       	push	r21
    3646:	6f 93       	push	r22
    3648:	7f 93       	push	r23
    364a:	8f 93       	push	r24
    364c:	9f 93       	push	r25
    364e:	af 93       	push	r26
    3650:	bf 93       	push	r27
    3652:	ef 93       	push	r30
    3654:	ff 93       	push	r31
    3656:	df 93       	push	r29
    3658:	cf 93       	push	r28
    365a:	cd b7       	in	r28, 0x3d	; 61
    365c:	de b7       	in	r29, 0x3e	; 62
		TIM0_pfCtcCallback();
    365e:	e0 91 74 01 	lds	r30, 0x0174
    3662:	f0 91 75 01 	lds	r31, 0x0175
    3666:	09 95       	icall

}
    3668:	cf 91       	pop	r28
    366a:	df 91       	pop	r29
    366c:	ff 91       	pop	r31
    366e:	ef 91       	pop	r30
    3670:	bf 91       	pop	r27
    3672:	af 91       	pop	r26
    3674:	9f 91       	pop	r25
    3676:	8f 91       	pop	r24
    3678:	7f 91       	pop	r23
    367a:	6f 91       	pop	r22
    367c:	5f 91       	pop	r21
    367e:	4f 91       	pop	r20
    3680:	3f 91       	pop	r19
    3682:	2f 91       	pop	r18
    3684:	0f 90       	pop	r0
    3686:	0f be       	out	0x3f, r0	; 63
    3688:	0f 90       	pop	r0
    368a:	1f 90       	pop	r1
    368c:	18 95       	reti

0000368e <TIM0_voidDelay_ms>:
void TIM0_voidDelay_ms(uint32 u32DalayTimeCpy)
{
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	00 d0       	rcall	.+0      	; 0x3694 <TIM0_voidDelay_ms+0x6>
    3694:	00 d0       	rcall	.+0      	; 0x3696 <TIM0_voidDelay_ms+0x8>
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	69 83       	std	Y+1, r22	; 0x01
    369c:	7a 83       	std	Y+2, r23	; 0x02
    369e:	8b 83       	std	Y+3, r24	; 0x03
    36a0:	9c 83       	std	Y+4, r25	; 0x04
u8_used=1;
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	80 93 96 01 	sts	0x0196, r24
TIM0_voidEnableOVFIntterrupt();
    36a8:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <TIM0_voidEnableOVFIntterrupt>
while(counter!=3);
    36ac:	80 91 89 01 	lds	r24, 0x0189
    36b0:	90 91 8a 01 	lds	r25, 0x018A
    36b4:	a0 91 8b 01 	lds	r26, 0x018B
    36b8:	b0 91 8c 01 	lds	r27, 0x018C
    36bc:	83 30       	cpi	r24, 0x03	; 3
    36be:	91 05       	cpc	r25, r1
    36c0:	a1 05       	cpc	r26, r1
    36c2:	b1 05       	cpc	r27, r1
    36c4:	99 f7       	brne	.-26     	; 0x36ac <TIM0_voidDelay_ms+0x1e>
while(TIM0_u16GetCntrValue()!=232);
    36c6:	0e 94 c2 1b 	call	0x3784	; 0x3784 <TIM0_u16GetCntrValue>
    36ca:	88 3e       	cpi	r24, 0xE8	; 232
    36cc:	91 05       	cpc	r25, r1
    36ce:	d9 f7       	brne	.-10     	; 0x36c6 <TIM0_voidDelay_ms+0x38>
counter=0;
    36d0:	10 92 89 01 	sts	0x0189, r1
    36d4:	10 92 8a 01 	sts	0x018A, r1
    36d8:	10 92 8b 01 	sts	0x018B, r1
    36dc:	10 92 8c 01 	sts	0x018C, r1
TIM0_voidDisableOVFIntterrupt();
    36e0:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <TIM0_voidDisableOVFIntterrupt>


}
    36e4:	0f 90       	pop	r0
    36e6:	0f 90       	pop	r0
    36e8:	0f 90       	pop	r0
    36ea:	0f 90       	pop	r0
    36ec:	cf 91       	pop	r28
    36ee:	df 91       	pop	r29
    36f0:	08 95       	ret

000036f2 <TIM0_voidDelay_Init>:
void TIM0_voidDelay_Init(void){
    36f2:	df 93       	push	r29
    36f4:	cf 93       	push	r28
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
#if   TIM0_MODE == TIM0_NORMAL_MODE
	CLR_BIT(TCCR0 , 6);
    36fa:	a3 e5       	ldi	r26, 0x53	; 83
    36fc:	b0 e0       	ldi	r27, 0x00	; 0
    36fe:	e3 e5       	ldi	r30, 0x53	; 83
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	80 81       	ld	r24, Z
    3704:	8f 7b       	andi	r24, 0xBF	; 191
    3706:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , 3);
    3708:	a3 e5       	ldi	r26, 0x53	; 83
    370a:	b0 e0       	ldi	r27, 0x00	; 0
    370c:	e3 e5       	ldi	r30, 0x53	; 83
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	80 81       	ld	r24, Z
    3712:	87 7f       	andi	r24, 0xF7	; 247
    3714:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , 3);
#else
	SET_BIT(TCCR0 , 6);
	SET_BIT(TCCR0 , 3);
#endif
	TCCR0 &= (0xF8);/* clear reg 0b1111 1000 */
    3716:	a3 e5       	ldi	r26, 0x53	; 83
    3718:	b0 e0       	ldi	r27, 0x00	; 0
    371a:	e3 e5       	ldi	r30, 0x53	; 83
    371c:	f0 e0       	ldi	r31, 0x00	; 0
    371e:	80 81       	ld	r24, Z
    3720:	88 7f       	andi	r24, 0xF8	; 248
    3722:	8c 93       	st	X, r24
	TCCR0  |=((0x07)& TIM0_PRESCALLER_8 ) ; /* write in reg */
    3724:	a3 e5       	ldi	r26, 0x53	; 83
    3726:	b0 e0       	ldi	r27, 0x00	; 0
    3728:	e3 e5       	ldi	r30, 0x53	; 83
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	80 81       	ld	r24, Z
    372e:	82 60       	ori	r24, 0x02	; 2
    3730:	8c 93       	st	X, r24
	TCNT0=0x00;
    3732:	e2 e5       	ldi	r30, 0x52	; 82
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	10 82       	st	Z, r1
	OCR0  = 0;
    3738:	ec e5       	ldi	r30, 0x5C	; 92
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	10 82       	st	Z, r1

}
    373e:	cf 91       	pop	r28
    3740:	df 91       	pop	r29
    3742:	08 95       	ret

00003744 <TIM0_voidSet_TimerCounter>:

void TIM0_voidSet_TimerCounter(void){
    3744:	df 93       	push	r29
    3746:	cf 93       	push	r28
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
	TimerCounter=0;
    374c:	10 92 91 01 	sts	0x0191, r1
    3750:	10 92 92 01 	sts	0x0192, r1
    3754:	10 92 93 01 	sts	0x0193, r1
    3758:	10 92 94 01 	sts	0x0194, r1
}
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret

00003762 <TIM0_u32get_TimerCounter>:
uint32 TIM0_u32get_TimerCounter(void){
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
	return TimerCounter;
    376a:	80 91 91 01 	lds	r24, 0x0191
    376e:	90 91 92 01 	lds	r25, 0x0192
    3772:	a0 91 93 01 	lds	r26, 0x0193
    3776:	b0 91 94 01 	lds	r27, 0x0194
}
    377a:	bc 01       	movw	r22, r24
    377c:	cd 01       	movw	r24, r26
    377e:	cf 91       	pop	r28
    3780:	df 91       	pop	r29
    3782:	08 95       	ret

00003784 <TIM0_u16GetCntrValue>:
uint16 TIM0_u16GetCntrValue(void ){
    3784:	df 93       	push	r29
    3786:	cf 93       	push	r28
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    378c:	e2 e5       	ldi	r30, 0x52	; 82
    378e:	f0 e0       	ldi	r31, 0x00	; 0
    3790:	80 81       	ld	r24, Z
    3792:	88 2f       	mov	r24, r24
    3794:	90 e0       	ldi	r25, 0x00	; 0
}
    3796:	cf 91       	pop	r28
    3798:	df 91       	pop	r29
    379a:	08 95       	ret

0000379c <TIM0_voidsetCntrValue>:
void TIM0_voidsetCntrValue(void ){
    379c:	df 93       	push	r29
    379e:	cf 93       	push	r28
    37a0:	cd b7       	in	r28, 0x3d	; 61
    37a2:	de b7       	in	r29, 0x3e	; 62
	 TCNT0=0 ;
    37a4:	e2 e5       	ldi	r30, 0x52	; 82
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	10 82       	st	Z, r1
}
    37aa:	cf 91       	pop	r28
    37ac:	df 91       	pop	r29
    37ae:	08 95       	ret

000037b0 <TIM0__u8_get_detect_up>:
uint8  TIM0__u8_get_detect_up(void){
    37b0:	df 93       	push	r29
    37b2:	cf 93       	push	r28
    37b4:	cd b7       	in	r28, 0x3d	; 61
    37b6:	de b7       	in	r29, 0x3e	; 62
	return u8_up_flag;
    37b8:	80 91 7c 01 	lds	r24, 0x017C

}
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	08 95       	ret

000037c2 <TIM0_void_set_up>:
void TIM0_void_set_up(void){
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
	u8_up_flag=1;
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	80 93 7c 01 	sts	0x017C, r24

}
    37d0:	cf 91       	pop	r28
    37d2:	df 91       	pop	r29
    37d4:	08 95       	ret

000037d6 <TIM0_void_reset_up>:
void TIM0_void_reset_up(void){
    37d6:	df 93       	push	r29
    37d8:	cf 93       	push	r28
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
	u8_up_flag=0;
    37de:	10 92 7c 01 	sts	0x017C, r1

}
    37e2:	cf 91       	pop	r28
    37e4:	df 91       	pop	r29
    37e6:	08 95       	ret

000037e8 <TIM0_Void_dummy>:
void TIM0_Void_dummy(void){}
    37e8:	df 93       	push	r29
    37ea:	cf 93       	push	r28
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
    37f0:	cf 91       	pop	r28
    37f2:	df 91       	pop	r29
    37f4:	08 95       	ret

000037f6 <main>:
#include "ultrasonic.h"
#include "uart.h"



void main(void){
    37f6:	df 93       	push	r29
    37f8:	cf 93       	push	r28
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    37fe:	ea 97       	sbiw	r28, 0x3a	; 58
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	f8 94       	cli
    3804:	de bf       	out	0x3e, r29	; 62
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	cd bf       	out	0x3d, r28	; 61
	uint16 read=0;
    380a:	1a ae       	std	Y+58, r1	; 0x3a
    380c:	19 ae       	std	Y+57, r1	; 0x39
	GIE_voidDisable();
    380e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <GIE_voidDisable>
	EXTINT0_voidDisable();
    3812:	0e 94 57 0b 	call	0x16ae	; 0x16ae <EXTINT0_voidDisable>
	DIO_voidInit();
    3816:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_voidInit>
	LCD_voidInit();
    381a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCD_voidInit>
	EXTINT0_voidInit();
    381e:	0e 94 26 0b 	call	0x164c	; 0x164c <EXTINT0_voidInit>
	ultrasonic_void_intial();
    3822:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <ultrasonic_void_intial>
	uart_void_intial();
    3826:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <uart_void_intial>
	TIM0_voidInit();
    382a:	0e 94 02 1a 	call	0x3404	; 0x3404 <TIM0_voidInit>
	GIE_voidEnable();
    382e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <GIE_voidEnable>

	while(1){
		ultrasonic_void_Start();
    3832:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <ultrasonic_void_Start>
    3836:	80 e0       	ldi	r24, 0x00	; 0
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	a8 ec       	ldi	r26, 0xC8	; 200
    383c:	b2 e4       	ldi	r27, 0x42	; 66
    383e:	8d ab       	std	Y+53, r24	; 0x35
    3840:	9e ab       	std	Y+54, r25	; 0x36
    3842:	af ab       	std	Y+55, r26	; 0x37
    3844:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3846:	6d a9       	ldd	r22, Y+53	; 0x35
    3848:	7e a9       	ldd	r23, Y+54	; 0x36
    384a:	8f a9       	ldd	r24, Y+55	; 0x37
    384c:	98 ad       	ldd	r25, Y+56	; 0x38
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	4a ef       	ldi	r20, 0xFA	; 250
    3854:	54 e4       	ldi	r21, 0x44	; 68
    3856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385a:	dc 01       	movw	r26, r24
    385c:	cb 01       	movw	r24, r22
    385e:	89 ab       	std	Y+49, r24	; 0x31
    3860:	9a ab       	std	Y+50, r25	; 0x32
    3862:	ab ab       	std	Y+51, r26	; 0x33
    3864:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3866:	69 a9       	ldd	r22, Y+49	; 0x31
    3868:	7a a9       	ldd	r23, Y+50	; 0x32
    386a:	8b a9       	ldd	r24, Y+51	; 0x33
    386c:	9c a9       	ldd	r25, Y+52	; 0x34
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	40 e8       	ldi	r20, 0x80	; 128
    3874:	5f e3       	ldi	r21, 0x3F	; 63
    3876:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    387a:	88 23       	and	r24, r24
    387c:	2c f4       	brge	.+10     	; 0x3888 <main+0x92>
		__ticks = 1;
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	98 ab       	std	Y+48, r25	; 0x30
    3884:	8f a7       	std	Y+47, r24	; 0x2f
    3886:	3f c0       	rjmp	.+126    	; 0x3906 <main+0x110>
	else if (__tmp > 65535)
    3888:	69 a9       	ldd	r22, Y+49	; 0x31
    388a:	7a a9       	ldd	r23, Y+50	; 0x32
    388c:	8b a9       	ldd	r24, Y+51	; 0x33
    388e:	9c a9       	ldd	r25, Y+52	; 0x34
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	3f ef       	ldi	r19, 0xFF	; 255
    3894:	4f e7       	ldi	r20, 0x7F	; 127
    3896:	57 e4       	ldi	r21, 0x47	; 71
    3898:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    389c:	18 16       	cp	r1, r24
    389e:	4c f5       	brge	.+82     	; 0x38f2 <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a0:	6d a9       	ldd	r22, Y+53	; 0x35
    38a2:	7e a9       	ldd	r23, Y+54	; 0x36
    38a4:	8f a9       	ldd	r24, Y+55	; 0x37
    38a6:	98 ad       	ldd	r25, Y+56	; 0x38
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e2       	ldi	r20, 0x20	; 32
    38ae:	51 e4       	ldi	r21, 0x41	; 65
    38b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	bc 01       	movw	r22, r24
    38ba:	cd 01       	movw	r24, r26
    38bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	98 ab       	std	Y+48, r25	; 0x30
    38c6:	8f a7       	std	Y+47, r24	; 0x2f
    38c8:	0f c0       	rjmp	.+30     	; 0x38e8 <main+0xf2>
    38ca:	88 ec       	ldi	r24, 0xC8	; 200
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	9e a7       	std	Y+46, r25	; 0x2e
    38d0:	8d a7       	std	Y+45, r24	; 0x2d
    38d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    38d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    38d6:	01 97       	sbiw	r24, 0x01	; 1
    38d8:	f1 f7       	brne	.-4      	; 0x38d6 <main+0xe0>
    38da:	9e a7       	std	Y+46, r25	; 0x2e
    38dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38de:	8f a5       	ldd	r24, Y+47	; 0x2f
    38e0:	98 a9       	ldd	r25, Y+48	; 0x30
    38e2:	01 97       	sbiw	r24, 0x01	; 1
    38e4:	98 ab       	std	Y+48, r25	; 0x30
    38e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    38ea:	98 a9       	ldd	r25, Y+48	; 0x30
    38ec:	00 97       	sbiw	r24, 0x00	; 0
    38ee:	69 f7       	brne	.-38     	; 0x38ca <main+0xd4>
    38f0:	14 c0       	rjmp	.+40     	; 0x391a <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f2:	69 a9       	ldd	r22, Y+49	; 0x31
    38f4:	7a a9       	ldd	r23, Y+50	; 0x32
    38f6:	8b a9       	ldd	r24, Y+51	; 0x33
    38f8:	9c a9       	ldd	r25, Y+52	; 0x34
    38fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	98 ab       	std	Y+48, r25	; 0x30
    3904:	8f a7       	std	Y+47, r24	; 0x2f
    3906:	8f a5       	ldd	r24, Y+47	; 0x2f
    3908:	98 a9       	ldd	r25, Y+48	; 0x30
    390a:	9c a7       	std	Y+44, r25	; 0x2c
    390c:	8b a7       	std	Y+43, r24	; 0x2b
    390e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3910:	9c a5       	ldd	r25, Y+44	; 0x2c
    3912:	01 97       	sbiw	r24, 0x01	; 1
    3914:	f1 f7       	brne	.-4      	; 0x3912 <main+0x11c>
    3916:	9c a7       	std	Y+44, r25	; 0x2c
    3918:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		LCD_enuWritenumber(LCD_u8NUM_0 ,ultrasonic_f32_get_distance());
    391a:	0e 94 8b 21 	call	0x4316	; 0x4316 <ultrasonic_f32_get_distance>
    391e:	9b 01       	movw	r18, r22
    3920:	ac 01       	movw	r20, r24
    3922:	80 e0       	ldi	r24, 0x00	; 0
    3924:	ba 01       	movw	r22, r20
    3926:	a9 01       	movw	r20, r18
    3928:	0e 94 88 18 	call	0x3110	; 0x3110 <LCD_enuWritenumber>
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	aa e7       	ldi	r26, 0x7A	; 122
    3932:	b4 e4       	ldi	r27, 0x44	; 68
    3934:	8f a3       	std	Y+39, r24	; 0x27
    3936:	98 a7       	std	Y+40, r25	; 0x28
    3938:	a9 a7       	std	Y+41, r26	; 0x29
    393a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393c:	6f a1       	ldd	r22, Y+39	; 0x27
    393e:	78 a5       	ldd	r23, Y+40	; 0x28
    3940:	89 a5       	ldd	r24, Y+41	; 0x29
    3942:	9a a5       	ldd	r25, Y+42	; 0x2a
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	4a ef       	ldi	r20, 0xFA	; 250
    394a:	54 e4       	ldi	r21, 0x44	; 68
    394c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	8b a3       	std	Y+35, r24	; 0x23
    3956:	9c a3       	std	Y+36, r25	; 0x24
    3958:	ad a3       	std	Y+37, r26	; 0x25
    395a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    395c:	6b a1       	ldd	r22, Y+35	; 0x23
    395e:	7c a1       	ldd	r23, Y+36	; 0x24
    3960:	8d a1       	ldd	r24, Y+37	; 0x25
    3962:	9e a1       	ldd	r25, Y+38	; 0x26
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e8       	ldi	r20, 0x80	; 128
    396a:	5f e3       	ldi	r21, 0x3F	; 63
    396c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3970:	88 23       	and	r24, r24
    3972:	2c f4       	brge	.+10     	; 0x397e <main+0x188>
		__ticks = 1;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	9a a3       	std	Y+34, r25	; 0x22
    397a:	89 a3       	std	Y+33, r24	; 0x21
    397c:	3f c0       	rjmp	.+126    	; 0x39fc <main+0x206>
	else if (__tmp > 65535)
    397e:	6b a1       	ldd	r22, Y+35	; 0x23
    3980:	7c a1       	ldd	r23, Y+36	; 0x24
    3982:	8d a1       	ldd	r24, Y+37	; 0x25
    3984:	9e a1       	ldd	r25, Y+38	; 0x26
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	3f ef       	ldi	r19, 0xFF	; 255
    398a:	4f e7       	ldi	r20, 0x7F	; 127
    398c:	57 e4       	ldi	r21, 0x47	; 71
    398e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3992:	18 16       	cp	r1, r24
    3994:	4c f5       	brge	.+82     	; 0x39e8 <main+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3996:	6f a1       	ldd	r22, Y+39	; 0x27
    3998:	78 a5       	ldd	r23, Y+40	; 0x28
    399a:	89 a5       	ldd	r24, Y+41	; 0x29
    399c:	9a a5       	ldd	r25, Y+42	; 0x2a
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e2       	ldi	r20, 0x20	; 32
    39a4:	51 e4       	ldi	r21, 0x41	; 65
    39a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	bc 01       	movw	r22, r24
    39b0:	cd 01       	movw	r24, r26
    39b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	9a a3       	std	Y+34, r25	; 0x22
    39bc:	89 a3       	std	Y+33, r24	; 0x21
    39be:	0f c0       	rjmp	.+30     	; 0x39de <main+0x1e8>
    39c0:	88 ec       	ldi	r24, 0xC8	; 200
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	98 a3       	std	Y+32, r25	; 0x20
    39c6:	8f 8f       	std	Y+31, r24	; 0x1f
    39c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39ca:	98 a1       	ldd	r25, Y+32	; 0x20
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	f1 f7       	brne	.-4      	; 0x39cc <main+0x1d6>
    39d0:	98 a3       	std	Y+32, r25	; 0x20
    39d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d4:	89 a1       	ldd	r24, Y+33	; 0x21
    39d6:	9a a1       	ldd	r25, Y+34	; 0x22
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	9a a3       	std	Y+34, r25	; 0x22
    39dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39de:	89 a1       	ldd	r24, Y+33	; 0x21
    39e0:	9a a1       	ldd	r25, Y+34	; 0x22
    39e2:	00 97       	sbiw	r24, 0x00	; 0
    39e4:	69 f7       	brne	.-38     	; 0x39c0 <main+0x1ca>
    39e6:	14 c0       	rjmp	.+40     	; 0x3a10 <main+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e8:	6b a1       	ldd	r22, Y+35	; 0x23
    39ea:	7c a1       	ldd	r23, Y+36	; 0x24
    39ec:	8d a1       	ldd	r24, Y+37	; 0x25
    39ee:	9e a1       	ldd	r25, Y+38	; 0x26
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	9a a3       	std	Y+34, r25	; 0x22
    39fa:	89 a3       	std	Y+33, r24	; 0x21
    39fc:	89 a1       	ldd	r24, Y+33	; 0x21
    39fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3a00:	9e 8f       	std	Y+30, r25	; 0x1e
    3a02:	8d 8f       	std	Y+29, r24	; 0x1d
    3a04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	f1 f7       	brne	.-4      	; 0x3a08 <main+0x212>
    3a0c:	9e 8f       	std	Y+30, r25	; 0x1e
    3a0e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		LCD_enuWriteCmd (LCD_u8NUM_0 , LCD_u8CLEAR);
    3a10:	80 e0       	ldi	r24, 0x00	; 0
    3a12:	61 e0       	ldi	r22, 0x01	; 1
    3a14:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_enuWriteCmd>
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	aa e7       	ldi	r26, 0x7A	; 122
    3a1e:	b4 e4       	ldi	r27, 0x44	; 68
    3a20:	89 8f       	std	Y+25, r24	; 0x19
    3a22:	9a 8f       	std	Y+26, r25	; 0x1a
    3a24:	ab 8f       	std	Y+27, r26	; 0x1b
    3a26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a28:	69 8d       	ldd	r22, Y+25	; 0x19
    3a2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	4a ef       	ldi	r20, 0xFA	; 250
    3a36:	54 e4       	ldi	r21, 0x44	; 68
    3a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	cb 01       	movw	r24, r22
    3a40:	8d 8b       	std	Y+21, r24	; 0x15
    3a42:	9e 8b       	std	Y+22, r25	; 0x16
    3a44:	af 8b       	std	Y+23, r26	; 0x17
    3a46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a48:	6d 89       	ldd	r22, Y+21	; 0x15
    3a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	40 e8       	ldi	r20, 0x80	; 128
    3a56:	5f e3       	ldi	r21, 0x3F	; 63
    3a58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a5c:	88 23       	and	r24, r24
    3a5e:	2c f4       	brge	.+10     	; 0x3a6a <main+0x274>
		__ticks = 1;
    3a60:	81 e0       	ldi	r24, 0x01	; 1
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	9c 8b       	std	Y+20, r25	; 0x14
    3a66:	8b 8b       	std	Y+19, r24	; 0x13
    3a68:	3f c0       	rjmp	.+126    	; 0x3ae8 <main+0x2f2>
	else if (__tmp > 65535)
    3a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a70:	98 8d       	ldd	r25, Y+24	; 0x18
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	3f ef       	ldi	r19, 0xFF	; 255
    3a76:	4f e7       	ldi	r20, 0x7F	; 127
    3a78:	57 e4       	ldi	r21, 0x47	; 71
    3a7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a7e:	18 16       	cp	r1, r24
    3a80:	4c f5       	brge	.+82     	; 0x3ad4 <main+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a82:	69 8d       	ldd	r22, Y+25	; 0x19
    3a84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a8a:	20 e0       	ldi	r18, 0x00	; 0
    3a8c:	30 e0       	ldi	r19, 0x00	; 0
    3a8e:	40 e2       	ldi	r20, 0x20	; 32
    3a90:	51 e4       	ldi	r21, 0x41	; 65
    3a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	bc 01       	movw	r22, r24
    3a9c:	cd 01       	movw	r24, r26
    3a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	9c 8b       	std	Y+20, r25	; 0x14
    3aa8:	8b 8b       	std	Y+19, r24	; 0x13
    3aaa:	0f c0       	rjmp	.+30     	; 0x3aca <main+0x2d4>
    3aac:	88 ec       	ldi	r24, 0xC8	; 200
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	9a 8b       	std	Y+18, r25	; 0x12
    3ab2:	89 8b       	std	Y+17, r24	; 0x11
    3ab4:	89 89       	ldd	r24, Y+17	; 0x11
    3ab6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	f1 f7       	brne	.-4      	; 0x3ab8 <main+0x2c2>
    3abc:	9a 8b       	std	Y+18, r25	; 0x12
    3abe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ac4:	01 97       	sbiw	r24, 0x01	; 1
    3ac6:	9c 8b       	std	Y+20, r25	; 0x14
    3ac8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aca:	8b 89       	ldd	r24, Y+19	; 0x13
    3acc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ace:	00 97       	sbiw	r24, 0x00	; 0
    3ad0:	69 f7       	brne	.-38     	; 0x3aac <main+0x2b6>
    3ad2:	14 c0       	rjmp	.+40     	; 0x3afc <main+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ad6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ad8:	8f 89       	ldd	r24, Y+23	; 0x17
    3ada:	98 8d       	ldd	r25, Y+24	; 0x18
    3adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	9c 8b       	std	Y+20, r25	; 0x14
    3ae6:	8b 8b       	std	Y+19, r24	; 0x13
    3ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aea:	9c 89       	ldd	r25, Y+20	; 0x14
    3aec:	98 8b       	std	Y+16, r25	; 0x10
    3aee:	8f 87       	std	Y+15, r24	; 0x0f
    3af0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af2:	98 89       	ldd	r25, Y+16	; 0x10
    3af4:	01 97       	sbiw	r24, 0x01	; 1
    3af6:	f1 f7       	brne	.-4      	; 0x3af4 <main+0x2fe>
    3af8:	98 8b       	std	Y+16, r25	; 0x10
    3afa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000) ;
		if(ultrasonic_f32_get_distance()<200){
    3afc:	0e 94 8b 21 	call	0x4316	; 0x4316 <ultrasonic_f32_get_distance>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	bc 01       	movw	r22, r24
    3b06:	cd 01       	movw	r24, r26
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	48 e4       	ldi	r20, 0x48	; 72
    3b0e:	53 e4       	ldi	r21, 0x43	; 67
    3b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b14:	88 23       	and	r24, r24
    3b16:	0c f0       	brlt	.+2      	; 0x3b1a <main+0x324>
    3b18:	8c ce       	rjmp	.-744    	; 0x3832 <main+0x3c>
		uart_void_write ('1');
    3b1a:	81 e3       	ldi	r24, 0x31	; 49
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <uart_void_write>
    3b22:	80 e0       	ldi	r24, 0x00	; 0
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	aa e7       	ldi	r26, 0x7A	; 122
    3b28:	b4 e4       	ldi	r27, 0x44	; 68
    3b2a:	8b 87       	std	Y+11, r24	; 0x0b
    3b2c:	9c 87       	std	Y+12, r25	; 0x0c
    3b2e:	ad 87       	std	Y+13, r26	; 0x0d
    3b30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	4a ef       	ldi	r20, 0xFA	; 250
    3b40:	54 e4       	ldi	r21, 0x44	; 68
    3b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	8f 83       	std	Y+7, r24	; 0x07
    3b4c:	98 87       	std	Y+8, r25	; 0x08
    3b4e:	a9 87       	std	Y+9, r26	; 0x09
    3b50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b52:	6f 81       	ldd	r22, Y+7	; 0x07
    3b54:	78 85       	ldd	r23, Y+8	; 0x08
    3b56:	89 85       	ldd	r24, Y+9	; 0x09
    3b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5a:	20 e0       	ldi	r18, 0x00	; 0
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	40 e8       	ldi	r20, 0x80	; 128
    3b60:	5f e3       	ldi	r21, 0x3F	; 63
    3b62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b66:	88 23       	and	r24, r24
    3b68:	2c f4       	brge	.+10     	; 0x3b74 <main+0x37e>
		__ticks = 1;
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	9e 83       	std	Y+6, r25	; 0x06
    3b70:	8d 83       	std	Y+5, r24	; 0x05
    3b72:	3f c0       	rjmp	.+126    	; 0x3bf2 <main+0x3fc>
	else if (__tmp > 65535)
    3b74:	6f 81       	ldd	r22, Y+7	; 0x07
    3b76:	78 85       	ldd	r23, Y+8	; 0x08
    3b78:	89 85       	ldd	r24, Y+9	; 0x09
    3b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	3f ef       	ldi	r19, 0xFF	; 255
    3b80:	4f e7       	ldi	r20, 0x7F	; 127
    3b82:	57 e4       	ldi	r21, 0x47	; 71
    3b84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b88:	18 16       	cp	r1, r24
    3b8a:	4c f5       	brge	.+82     	; 0x3bde <main+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	40 e2       	ldi	r20, 0x20	; 32
    3b9a:	51 e4       	ldi	r21, 0x41	; 65
    3b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	bc 01       	movw	r22, r24
    3ba6:	cd 01       	movw	r24, r26
    3ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	9e 83       	std	Y+6, r25	; 0x06
    3bb2:	8d 83       	std	Y+5, r24	; 0x05
    3bb4:	0f c0       	rjmp	.+30     	; 0x3bd4 <main+0x3de>
    3bb6:	88 ec       	ldi	r24, 0xC8	; 200
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	9c 83       	std	Y+4, r25	; 0x04
    3bbc:	8b 83       	std	Y+3, r24	; 0x03
    3bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	f1 f7       	brne	.-4      	; 0x3bc2 <main+0x3cc>
    3bc6:	9c 83       	std	Y+4, r25	; 0x04
    3bc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bca:	8d 81       	ldd	r24, Y+5	; 0x05
    3bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bce:	01 97       	sbiw	r24, 0x01	; 1
    3bd0:	9e 83       	std	Y+6, r25	; 0x06
    3bd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd8:	00 97       	sbiw	r24, 0x00	; 0
    3bda:	69 f7       	brne	.-38     	; 0x3bb6 <main+0x3c0>
    3bdc:	19 c0       	rjmp	.+50     	; 0x3c10 <main+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bde:	6f 81       	ldd	r22, Y+7	; 0x07
    3be0:	78 85       	ldd	r23, Y+8	; 0x08
    3be2:	89 85       	ldd	r24, Y+9	; 0x09
    3be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	9e 83       	std	Y+6, r25	; 0x06
    3bf0:	8d 83       	std	Y+5, r24	; 0x05
    3bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf6:	9a 83       	std	Y+2, r25	; 0x02
    3bf8:	89 83       	std	Y+1, r24	; 0x01
    3bfa:	89 81       	ldd	r24, Y+1	; 0x01
    3bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfe:	01 97       	sbiw	r24, 0x01	; 1
    3c00:	f1 f7       	brne	.-4      	; 0x3bfe <main+0x408>
    3c02:	9a 83       	std	Y+2, r25	; 0x02
    3c04:	89 83       	std	Y+1, r24	; 0x01
    3c06:	04 c0       	rjmp	.+8      	; 0x3c10 <main+0x41a>
		_delay_ms(1000) ;
		while(read !='1'){
			uart_void_read (&read);
    3c08:	ce 01       	movw	r24, r28
    3c0a:	c9 96       	adiw	r24, 0x39	; 57
    3c0c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <uart_void_read>
		LCD_enuWriteCmd (LCD_u8NUM_0 , LCD_u8CLEAR);
		_delay_ms(1000) ;
		if(ultrasonic_f32_get_distance()<200){
		uart_void_write ('1');
		_delay_ms(1000) ;
		while(read !='1'){
    3c10:	89 ad       	ldd	r24, Y+57	; 0x39
    3c12:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c14:	81 33       	cpi	r24, 0x31	; 49
    3c16:	91 05       	cpc	r25, r1
    3c18:	b9 f7       	brne	.-18     	; 0x3c08 <main+0x412>
    3c1a:	0b ce       	rjmp	.-1002   	; 0x3832 <main+0x3c>

00003c1c <uart_void_intial>:
#include "STD_Types.h"
#include "BIT_Math.h"
#include "uart.h"

void uart_void_intial(){
    3c1c:	df 93       	push	r29
    3c1e:	cf 93       	push	r28
    3c20:	cd b7       	in	r28, 0x3d	; 61
    3c22:	de b7       	in	r29, 0x3e	; 62
	UCSRC=(Synchronous_Operation)|(uart_cfg.u8_Parity_Mode)|(uart_cfg.u8_Stop_Bit_Mode)|(uart_cfg.u8_Char_Size)|(uart_cfg.u8_Clock_Polarity);
    3c24:	e0 e4       	ldi	r30, 0x40	; 64
    3c26:	f0 e0       	ldi	r31, 0x00	; 0
    3c28:	90 91 78 01 	lds	r25, 0x0178
    3c2c:	80 91 79 01 	lds	r24, 0x0179
    3c30:	98 2b       	or	r25, r24
    3c32:	80 91 7a 01 	lds	r24, 0x017A
    3c36:	98 2b       	or	r25, r24
    3c38:	80 91 7b 01 	lds	r24, 0x017B
    3c3c:	89 2b       	or	r24, r25
    3c3e:	80 64       	ori	r24, 0x40	; 64
    3c40:	80 83       	st	Z, r24
	if(uart_cfg.u8_Char_Size==Char_9Bit){
    3c42:	80 91 7a 01 	lds	r24, 0x017A
    3c46:	86 31       	cpi	r24, 0x16	; 22
    3c48:	39 f4       	brne	.+14     	; 0x3c58 <uart_void_intial+0x3c>
		SET_BIT(UCSRB , 2);
    3c4a:	aa e2       	ldi	r26, 0x2A	; 42
    3c4c:	b0 e0       	ldi	r27, 0x00	; 0
    3c4e:	ea e2       	ldi	r30, 0x2A	; 42
    3c50:	f0 e0       	ldi	r31, 0x00	; 0
    3c52:	80 81       	ld	r24, Z
    3c54:	84 60       	ori	r24, 0x04	; 4
    3c56:	8c 93       	st	X, r24
	}
	SET_BIT(UCSRB , 4);/*enable receive */
    3c58:	aa e2       	ldi	r26, 0x2A	; 42
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	ea e2       	ldi	r30, 0x2A	; 42
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	80 81       	ld	r24, Z
    3c62:	80 61       	ori	r24, 0x10	; 16
    3c64:	8c 93       	st	X, r24
	SET_BIT(UCSRB , 3);/*enable transmission */
    3c66:	aa e2       	ldi	r26, 0x2A	; 42
    3c68:	b0 e0       	ldi	r27, 0x00	; 0
    3c6a:	ea e2       	ldi	r30, 0x2A	; 42
    3c6c:	f0 e0       	ldi	r31, 0x00	; 0
    3c6e:	80 81       	ld	r24, Z
    3c70:	88 60       	ori	r24, 0x08	; 8
    3c72:	8c 93       	st	X, r24
}
    3c74:	cf 91       	pop	r28
    3c76:	df 91       	pop	r29
    3c78:	08 95       	ret

00003c7a <uart_void_read>:
void uart_void_read (uint16* u16_value_cpy){
    3c7a:	df 93       	push	r29
    3c7c:	cf 93       	push	r28
    3c7e:	00 d0       	rcall	.+0      	; 0x3c80 <uart_void_read+0x6>
    3c80:	cd b7       	in	r28, 0x3d	; 61
    3c82:	de b7       	in	r29, 0x3e	; 62
    3c84:	9a 83       	std	Y+2, r25	; 0x02
    3c86:	89 83       	std	Y+1, r24	; 0x01
	/*SET_BIT(UCSRB , 7); enable  RX Complete Interrupt*/
	while (!(GET_BIT(UCSRA , 7)));
    3c88:	eb e2       	ldi	r30, 0x2B	; 43
    3c8a:	f0 e0       	ldi	r31, 0x00	; 0
    3c8c:	80 81       	ld	r24, Z
    3c8e:	88 23       	and	r24, r24
    3c90:	dc f7       	brge	.-10     	; 0x3c88 <uart_void_read+0xe>
	*u16_value_cpy= UDR;
    3c92:	ec e2       	ldi	r30, 0x2C	; 44
    3c94:	f0 e0       	ldi	r31, 0x00	; 0
    3c96:	80 81       	ld	r24, Z
    3c98:	88 2f       	mov	r24, r24
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    3ca0:	91 83       	std	Z+1, r25	; 0x01
    3ca2:	80 83       	st	Z, r24
	if ((uart_cfg.u8_Char_Size)==Char_9Bit){
    3ca4:	80 91 7a 01 	lds	r24, 0x017A
    3ca8:	86 31       	cpi	r24, 0x16	; 22
    3caa:	a1 f4       	brne	.+40     	; 0x3cd4 <uart_void_read+0x5a>
	*u16_value_cpy|= ((UCSRB>>1)&0x01)<<8;
    3cac:	e9 81       	ldd	r30, Y+1	; 0x01
    3cae:	fa 81       	ldd	r31, Y+2	; 0x02
    3cb0:	20 81       	ld	r18, Z
    3cb2:	31 81       	ldd	r19, Z+1	; 0x01
    3cb4:	ea e2       	ldi	r30, 0x2A	; 42
    3cb6:	f0 e0       	ldi	r31, 0x00	; 0
    3cb8:	80 81       	ld	r24, Z
    3cba:	86 95       	lsr	r24
    3cbc:	88 2f       	mov	r24, r24
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	81 70       	andi	r24, 0x01	; 1
    3cc2:	90 70       	andi	r25, 0x00	; 0
    3cc4:	98 2f       	mov	r25, r24
    3cc6:	88 27       	eor	r24, r24
    3cc8:	82 2b       	or	r24, r18
    3cca:	93 2b       	or	r25, r19
    3ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    3cce:	fa 81       	ldd	r31, Y+2	; 0x02
    3cd0:	91 83       	std	Z+1, r25	; 0x01
    3cd2:	80 83       	st	Z, r24
	}
}
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	cf 91       	pop	r28
    3cda:	df 91       	pop	r29
    3cdc:	08 95       	ret

00003cde <uart_void_write>:
void uart_void_write (uint16 u16_value_cpy){
    3cde:	df 93       	push	r29
    3ce0:	cf 93       	push	r28
    3ce2:	00 d0       	rcall	.+0      	; 0x3ce4 <uart_void_write+0x6>
    3ce4:	cd b7       	in	r28, 0x3d	; 61
    3ce6:	de b7       	in	r29, 0x3e	; 62
    3ce8:	9a 83       	std	Y+2, r25	; 0x02
    3cea:	89 83       	std	Y+1, r24	; 0x01
	/*SET_BIT(UCSRB , 5); enable Data Register Empty Interrupt*/
	while ((UCSRA&0x20)!=0x20);
    3cec:	eb e2       	ldi	r30, 0x2B	; 43
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	80 81       	ld	r24, Z
    3cf2:	88 2f       	mov	r24, r24
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	80 72       	andi	r24, 0x20	; 32
    3cf8:	90 70       	andi	r25, 0x00	; 0
    3cfa:	00 97       	sbiw	r24, 0x00	; 0
    3cfc:	b9 f3       	breq	.-18     	; 0x3cec <uart_void_write+0xe>
	UDR= (u16_value_cpy)&0xff ;
    3cfe:	ec e2       	ldi	r30, 0x2C	; 44
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	89 81       	ldd	r24, Y+1	; 0x01
    3d04:	80 83       	st	Z, r24
	if (uart_cfg.u8_Char_Size==Char_9Bit){
    3d06:	80 91 7a 01 	lds	r24, 0x017A
    3d0a:	86 31       	cpi	r24, 0x16	; 22
    3d0c:	99 f4       	brne	.+38     	; 0x3d34 <uart_void_write+0x56>
	UCSRB&=0xFE;
    3d0e:	aa e2       	ldi	r26, 0x2A	; 42
    3d10:	b0 e0       	ldi	r27, 0x00	; 0
    3d12:	ea e2       	ldi	r30, 0x2A	; 42
    3d14:	f0 e0       	ldi	r31, 0x00	; 0
    3d16:	80 81       	ld	r24, Z
    3d18:	8e 7f       	andi	r24, 0xFE	; 254
    3d1a:	8c 93       	st	X, r24
	UCSRB|=((u16_value_cpy>>8)&0x01);
    3d1c:	aa e2       	ldi	r26, 0x2A	; 42
    3d1e:	b0 e0       	ldi	r27, 0x00	; 0
    3d20:	ea e2       	ldi	r30, 0x2A	; 42
    3d22:	f0 e0       	ldi	r31, 0x00	; 0
    3d24:	20 81       	ld	r18, Z
    3d26:	89 81       	ldd	r24, Y+1	; 0x01
    3d28:	9a 81       	ldd	r25, Y+2	; 0x02
    3d2a:	89 2f       	mov	r24, r25
    3d2c:	99 27       	eor	r25, r25
    3d2e:	81 70       	andi	r24, 0x01	; 1
    3d30:	82 2b       	or	r24, r18
    3d32:	8c 93       	st	X, r24
	}
	
	
}
    3d34:	0f 90       	pop	r0
    3d36:	0f 90       	pop	r0
    3d38:	cf 91       	pop	r28
    3d3a:	df 91       	pop	r29
    3d3c:	08 95       	ret

00003d3e <ultrasonic_void_intial>:
uint8  timerCounter;
float32  result=0;
uint32 Start=0;
uint8 start_flag=0;
void ultrasonic_void_callBack(void);
void ultrasonic_void_intial(void){
    3d3e:	df 93       	push	r29
    3d40:	cf 93       	push	r28
    3d42:	cd b7       	in	r28, 0x3d	; 61
    3d44:	de b7       	in	r29, 0x3e	; 62
	EXTINT0_voidSetCallBack(ultrasonic_void_callBack);
    3d46:	8d e2       	ldi	r24, 0x2D	; 45
    3d48:	91 e2       	ldi	r25, 0x21	; 33
    3d4a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <EXTINT0_voidSetCallBack>
}
    3d4e:	cf 91       	pop	r28
    3d50:	df 91       	pop	r29
    3d52:	08 95       	ret

00003d54 <ultrasonic_void_Start>:
void ultrasonic_void_Start(void){
    3d54:	0f 93       	push	r16
    3d56:	1f 93       	push	r17
    3d58:	df 93       	push	r29
    3d5a:	cf 93       	push	r28
    3d5c:	cd b7       	in	r28, 0x3d	; 61
    3d5e:	de b7       	in	r29, 0x3e	; 62
    3d60:	c8 54       	subi	r28, 0x48	; 72
    3d62:	d0 40       	sbci	r29, 0x00	; 0
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	cd bf       	out	0x3d, r28	; 61
	 EXTINT0_voidEnable();
    3d6e:	0e 94 49 0b 	call	0x1692	; 0x1692 <EXTINT0_voidEnable>
	DIO_enuWritePin(ULTRASONI_TRIGGER_PIN , DIO_u8LOW);
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	60 e0       	ldi	r22, 0x00	; 0
    3d76:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	eb 5b       	subi	r30, 0xBB	; 187
    3d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	a0 e8       	ldi	r26, 0x80	; 128
    3d86:	bf e3       	ldi	r27, 0x3F	; 63
    3d88:	80 83       	st	Z, r24
    3d8a:	91 83       	std	Z+1, r25	; 0x01
    3d8c:	a2 83       	std	Z+2, r26	; 0x02
    3d8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3d90:	8e 01       	movw	r16, r28
    3d92:	0f 5b       	subi	r16, 0xBF	; 191
    3d94:	1f 4f       	sbci	r17, 0xFF	; 255
    3d96:	fe 01       	movw	r30, r28
    3d98:	eb 5b       	subi	r30, 0xBB	; 187
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	60 81       	ld	r22, Z
    3d9e:	71 81       	ldd	r23, Z+1	; 0x01
    3da0:	82 81       	ldd	r24, Z+2	; 0x02
    3da2:	93 81       	ldd	r25, Z+3	; 0x03
    3da4:	2b ea       	ldi	r18, 0xAB	; 171
    3da6:	3a ea       	ldi	r19, 0xAA	; 170
    3da8:	4a e2       	ldi	r20, 0x2A	; 42
    3daa:	50 e4       	ldi	r21, 0x40	; 64
    3dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	f8 01       	movw	r30, r16
    3db6:	80 83       	st	Z, r24
    3db8:	91 83       	std	Z+1, r25	; 0x01
    3dba:	a2 83       	std	Z+2, r26	; 0x02
    3dbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	ef 5b       	subi	r30, 0xBF	; 191
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	60 81       	ld	r22, Z
    3dc6:	71 81       	ldd	r23, Z+1	; 0x01
    3dc8:	82 81       	ldd	r24, Z+2	; 0x02
    3dca:	93 81       	ldd	r25, Z+3	; 0x03
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	40 e8       	ldi	r20, 0x80	; 128
    3dd2:	5f e3       	ldi	r21, 0x3F	; 63
    3dd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dd8:	88 23       	and	r24, r24
    3dda:	34 f4       	brge	.+12     	; 0x3de8 <ultrasonic_void_Start+0x94>
		__ticks = 1;
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	fe 01       	movw	r30, r28
    3de0:	e0 5c       	subi	r30, 0xC0	; 192
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	80 83       	st	Z, r24
    3de6:	9d c0       	rjmp	.+314    	; 0x3f22 <ultrasonic_void_Start+0x1ce>
	else if (__tmp > 255)
    3de8:	fe 01       	movw	r30, r28
    3dea:	ef 5b       	subi	r30, 0xBF	; 191
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	60 81       	ld	r22, Z
    3df0:	71 81       	ldd	r23, Z+1	; 0x01
    3df2:	82 81       	ldd	r24, Z+2	; 0x02
    3df4:	93 81       	ldd	r25, Z+3	; 0x03
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	4f e7       	ldi	r20, 0x7F	; 127
    3dfc:	53 e4       	ldi	r21, 0x43	; 67
    3dfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e02:	18 16       	cp	r1, r24
    3e04:	0c f0       	brlt	.+2      	; 0x3e08 <ultrasonic_void_Start+0xb4>
    3e06:	7e c0       	rjmp	.+252    	; 0x3f04 <ultrasonic_void_Start+0x1b0>
	{
		_delay_ms(__us / 1000.0);
    3e08:	fe 01       	movw	r30, r28
    3e0a:	eb 5b       	subi	r30, 0xBB	; 187
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	60 81       	ld	r22, Z
    3e10:	71 81       	ldd	r23, Z+1	; 0x01
    3e12:	82 81       	ldd	r24, Z+2	; 0x02
    3e14:	93 81       	ldd	r25, Z+3	; 0x03
    3e16:	20 e0       	ldi	r18, 0x00	; 0
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	4a e7       	ldi	r20, 0x7A	; 122
    3e1c:	54 e4       	ldi	r21, 0x44	; 68
    3e1e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e22:	dc 01       	movw	r26, r24
    3e24:	cb 01       	movw	r24, r22
    3e26:	8c af       	std	Y+60, r24	; 0x3c
    3e28:	9d af       	std	Y+61, r25	; 0x3d
    3e2a:	ae af       	std	Y+62, r26	; 0x3e
    3e2c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e2e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e30:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e32:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e34:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e36:	20 e0       	ldi	r18, 0x00	; 0
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	4a ef       	ldi	r20, 0xFA	; 250
    3e3c:	54 e4       	ldi	r21, 0x44	; 68
    3e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e42:	dc 01       	movw	r26, r24
    3e44:	cb 01       	movw	r24, r22
    3e46:	88 af       	std	Y+56, r24	; 0x38
    3e48:	99 af       	std	Y+57, r25	; 0x39
    3e4a:	aa af       	std	Y+58, r26	; 0x3a
    3e4c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3e4e:	68 ad       	ldd	r22, Y+56	; 0x38
    3e50:	79 ad       	ldd	r23, Y+57	; 0x39
    3e52:	8a ad       	ldd	r24, Y+58	; 0x3a
    3e54:	9b ad       	ldd	r25, Y+59	; 0x3b
    3e56:	20 e0       	ldi	r18, 0x00	; 0
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	40 e8       	ldi	r20, 0x80	; 128
    3e5c:	5f e3       	ldi	r21, 0x3F	; 63
    3e5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e62:	88 23       	and	r24, r24
    3e64:	2c f4       	brge	.+10     	; 0x3e70 <ultrasonic_void_Start+0x11c>
		__ticks = 1;
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	9f ab       	std	Y+55, r25	; 0x37
    3e6c:	8e ab       	std	Y+54, r24	; 0x36
    3e6e:	3f c0       	rjmp	.+126    	; 0x3eee <ultrasonic_void_Start+0x19a>
	else if (__tmp > 65535)
    3e70:	68 ad       	ldd	r22, Y+56	; 0x38
    3e72:	79 ad       	ldd	r23, Y+57	; 0x39
    3e74:	8a ad       	ldd	r24, Y+58	; 0x3a
    3e76:	9b ad       	ldd	r25, Y+59	; 0x3b
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	3f ef       	ldi	r19, 0xFF	; 255
    3e7c:	4f e7       	ldi	r20, 0x7F	; 127
    3e7e:	57 e4       	ldi	r21, 0x47	; 71
    3e80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e84:	18 16       	cp	r1, r24
    3e86:	4c f5       	brge	.+82     	; 0x3eda <ultrasonic_void_Start+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e88:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e8a:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e8c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e90:	20 e0       	ldi	r18, 0x00	; 0
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	40 e2       	ldi	r20, 0x20	; 32
    3e96:	51 e4       	ldi	r21, 0x41	; 65
    3e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	bc 01       	movw	r22, r24
    3ea2:	cd 01       	movw	r24, r26
    3ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
    3eac:	9f ab       	std	Y+55, r25	; 0x37
    3eae:	8e ab       	std	Y+54, r24	; 0x36
    3eb0:	0f c0       	rjmp	.+30     	; 0x3ed0 <ultrasonic_void_Start+0x17c>
    3eb2:	88 ec       	ldi	r24, 0xC8	; 200
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	9d ab       	std	Y+53, r25	; 0x35
    3eb8:	8c ab       	std	Y+52, r24	; 0x34
    3eba:	8c a9       	ldd	r24, Y+52	; 0x34
    3ebc:	9d a9       	ldd	r25, Y+53	; 0x35
    3ebe:	01 97       	sbiw	r24, 0x01	; 1
    3ec0:	f1 f7       	brne	.-4      	; 0x3ebe <ultrasonic_void_Start+0x16a>
    3ec2:	9d ab       	std	Y+53, r25	; 0x35
    3ec4:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec6:	8e a9       	ldd	r24, Y+54	; 0x36
    3ec8:	9f a9       	ldd	r25, Y+55	; 0x37
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	9f ab       	std	Y+55, r25	; 0x37
    3ece:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed0:	8e a9       	ldd	r24, Y+54	; 0x36
    3ed2:	9f a9       	ldd	r25, Y+55	; 0x37
    3ed4:	00 97       	sbiw	r24, 0x00	; 0
    3ed6:	69 f7       	brne	.-38     	; 0x3eb2 <ultrasonic_void_Start+0x15e>
    3ed8:	2d c0       	rjmp	.+90     	; 0x3f34 <ultrasonic_void_Start+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eda:	68 ad       	ldd	r22, Y+56	; 0x38
    3edc:	79 ad       	ldd	r23, Y+57	; 0x39
    3ede:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ee0:	9b ad       	ldd	r25, Y+59	; 0x3b
    3ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	9f ab       	std	Y+55, r25	; 0x37
    3eec:	8e ab       	std	Y+54, r24	; 0x36
    3eee:	8e a9       	ldd	r24, Y+54	; 0x36
    3ef0:	9f a9       	ldd	r25, Y+55	; 0x37
    3ef2:	9b ab       	std	Y+51, r25	; 0x33
    3ef4:	8a ab       	std	Y+50, r24	; 0x32
    3ef6:	8a a9       	ldd	r24, Y+50	; 0x32
    3ef8:	9b a9       	ldd	r25, Y+51	; 0x33
    3efa:	01 97       	sbiw	r24, 0x01	; 1
    3efc:	f1 f7       	brne	.-4      	; 0x3efa <ultrasonic_void_Start+0x1a6>
    3efe:	9b ab       	std	Y+51, r25	; 0x33
    3f00:	8a ab       	std	Y+50, r24	; 0x32
    3f02:	18 c0       	rjmp	.+48     	; 0x3f34 <ultrasonic_void_Start+0x1e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f04:	fe 01       	movw	r30, r28
    3f06:	ef 5b       	subi	r30, 0xBF	; 191
    3f08:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0a:	60 81       	ld	r22, Z
    3f0c:	71 81       	ldd	r23, Z+1	; 0x01
    3f0e:	82 81       	ldd	r24, Z+2	; 0x02
    3f10:	93 81       	ldd	r25, Z+3	; 0x03
    3f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f16:	dc 01       	movw	r26, r24
    3f18:	cb 01       	movw	r24, r22
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	e0 5c       	subi	r30, 0xC0	; 192
    3f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f20:	80 83       	st	Z, r24
    3f22:	fe 01       	movw	r30, r28
    3f24:	e0 5c       	subi	r30, 0xC0	; 192
    3f26:	ff 4f       	sbci	r31, 0xFF	; 255
    3f28:	80 81       	ld	r24, Z
    3f2a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f2c:	89 a9       	ldd	r24, Y+49	; 0x31
    3f2e:	8a 95       	dec	r24
    3f30:	f1 f7       	brne	.-4      	; 0x3f2e <ultrasonic_void_Start+0x1da>
    3f32:	89 ab       	std	Y+49, r24	; 0x31
		 _delay_us(1);
	 DIO_enuWritePin(ULTRASONI_TRIGGER_PIN  , DIO_u8HIGH);
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	61 e0       	ldi	r22, 0x01	; 1
    3f38:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
	 start_flag =1;
    3f3c:	81 e0       	ldi	r24, 0x01	; 1
    3f3e:	80 93 86 01 	sts	0x0186, r24
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	a0 e2       	ldi	r26, 0x20	; 32
    3f48:	b1 e4       	ldi	r27, 0x41	; 65
    3f4a:	8d a7       	std	Y+45, r24	; 0x2d
    3f4c:	9e a7       	std	Y+46, r25	; 0x2e
    3f4e:	af a7       	std	Y+47, r26	; 0x2f
    3f50:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f52:	6d a5       	ldd	r22, Y+45	; 0x2d
    3f54:	7e a5       	ldd	r23, Y+46	; 0x2e
    3f56:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f58:	98 a9       	ldd	r25, Y+48	; 0x30
    3f5a:	2b ea       	ldi	r18, 0xAB	; 171
    3f5c:	3a ea       	ldi	r19, 0xAA	; 170
    3f5e:	4a e2       	ldi	r20, 0x2A	; 42
    3f60:	50 e4       	ldi	r21, 0x40	; 64
    3f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	89 a7       	std	Y+41, r24	; 0x29
    3f6c:	9a a7       	std	Y+42, r25	; 0x2a
    3f6e:	ab a7       	std	Y+43, r26	; 0x2b
    3f70:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3f72:	69 a5       	ldd	r22, Y+41	; 0x29
    3f74:	7a a5       	ldd	r23, Y+42	; 0x2a
    3f76:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f78:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	40 e8       	ldi	r20, 0x80	; 128
    3f80:	5f e3       	ldi	r21, 0x3F	; 63
    3f82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f86:	88 23       	and	r24, r24
    3f88:	1c f4       	brge	.+6      	; 0x3f90 <ultrasonic_void_Start+0x23c>
		__ticks = 1;
    3f8a:	81 e0       	ldi	r24, 0x01	; 1
    3f8c:	88 a7       	std	Y+40, r24	; 0x28
    3f8e:	91 c0       	rjmp	.+290    	; 0x40b2 <ultrasonic_void_Start+0x35e>
	else if (__tmp > 255)
    3f90:	69 a5       	ldd	r22, Y+41	; 0x29
    3f92:	7a a5       	ldd	r23, Y+42	; 0x2a
    3f94:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f96:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	4f e7       	ldi	r20, 0x7F	; 127
    3f9e:	53 e4       	ldi	r21, 0x43	; 67
    3fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fa4:	18 16       	cp	r1, r24
    3fa6:	0c f0       	brlt	.+2      	; 0x3faa <ultrasonic_void_Start+0x256>
    3fa8:	7b c0       	rjmp	.+246    	; 0x40a0 <ultrasonic_void_Start+0x34c>
	{
		_delay_ms(__us / 1000.0);
    3faa:	6d a5       	ldd	r22, Y+45	; 0x2d
    3fac:	7e a5       	ldd	r23, Y+46	; 0x2e
    3fae:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fb0:	98 a9       	ldd	r25, Y+48	; 0x30
    3fb2:	20 e0       	ldi	r18, 0x00	; 0
    3fb4:	30 e0       	ldi	r19, 0x00	; 0
    3fb6:	4a e7       	ldi	r20, 0x7A	; 122
    3fb8:	54 e4       	ldi	r21, 0x44	; 68
    3fba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	8c a3       	std	Y+36, r24	; 0x24
    3fc4:	9d a3       	std	Y+37, r25	; 0x25
    3fc6:	ae a3       	std	Y+38, r26	; 0x26
    3fc8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fca:	6c a1       	ldd	r22, Y+36	; 0x24
    3fcc:	7d a1       	ldd	r23, Y+37	; 0x25
    3fce:	8e a1       	ldd	r24, Y+38	; 0x26
    3fd0:	9f a1       	ldd	r25, Y+39	; 0x27
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	4a ef       	ldi	r20, 0xFA	; 250
    3fd8:	54 e4       	ldi	r21, 0x44	; 68
    3fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	88 a3       	std	Y+32, r24	; 0x20
    3fe4:	99 a3       	std	Y+33, r25	; 0x21
    3fe6:	aa a3       	std	Y+34, r26	; 0x22
    3fe8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3fea:	68 a1       	ldd	r22, Y+32	; 0x20
    3fec:	79 a1       	ldd	r23, Y+33	; 0x21
    3fee:	8a a1       	ldd	r24, Y+34	; 0x22
    3ff0:	9b a1       	ldd	r25, Y+35	; 0x23
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	40 e8       	ldi	r20, 0x80	; 128
    3ff8:	5f e3       	ldi	r21, 0x3F	; 63
    3ffa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ffe:	88 23       	and	r24, r24
    4000:	2c f4       	brge	.+10     	; 0x400c <ultrasonic_void_Start+0x2b8>
		__ticks = 1;
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	9f 8f       	std	Y+31, r25	; 0x1f
    4008:	8e 8f       	std	Y+30, r24	; 0x1e
    400a:	3f c0       	rjmp	.+126    	; 0x408a <ultrasonic_void_Start+0x336>
	else if (__tmp > 65535)
    400c:	68 a1       	ldd	r22, Y+32	; 0x20
    400e:	79 a1       	ldd	r23, Y+33	; 0x21
    4010:	8a a1       	ldd	r24, Y+34	; 0x22
    4012:	9b a1       	ldd	r25, Y+35	; 0x23
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	3f ef       	ldi	r19, 0xFF	; 255
    4018:	4f e7       	ldi	r20, 0x7F	; 127
    401a:	57 e4       	ldi	r21, 0x47	; 71
    401c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4020:	18 16       	cp	r1, r24
    4022:	4c f5       	brge	.+82     	; 0x4076 <ultrasonic_void_Start+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4024:	6c a1       	ldd	r22, Y+36	; 0x24
    4026:	7d a1       	ldd	r23, Y+37	; 0x25
    4028:	8e a1       	ldd	r24, Y+38	; 0x26
    402a:	9f a1       	ldd	r25, Y+39	; 0x27
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	40 e2       	ldi	r20, 0x20	; 32
    4032:	51 e4       	ldi	r21, 0x41	; 65
    4034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4038:	dc 01       	movw	r26, r24
    403a:	cb 01       	movw	r24, r22
    403c:	bc 01       	movw	r22, r24
    403e:	cd 01       	movw	r24, r26
    4040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4044:	dc 01       	movw	r26, r24
    4046:	cb 01       	movw	r24, r22
    4048:	9f 8f       	std	Y+31, r25	; 0x1f
    404a:	8e 8f       	std	Y+30, r24	; 0x1e
    404c:	0f c0       	rjmp	.+30     	; 0x406c <ultrasonic_void_Start+0x318>
    404e:	88 ec       	ldi	r24, 0xC8	; 200
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	9d 8f       	std	Y+29, r25	; 0x1d
    4054:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4056:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4058:	9d 8d       	ldd	r25, Y+29	; 0x1d
    405a:	01 97       	sbiw	r24, 0x01	; 1
    405c:	f1 f7       	brne	.-4      	; 0x405a <ultrasonic_void_Start+0x306>
    405e:	9d 8f       	std	Y+29, r25	; 0x1d
    4060:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4062:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4064:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4066:	01 97       	sbiw	r24, 0x01	; 1
    4068:	9f 8f       	std	Y+31, r25	; 0x1f
    406a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    406c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    406e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4070:	00 97       	sbiw	r24, 0x00	; 0
    4072:	69 f7       	brne	.-38     	; 0x404e <ultrasonic_void_Start+0x2fa>
    4074:	24 c0       	rjmp	.+72     	; 0x40be <ultrasonic_void_Start+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4076:	68 a1       	ldd	r22, Y+32	; 0x20
    4078:	79 a1       	ldd	r23, Y+33	; 0x21
    407a:	8a a1       	ldd	r24, Y+34	; 0x22
    407c:	9b a1       	ldd	r25, Y+35	; 0x23
    407e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4082:	dc 01       	movw	r26, r24
    4084:	cb 01       	movw	r24, r22
    4086:	9f 8f       	std	Y+31, r25	; 0x1f
    4088:	8e 8f       	std	Y+30, r24	; 0x1e
    408a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    408c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    408e:	9b 8f       	std	Y+27, r25	; 0x1b
    4090:	8a 8f       	std	Y+26, r24	; 0x1a
    4092:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4094:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4096:	01 97       	sbiw	r24, 0x01	; 1
    4098:	f1 f7       	brne	.-4      	; 0x4096 <ultrasonic_void_Start+0x342>
    409a:	9b 8f       	std	Y+27, r25	; 0x1b
    409c:	8a 8f       	std	Y+26, r24	; 0x1a
    409e:	0f c0       	rjmp	.+30     	; 0x40be <ultrasonic_void_Start+0x36a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    40a0:	69 a5       	ldd	r22, Y+41	; 0x29
    40a2:	7a a5       	ldd	r23, Y+42	; 0x2a
    40a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    40a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    40a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	88 a7       	std	Y+40, r24	; 0x28
    40b2:	88 a5       	ldd	r24, Y+40	; 0x28
    40b4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    40b6:	89 8d       	ldd	r24, Y+25	; 0x19
    40b8:	8a 95       	dec	r24
    40ba:	f1 f7       	brne	.-4      	; 0x40b8 <ultrasonic_void_Start+0x364>
    40bc:	89 8f       	std	Y+25, r24	; 0x19
	 _delay_us(10);
	 DIO_enuWritePin(ULTRASONI_TRIGGER_PIN , DIO_u8LOW);
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	60 e0       	ldi	r22, 0x00	; 0
    40c2:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	a0 e8       	ldi	r26, 0x80	; 128
    40cc:	bf e3       	ldi	r27, 0x3F	; 63
    40ce:	8d 8b       	std	Y+21, r24	; 0x15
    40d0:	9e 8b       	std	Y+22, r25	; 0x16
    40d2:	af 8b       	std	Y+23, r26	; 0x17
    40d4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    40d6:	6d 89       	ldd	r22, Y+21	; 0x15
    40d8:	7e 89       	ldd	r23, Y+22	; 0x16
    40da:	8f 89       	ldd	r24, Y+23	; 0x17
    40dc:	98 8d       	ldd	r25, Y+24	; 0x18
    40de:	2b ea       	ldi	r18, 0xAB	; 171
    40e0:	3a ea       	ldi	r19, 0xAA	; 170
    40e2:	4a e2       	ldi	r20, 0x2A	; 42
    40e4:	50 e4       	ldi	r21, 0x40	; 64
    40e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	89 8b       	std	Y+17, r24	; 0x11
    40f0:	9a 8b       	std	Y+18, r25	; 0x12
    40f2:	ab 8b       	std	Y+19, r26	; 0x13
    40f4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    40f6:	69 89       	ldd	r22, Y+17	; 0x11
    40f8:	7a 89       	ldd	r23, Y+18	; 0x12
    40fa:	8b 89       	ldd	r24, Y+19	; 0x13
    40fc:	9c 89       	ldd	r25, Y+20	; 0x14
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	40 e8       	ldi	r20, 0x80	; 128
    4104:	5f e3       	ldi	r21, 0x3F	; 63
    4106:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    410a:	88 23       	and	r24, r24
    410c:	1c f4       	brge	.+6      	; 0x4114 <ultrasonic_void_Start+0x3c0>
		__ticks = 1;
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	88 8b       	std	Y+16, r24	; 0x10
    4112:	91 c0       	rjmp	.+290    	; 0x4236 <ultrasonic_void_Start+0x4e2>
	else if (__tmp > 255)
    4114:	69 89       	ldd	r22, Y+17	; 0x11
    4116:	7a 89       	ldd	r23, Y+18	; 0x12
    4118:	8b 89       	ldd	r24, Y+19	; 0x13
    411a:	9c 89       	ldd	r25, Y+20	; 0x14
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	4f e7       	ldi	r20, 0x7F	; 127
    4122:	53 e4       	ldi	r21, 0x43	; 67
    4124:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4128:	18 16       	cp	r1, r24
    412a:	0c f0       	brlt	.+2      	; 0x412e <ultrasonic_void_Start+0x3da>
    412c:	7b c0       	rjmp	.+246    	; 0x4224 <ultrasonic_void_Start+0x4d0>
	{
		_delay_ms(__us / 1000.0);
    412e:	6d 89       	ldd	r22, Y+21	; 0x15
    4130:	7e 89       	ldd	r23, Y+22	; 0x16
    4132:	8f 89       	ldd	r24, Y+23	; 0x17
    4134:	98 8d       	ldd	r25, Y+24	; 0x18
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	4a e7       	ldi	r20, 0x7A	; 122
    413c:	54 e4       	ldi	r21, 0x44	; 68
    413e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4142:	dc 01       	movw	r26, r24
    4144:	cb 01       	movw	r24, r22
    4146:	8c 87       	std	Y+12, r24	; 0x0c
    4148:	9d 87       	std	Y+13, r25	; 0x0d
    414a:	ae 87       	std	Y+14, r26	; 0x0e
    414c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    414e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4150:	7d 85       	ldd	r23, Y+13	; 0x0d
    4152:	8e 85       	ldd	r24, Y+14	; 0x0e
    4154:	9f 85       	ldd	r25, Y+15	; 0x0f
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	4a ef       	ldi	r20, 0xFA	; 250
    415c:	54 e4       	ldi	r21, 0x44	; 68
    415e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4162:	dc 01       	movw	r26, r24
    4164:	cb 01       	movw	r24, r22
    4166:	88 87       	std	Y+8, r24	; 0x08
    4168:	99 87       	std	Y+9, r25	; 0x09
    416a:	aa 87       	std	Y+10, r26	; 0x0a
    416c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    416e:	68 85       	ldd	r22, Y+8	; 0x08
    4170:	79 85       	ldd	r23, Y+9	; 0x09
    4172:	8a 85       	ldd	r24, Y+10	; 0x0a
    4174:	9b 85       	ldd	r25, Y+11	; 0x0b
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	40 e8       	ldi	r20, 0x80	; 128
    417c:	5f e3       	ldi	r21, 0x3F	; 63
    417e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4182:	88 23       	and	r24, r24
    4184:	2c f4       	brge	.+10     	; 0x4190 <ultrasonic_void_Start+0x43c>
		__ticks = 1;
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	9f 83       	std	Y+7, r25	; 0x07
    418c:	8e 83       	std	Y+6, r24	; 0x06
    418e:	3f c0       	rjmp	.+126    	; 0x420e <ultrasonic_void_Start+0x4ba>
	else if (__tmp > 65535)
    4190:	68 85       	ldd	r22, Y+8	; 0x08
    4192:	79 85       	ldd	r23, Y+9	; 0x09
    4194:	8a 85       	ldd	r24, Y+10	; 0x0a
    4196:	9b 85       	ldd	r25, Y+11	; 0x0b
    4198:	20 e0       	ldi	r18, 0x00	; 0
    419a:	3f ef       	ldi	r19, 0xFF	; 255
    419c:	4f e7       	ldi	r20, 0x7F	; 127
    419e:	57 e4       	ldi	r21, 0x47	; 71
    41a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41a4:	18 16       	cp	r1, r24
    41a6:	4c f5       	brge	.+82     	; 0x41fa <ultrasonic_void_Start+0x4a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    41aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    41ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    41ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    41b0:	20 e0       	ldi	r18, 0x00	; 0
    41b2:	30 e0       	ldi	r19, 0x00	; 0
    41b4:	40 e2       	ldi	r20, 0x20	; 32
    41b6:	51 e4       	ldi	r21, 0x41	; 65
    41b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41bc:	dc 01       	movw	r26, r24
    41be:	cb 01       	movw	r24, r22
    41c0:	bc 01       	movw	r22, r24
    41c2:	cd 01       	movw	r24, r26
    41c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c8:	dc 01       	movw	r26, r24
    41ca:	cb 01       	movw	r24, r22
    41cc:	9f 83       	std	Y+7, r25	; 0x07
    41ce:	8e 83       	std	Y+6, r24	; 0x06
    41d0:	0f c0       	rjmp	.+30     	; 0x41f0 <ultrasonic_void_Start+0x49c>
    41d2:	88 ec       	ldi	r24, 0xC8	; 200
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	9d 83       	std	Y+5, r25	; 0x05
    41d8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    41da:	8c 81       	ldd	r24, Y+4	; 0x04
    41dc:	9d 81       	ldd	r25, Y+5	; 0x05
    41de:	01 97       	sbiw	r24, 0x01	; 1
    41e0:	f1 f7       	brne	.-4      	; 0x41de <ultrasonic_void_Start+0x48a>
    41e2:	9d 83       	std	Y+5, r25	; 0x05
    41e4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e6:	8e 81       	ldd	r24, Y+6	; 0x06
    41e8:	9f 81       	ldd	r25, Y+7	; 0x07
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	9f 83       	std	Y+7, r25	; 0x07
    41ee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f0:	8e 81       	ldd	r24, Y+6	; 0x06
    41f2:	9f 81       	ldd	r25, Y+7	; 0x07
    41f4:	00 97       	sbiw	r24, 0x00	; 0
    41f6:	69 f7       	brne	.-38     	; 0x41d2 <ultrasonic_void_Start+0x47e>
    41f8:	24 c0       	rjmp	.+72     	; 0x4242 <ultrasonic_void_Start+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41fa:	68 85       	ldd	r22, Y+8	; 0x08
    41fc:	79 85       	ldd	r23, Y+9	; 0x09
    41fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    4200:	9b 85       	ldd	r25, Y+11	; 0x0b
    4202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4206:	dc 01       	movw	r26, r24
    4208:	cb 01       	movw	r24, r22
    420a:	9f 83       	std	Y+7, r25	; 0x07
    420c:	8e 83       	std	Y+6, r24	; 0x06
    420e:	8e 81       	ldd	r24, Y+6	; 0x06
    4210:	9f 81       	ldd	r25, Y+7	; 0x07
    4212:	9b 83       	std	Y+3, r25	; 0x03
    4214:	8a 83       	std	Y+2, r24	; 0x02
    4216:	8a 81       	ldd	r24, Y+2	; 0x02
    4218:	9b 81       	ldd	r25, Y+3	; 0x03
    421a:	01 97       	sbiw	r24, 0x01	; 1
    421c:	f1 f7       	brne	.-4      	; 0x421a <ultrasonic_void_Start+0x4c6>
    421e:	9b 83       	std	Y+3, r25	; 0x03
    4220:	8a 83       	std	Y+2, r24	; 0x02
    4222:	0f c0       	rjmp	.+30     	; 0x4242 <ultrasonic_void_Start+0x4ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4224:	69 89       	ldd	r22, Y+17	; 0x11
    4226:	7a 89       	ldd	r23, Y+18	; 0x12
    4228:	8b 89       	ldd	r24, Y+19	; 0x13
    422a:	9c 89       	ldd	r25, Y+20	; 0x14
    422c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4230:	dc 01       	movw	r26, r24
    4232:	cb 01       	movw	r24, r22
    4234:	88 8b       	std	Y+16, r24	; 0x10
    4236:	88 89       	ldd	r24, Y+16	; 0x10
    4238:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    423a:	89 81       	ldd	r24, Y+1	; 0x01
    423c:	8a 95       	dec	r24
    423e:	f1 f7       	brne	.-4      	; 0x423c <ultrasonic_void_Start+0x4e8>
    4240:	89 83       	std	Y+1, r24	; 0x01
	 _delay_us(1);
	//EXTINT0_voidSetCallBack(ultrasonic_void_callBack);
}
    4242:	c8 5b       	subi	r28, 0xB8	; 184
    4244:	df 4f       	sbci	r29, 0xFF	; 255
    4246:	0f b6       	in	r0, 0x3f	; 63
    4248:	f8 94       	cli
    424a:	de bf       	out	0x3e, r29	; 62
    424c:	0f be       	out	0x3f, r0	; 63
    424e:	cd bf       	out	0x3d, r28	; 61
    4250:	cf 91       	pop	r28
    4252:	df 91       	pop	r29
    4254:	1f 91       	pop	r17
    4256:	0f 91       	pop	r16
    4258:	08 95       	ret

0000425a <ultrasonic_void_callBack>:
void ultrasonic_void_callBack(void)
{
    425a:	ef 92       	push	r14
    425c:	ff 92       	push	r15
    425e:	0f 93       	push	r16
    4260:	1f 93       	push	r17
    4262:	df 93       	push	r29
    4264:	cf 93       	push	r28
    4266:	cd b7       	in	r28, 0x3d	; 61
    4268:	de b7       	in	r29, 0x3e	; 62
        if (start_flag) { //accept interrupts only when sonar was started
    426a:	80 91 86 01 	lds	r24, 0x0186
    426e:	88 23       	and	r24, r24
    4270:	09 f4       	brne	.+2      	; 0x4274 <ultrasonic_void_callBack+0x1a>
    4272:	4a c0       	rjmp	.+148    	; 0x4308 <ultrasonic_void_callBack+0xae>
                if (TIM0__u8_get_detect_up() == 0) { // voltage rise, start time measurement
    4274:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <TIM0__u8_get_detect_up>
    4278:	88 23       	and	r24, r24
    427a:	a9 f4       	brne	.+42     	; 0x42a6 <ultrasonic_void_callBack+0x4c>
                	TIM0_voidsetCntrValue();
    427c:	0e 94 ce 1b 	call	0x379c	; 0x379c <TIM0_voidsetCntrValue>
                    TIM0_voidSet_TimerCounter();
    4280:	0e 94 a2 1b 	call	0x3744	; 0x3744 <TIM0_voidSet_TimerCounter>
                	    TIM0_void_set_up() ;
    4284:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <TIM0_void_set_up>
                        result=0;
    4288:	80 e0       	ldi	r24, 0x00	; 0
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	a0 e0       	ldi	r26, 0x00	; 0
    428e:	b0 e0       	ldi	r27, 0x00	; 0
    4290:	80 93 7e 01 	sts	0x017E, r24
    4294:	90 93 7f 01 	sts	0x017F, r25
    4298:	a0 93 80 01 	sts	0x0180, r26
    429c:	b0 93 81 01 	sts	0x0181, r27
                        TIM0_voidEnableOVFIntterrupt();
    42a0:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <TIM0_voidEnableOVFIntterrupt>
    42a4:	31 c0       	rjmp	.+98     	; 0x4308 <ultrasonic_void_callBack+0xae>
                } else {
                        // voltage drop, stop time measurement
                	 result =(TIM0_u16GetCntrValue()+(TIM0_u32get_TimerCounter()*256))*0.00216;
    42a6:	0e 94 c2 1b 	call	0x3784	; 0x3784 <TIM0_u16GetCntrValue>
    42aa:	7c 01       	movw	r14, r24
    42ac:	00 e0       	ldi	r16, 0x00	; 0
    42ae:	10 e0       	ldi	r17, 0x00	; 0
    42b0:	0e 94 b1 1b 	call	0x3762	; 0x3762 <TIM0_u32get_TimerCounter>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	ba 2f       	mov	r27, r26
    42ba:	a9 2f       	mov	r26, r25
    42bc:	98 2f       	mov	r25, r24
    42be:	88 27       	eor	r24, r24
    42c0:	8e 0d       	add	r24, r14
    42c2:	9f 1d       	adc	r25, r15
    42c4:	a0 1f       	adc	r26, r16
    42c6:	b1 1f       	adc	r27, r17
    42c8:	bc 01       	movw	r22, r24
    42ca:	cd 01       	movw	r24, r26
    42cc:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    42d0:	dc 01       	movw	r26, r24
    42d2:	cb 01       	movw	r24, r22
    42d4:	bc 01       	movw	r22, r24
    42d6:	cd 01       	movw	r24, r26
    42d8:	29 ec       	ldi	r18, 0xC9	; 201
    42da:	3e e8       	ldi	r19, 0x8E	; 142
    42dc:	4d e0       	ldi	r20, 0x0D	; 13
    42de:	5b e3       	ldi	r21, 0x3B	; 59
    42e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42e4:	dc 01       	movw	r26, r24
    42e6:	cb 01       	movw	r24, r22
    42e8:	80 93 7e 01 	sts	0x017E, r24
    42ec:	90 93 7f 01 	sts	0x017F, r25
    42f0:	a0 93 80 01 	sts	0x0180, r26
    42f4:	b0 93 81 01 	sts	0x0181, r27
                        TIM0_void_reset_up();
    42f8:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <TIM0_void_reset_up>
                        start_flag=0;
    42fc:	10 92 86 01 	sts	0x0186, r1
                        TIM0_voidDisableOVFIntterrupt();
    4300:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <TIM0_voidDisableOVFIntterrupt>
                        EXTINT0_voidDisable();
    4304:	0e 94 57 0b 	call	0x16ae	; 0x16ae <EXTINT0_voidDisable>
                }
        }
}
    4308:	cf 91       	pop	r28
    430a:	df 91       	pop	r29
    430c:	1f 91       	pop	r17
    430e:	0f 91       	pop	r16
    4310:	ff 90       	pop	r15
    4312:	ef 90       	pop	r14
    4314:	08 95       	ret

00004316 <ultrasonic_f32_get_distance>:

float32 ultrasonic_f32_get_distance(void){
    4316:	df 93       	push	r29
    4318:	cf 93       	push	r28
    431a:	cd b7       	in	r28, 0x3d	; 61
    431c:	de b7       	in	r29, 0x3e	; 62
	return result;
    431e:	80 91 7e 01 	lds	r24, 0x017E
    4322:	90 91 7f 01 	lds	r25, 0x017F
    4326:	a0 91 80 01 	lds	r26, 0x0180
    432a:	b0 91 81 01 	lds	r27, 0x0181
}
    432e:	bc 01       	movw	r22, r24
    4330:	cd 01       	movw	r24, r26
    4332:	cf 91       	pop	r28
    4334:	df 91       	pop	r29
    4336:	08 95       	ret

00004338 <ultrasonic_f32_setter_distance>:
void ultrasonic_f32_setter_distance(void){
    4338:	df 93       	push	r29
    433a:	cf 93       	push	r28
    433c:	cd b7       	in	r28, 0x3d	; 61
    433e:	de b7       	in	r29, 0x3e	; 62
	 result=-1;
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	a0 e8       	ldi	r26, 0x80	; 128
    4346:	bf eb       	ldi	r27, 0xBF	; 191
    4348:	80 93 7e 01 	sts	0x017E, r24
    434c:	90 93 7f 01 	sts	0x017F, r25
    4350:	a0 93 80 01 	sts	0x0180, r26
    4354:	b0 93 81 01 	sts	0x0181, r27
}
    4358:	cf 91       	pop	r28
    435a:	df 91       	pop	r29
    435c:	08 95       	ret

0000435e <__divmodhi4>:
    435e:	97 fb       	bst	r25, 7
    4360:	09 2e       	mov	r0, r25
    4362:	07 26       	eor	r0, r23
    4364:	0a d0       	rcall	.+20     	; 0x437a <__divmodhi4_neg1>
    4366:	77 fd       	sbrc	r23, 7
    4368:	04 d0       	rcall	.+8      	; 0x4372 <__divmodhi4_neg2>
    436a:	0c d0       	rcall	.+24     	; 0x4384 <__udivmodhi4>
    436c:	06 d0       	rcall	.+12     	; 0x437a <__divmodhi4_neg1>
    436e:	00 20       	and	r0, r0
    4370:	1a f4       	brpl	.+6      	; 0x4378 <__divmodhi4_exit>

00004372 <__divmodhi4_neg2>:
    4372:	70 95       	com	r23
    4374:	61 95       	neg	r22
    4376:	7f 4f       	sbci	r23, 0xFF	; 255

00004378 <__divmodhi4_exit>:
    4378:	08 95       	ret

0000437a <__divmodhi4_neg1>:
    437a:	f6 f7       	brtc	.-4      	; 0x4378 <__divmodhi4_exit>
    437c:	90 95       	com	r25
    437e:	81 95       	neg	r24
    4380:	9f 4f       	sbci	r25, 0xFF	; 255
    4382:	08 95       	ret

00004384 <__udivmodhi4>:
    4384:	aa 1b       	sub	r26, r26
    4386:	bb 1b       	sub	r27, r27
    4388:	51 e1       	ldi	r21, 0x11	; 17
    438a:	07 c0       	rjmp	.+14     	; 0x439a <__udivmodhi4_ep>

0000438c <__udivmodhi4_loop>:
    438c:	aa 1f       	adc	r26, r26
    438e:	bb 1f       	adc	r27, r27
    4390:	a6 17       	cp	r26, r22
    4392:	b7 07       	cpc	r27, r23
    4394:	10 f0       	brcs	.+4      	; 0x439a <__udivmodhi4_ep>
    4396:	a6 1b       	sub	r26, r22
    4398:	b7 0b       	sbc	r27, r23

0000439a <__udivmodhi4_ep>:
    439a:	88 1f       	adc	r24, r24
    439c:	99 1f       	adc	r25, r25
    439e:	5a 95       	dec	r21
    43a0:	a9 f7       	brne	.-22     	; 0x438c <__udivmodhi4_loop>
    43a2:	80 95       	com	r24
    43a4:	90 95       	com	r25
    43a6:	bc 01       	movw	r22, r24
    43a8:	cd 01       	movw	r24, r26
    43aa:	08 95       	ret

000043ac <__prologue_saves__>:
    43ac:	2f 92       	push	r2
    43ae:	3f 92       	push	r3
    43b0:	4f 92       	push	r4
    43b2:	5f 92       	push	r5
    43b4:	6f 92       	push	r6
    43b6:	7f 92       	push	r7
    43b8:	8f 92       	push	r8
    43ba:	9f 92       	push	r9
    43bc:	af 92       	push	r10
    43be:	bf 92       	push	r11
    43c0:	cf 92       	push	r12
    43c2:	df 92       	push	r13
    43c4:	ef 92       	push	r14
    43c6:	ff 92       	push	r15
    43c8:	0f 93       	push	r16
    43ca:	1f 93       	push	r17
    43cc:	cf 93       	push	r28
    43ce:	df 93       	push	r29
    43d0:	cd b7       	in	r28, 0x3d	; 61
    43d2:	de b7       	in	r29, 0x3e	; 62
    43d4:	ca 1b       	sub	r28, r26
    43d6:	db 0b       	sbc	r29, r27
    43d8:	0f b6       	in	r0, 0x3f	; 63
    43da:	f8 94       	cli
    43dc:	de bf       	out	0x3e, r29	; 62
    43de:	0f be       	out	0x3f, r0	; 63
    43e0:	cd bf       	out	0x3d, r28	; 61
    43e2:	09 94       	ijmp

000043e4 <__epilogue_restores__>:
    43e4:	2a 88       	ldd	r2, Y+18	; 0x12
    43e6:	39 88       	ldd	r3, Y+17	; 0x11
    43e8:	48 88       	ldd	r4, Y+16	; 0x10
    43ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    43ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    43ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    43f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    43f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    43f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    43f6:	b9 84       	ldd	r11, Y+9	; 0x09
    43f8:	c8 84       	ldd	r12, Y+8	; 0x08
    43fa:	df 80       	ldd	r13, Y+7	; 0x07
    43fc:	ee 80       	ldd	r14, Y+6	; 0x06
    43fe:	fd 80       	ldd	r15, Y+5	; 0x05
    4400:	0c 81       	ldd	r16, Y+4	; 0x04
    4402:	1b 81       	ldd	r17, Y+3	; 0x03
    4404:	aa 81       	ldd	r26, Y+2	; 0x02
    4406:	b9 81       	ldd	r27, Y+1	; 0x01
    4408:	ce 0f       	add	r28, r30
    440a:	d1 1d       	adc	r29, r1
    440c:	0f b6       	in	r0, 0x3f	; 63
    440e:	f8 94       	cli
    4410:	de bf       	out	0x3e, r29	; 62
    4412:	0f be       	out	0x3f, r0	; 63
    4414:	cd bf       	out	0x3d, r28	; 61
    4416:	ed 01       	movw	r28, r26
    4418:	08 95       	ret

0000441a <_exit>:
    441a:	f8 94       	cli

0000441c <__stop_program>:
    441c:	ff cf       	rjmp	.-2      	; 0x441c <__stop_program>
