
lock_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018a  00800060  00005e70  00005f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  008001ea  008001ea  0000608e  2**0
                  ALLOC
  3 .stab         00005e50  00000000  00000000  00006090  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000280e  00000000  00000000  0000bee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000e6ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000e8ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000eac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  000110d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000125a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000138b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00013a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00013d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000147b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__vector_1>
       8:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_2>
       c:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__vector_3>
      10:	0c 94 67 2d 	jmp	0x5ace	; 0x5ace <__vector_4>
      14:	0c 94 23 2d 	jmp	0x5a46	; 0x5a46 <__vector_5>
      18:	0c 94 a1 2b 	jmp	0x5742	; 0x5742 <__vector_6>
      1c:	0c 94 47 2b 	jmp	0x568e	; 0x568e <__vector_7>
      20:	0c 94 74 2b 	jmp	0x56e8	; 0x56e8 <__vector_8>
      24:	0c 94 1a 2b 	jmp	0x5634	; 0x5634 <__vector_9>
      28:	0c 94 d3 28 	jmp	0x51a6	; 0x51a6 <__vector_10>
      2c:	0c 94 77 28 	jmp	0x50ee	; 0x50ee <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 31       	cpi	r26, 0x17	; 23
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <main>
      8a:	0c 94 36 2f 	jmp	0x5e6c	; 0x5e6c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ff 2e 	jmp	0x5dfe	; 0x5dfe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e9       	ldi	r26, 0x9A	; 154
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1b 2f 	jmp	0x5e36	; 0x5e36 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0b 2f 	jmp	0x5e16	; 0x5e16 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 27 2f 	jmp	0x5e4e	; 0x5e4e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0b 2f 	jmp	0x5e16	; 0x5e16 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 27 2f 	jmp	0x5e4e	; 0x5e4e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ff 2e 	jmp	0x5dfe	; 0x5dfe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e9       	ldi	r24, 0x9A	; 154
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1b 2f 	jmp	0x5e36	; 0x5e36 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 07 2f 	jmp	0x5e0e	; 0x5e0e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e9       	ldi	r22, 0x9A	; 154
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 23 2f 	jmp	0x5e46	; 0x5e46 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0b 2f 	jmp	0x5e16	; 0x5e16 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 27 2f 	jmp	0x5e4e	; 0x5e4e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0b 2f 	jmp	0x5e16	; 0x5e16 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 27 2f 	jmp	0x5e4e	; 0x5e4e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0b 2f 	jmp	0x5e16	; 0x5e16 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 27 2f 	jmp	0x5e4e	; 0x5e4e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 08 2f 	jmp	0x5e10	; 0x5e10 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 0f 2f 	jmp	0x5e1e	; 0x5e1e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 2b 2f 	jmp	0x5e56	; 0x5e56 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 07 2f 	jmp	0x5e0e	; 0x5e0e <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 23 2f 	jmp	0x5e46	; 0x5e46 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ee 55       	subi	r30, 0x5E	; 94
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <DIO_voidInit>:
#include  "DIO_priv.h"

/* Description: function init is used  to scan the configuration from the user    */

void DIO_voidInit(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = CONC(DIO_u8DIR_PIN_7,DIO_u8DIR_PIN_6,DIO_u8DIR_PIN_5,DIO_u8DIR_PIN_4,DIO_u8DIR_PIN_3,DIO_u8DIR_PIN_2,DIO_u8DIR_PIN_1,DIO_u8DIR_PIN_0);
     ef2:	ea e3       	ldi	r30, 0x3A	; 58
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	80 83       	st	Z, r24
	DDRB = CONC(DIO_u8DIR_PIN_15,DIO_u8DIR_PIN_14,DIO_u8DIR_PIN_13,DIO_u8DIR_PIN_12,DIO_u8DIR_PIN_11,DIO_u8DIR_PIN_10,DIO_u8DIR_PIN_9,DIO_u8DIR_PIN_8);
     efa:	e7 e3       	ldi	r30, 0x37	; 55
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	8b ef       	ldi	r24, 0xFB	; 251
     f00:	80 83       	st	Z, r24
	DDRC = CONC(DIO_u8DIR_PIN_23,DIO_u8DIR_PIN_22,DIO_u8DIR_PIN_21,DIO_u8DIR_PIN_20,DIO_u8DIR_PIN_19,DIO_u8DIR_PIN_18,DIO_u8DIR_PIN_17,DIO_u8DIR_PIN_16);
     f02:	e4 e3       	ldi	r30, 0x34	; 52
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 ec       	ldi	r24, 0xC0	; 192
     f08:	80 83       	st	Z, r24
	DDRD = CONC(DIO_u8DIR_PIN_31,DIO_u8DIR_PIN_30,DIO_u8DIR_PIN_29,DIO_u8DIR_PIN_28,DIO_u8DIR_PIN_27,DIO_u8DIR_PIN_26,DIO_u8DIR_PIN_25,DIO_u8DIR_PIN_24);
     f0a:	e1 e3       	ldi	r30, 0x31	; 49
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	8a ef       	ldi	r24, 0xFA	; 250
     f10:	80 83       	st	Z, r24
	
}
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <DIO_enuWritePin>:

/* Description : function write DIO_u8HIGH or DIO_u8LOW on Pin start 0 to 31       */
tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy , uint8 u8PinValueCpy)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <DIO_enuWritePin+0x6>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <DIO_enuWritePin+0x8>
     f20:	0f 92       	push	r0
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	8a 83       	std	Y+2, r24	; 0x02
     f28:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStatusLoc = E_OK ;
     f2a:	19 82       	std	Y+1, r1	; 0x01
	
	switch (u8PinValueCpy)
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	3d 83       	std	Y+5, r19	; 0x05
     f34:	2c 83       	std	Y+4, r18	; 0x04
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	09 f4       	brne	.+2      	; 0xf40 <DIO_enuWritePin+0x28>
     f3e:	77 c0       	rjmp	.+238    	; 0x102e <DIO_enuWritePin+0x116>
     f40:	2c 81       	ldd	r18, Y+4	; 0x04
     f42:	3d 81       	ldd	r19, Y+5	; 0x05
     f44:	21 30       	cpi	r18, 0x01	; 1
     f46:	31 05       	cpc	r19, r1
     f48:	09 f0       	breq	.+2      	; 0xf4c <DIO_enuWritePin+0x34>
     f4a:	e6 c0       	rjmp	.+460    	; 0x1118 <DIO_enuWritePin+0x200>
		{
			case DIO_u8HIGH :
				if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	88 30       	cpi	r24, 0x08	; 8
     f50:	a0 f4       	brcc	.+40     	; 0xf7a <DIO_enuWritePin+0x62>
				{
					SET_BIT(ODRA , u8PinNumCpy ) ;	
     f52:	ab e3       	ldi	r26, 0x3B	; 59
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	eb e3       	ldi	r30, 0x3B	; 59
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_enuWritePin+0x58>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_enuWritePin+0x54>
     f74:	84 2b       	or	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	d1 c0       	rjmp	.+418    	; 0x111c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	88 30       	cpi	r24, 0x08	; 8
     f7e:	d0 f0       	brcs	.+52     	; 0xfb4 <DIO_enuWritePin+0x9c>
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	80 31       	cpi	r24, 0x10	; 16
     f84:	b8 f4       	brcc	.+46     	; 0xfb4 <DIO_enuWritePin+0x9c>
				{
					SET_BIT(ODRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
     f86:	a8 e3       	ldi	r26, 0x38	; 56
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e8 e3       	ldi	r30, 0x38	; 56
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9c 01       	movw	r18, r24
     f9a:	27 70       	andi	r18, 0x07	; 7
     f9c:	30 70       	andi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_enuWritePin+0x92>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_enuWritePin+0x8e>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	b4 c0       	rjmp	.+360    	; 0x111c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	80 31       	cpi	r24, 0x10	; 16
     fb8:	d0 f0       	brcs	.+52     	; 0xfee <DIO_enuWritePin+0xd6>
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	88 31       	cpi	r24, 0x18	; 24
     fbe:	b8 f4       	brcc	.+46     	; 0xfee <DIO_enuWritePin+0xd6>
				{
					SET_BIT(ODRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
     fc0:	a5 e3       	ldi	r26, 0x35	; 53
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e5 e3       	ldi	r30, 0x35	; 53
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	9c 01       	movw	r18, r24
     fd4:	27 70       	andi	r18, 0x07	; 7
     fd6:	30 70       	andi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_enuWritePin+0xcc>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_enuWritePin+0xc8>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	97 c0       	rjmp	.+302    	; 0x111c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	88 31       	cpi	r24, 0x18	; 24
     ff2:	d0 f0       	brcs	.+52     	; 0x1028 <DIO_enuWritePin+0x110>
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	80 32       	cpi	r24, 0x20	; 32
     ff8:	b8 f4       	brcc	.+46     	; 0x1028 <DIO_enuWritePin+0x110>
				{
					SET_BIT(ODRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
     ffa:	a2 e3       	ldi	r26, 0x32	; 50
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e2 e3       	ldi	r30, 0x32	; 50
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9c 01       	movw	r18, r24
    100e:	27 70       	andi	r18, 0x07	; 7
    1010:	30 70       	andi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_enuWritePin+0x106>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_enuWritePin+0x102>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	7a c0       	rjmp	.+244    	; 0x111c <DIO_enuWritePin+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	77 c0       	rjmp	.+238    	; 0x111c <DIO_enuWritePin+0x204>
				}
			break ;
			case DIO_u8LOW :
				if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	88 30       	cpi	r24, 0x08	; 8
    1032:	a8 f4       	brcc	.+42     	; 0x105e <DIO_enuWritePin+0x146>
				{		
					CLR_BIT(ODRA , u8PinNumCpy ) ;
    1034:	ab e3       	ldi	r26, 0x3B	; 59
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	eb e3       	ldi	r30, 0x3B	; 59
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_enuWritePin+0x13a>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_enuWritePin+0x136>
    1056:	80 95       	com	r24
    1058:	84 23       	and	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	5f c0       	rjmp	.+190    	; 0x111c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	88 30       	cpi	r24, 0x08	; 8
    1062:	d8 f0       	brcs	.+54     	; 0x109a <DIO_enuWritePin+0x182>
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	80 31       	cpi	r24, 0x10	; 16
    1068:	c0 f4       	brcc	.+48     	; 0x109a <DIO_enuWritePin+0x182>
				{
					CLR_BIT(ODRB , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    106a:	a8 e3       	ldi	r26, 0x38	; 56
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e8 e3       	ldi	r30, 0x38	; 56
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9c 01       	movw	r18, r24
    107e:	27 70       	andi	r18, 0x07	; 7
    1080:	30 70       	andi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_enuWritePin+0x176>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_enuWritePin+0x172>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	41 c0       	rjmp	.+130    	; 0x111c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	80 31       	cpi	r24, 0x10	; 16
    109e:	d8 f0       	brcs	.+54     	; 0x10d6 <DIO_enuWritePin+0x1be>
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	88 31       	cpi	r24, 0x18	; 24
    10a4:	c0 f4       	brcc	.+48     	; 0x10d6 <DIO_enuWritePin+0x1be>
				{
					CLR_BIT(ODRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    10a6:	a5 e3       	ldi	r26, 0x35	; 53
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e3       	ldi	r30, 0x35	; 53
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9c 01       	movw	r18, r24
    10ba:	27 70       	andi	r18, 0x07	; 7
    10bc:	30 70       	andi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_enuWritePin+0x1b2>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_enuWritePin+0x1ae>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	23 c0       	rjmp	.+70     	; 0x111c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	88 31       	cpi	r24, 0x18	; 24
    10da:	d8 f0       	brcs	.+54     	; 0x1112 <DIO_enuWritePin+0x1fa>
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	80 32       	cpi	r24, 0x20	; 32
    10e0:	c0 f4       	brcc	.+48     	; 0x1112 <DIO_enuWritePin+0x1fa>
				{
					CLR_BIT(ODRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    10e2:	a2 e3       	ldi	r26, 0x32	; 50
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e2 e3       	ldi	r30, 0x32	; 50
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9c 01       	movw	r18, r24
    10f6:	27 70       	andi	r18, 0x07	; 7
    10f8:	30 70       	andi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_enuWritePin+0x1ee>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_enuWritePin+0x1ea>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	05 c0       	rjmp	.+10     	; 0x111c <DIO_enuWritePin+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_enuWritePin+0x204>
				}
			
			break ;
			default :
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	89 83       	std	Y+1, r24	; 0x01
			break ;
			
		}
	
	return enuReturnStatusLoc ;
    111c:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <DIO_enuReadPin>:

/* Description : function read the values  on Pin  0 to 31  and return the error state     */
tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy , uint8 * pu8PinValueCpy)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <DIO_enuReadPin+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <DIO_enuReadPin+0x8>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	8a 83       	std	Y+2, r24	; 0x02
    113c:	7c 83       	std	Y+4, r23	; 0x04
    113e:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    1140:	19 82       	std	Y+1, r1	; 0x01
	
	if (pu8PinValueCpy != NULL_PTR)
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	09 f4       	brne	.+2      	; 0x114c <DIO_enuReadPin+0x1e>
    114a:	6e c0       	rjmp	.+220    	; 0x1228 <DIO_enuReadPin+0xfa>
	{
		     if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	88 30       	cpi	r24, 0x08	; 8
    1150:	a0 f4       	brcc	.+40     	; 0x117a <DIO_enuReadPin+0x4c>
				{
					*pu8PinValueCpy = GET_BIT(IDRA , u8PinNumCpy ) ;	
    1152:	e9 e3       	ldi	r30, 0x39	; 57
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a9 01       	movw	r20, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_enuReadPin+0x3c>
    1166:	55 95       	asr	r21
    1168:	47 95       	ror	r20
    116a:	8a 95       	dec	r24
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_enuReadPin+0x38>
    116e:	ca 01       	movw	r24, r20
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	eb 81       	ldd	r30, Y+3	; 0x03
    1174:	fc 81       	ldd	r31, Y+4	; 0x04
    1176:	80 83       	st	Z, r24
    1178:	59 c0       	rjmp	.+178    	; 0x122c <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	88 30       	cpi	r24, 0x08	; 8
    117e:	c8 f0       	brcs	.+50     	; 0x11b2 <DIO_enuReadPin+0x84>
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 31       	cpi	r24, 0x10	; 16
    1184:	b0 f4       	brcc	.+44     	; 0x11b2 <DIO_enuReadPin+0x84>
				{
					*pu8PinValueCpy = GET_BIT(IDRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    1186:	e6 e3       	ldi	r30, 0x36	; 54
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	88 2f       	mov	r24, r24
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	87 70       	andi	r24, 0x07	; 7
    1198:	90 70       	andi	r25, 0x00	; 0
    119a:	a9 01       	movw	r20, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_enuReadPin+0x74>
    119e:	55 95       	asr	r21
    11a0:	47 95       	ror	r20
    11a2:	8a 95       	dec	r24
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_enuReadPin+0x70>
    11a6:	ca 01       	movw	r24, r20
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	eb 81       	ldd	r30, Y+3	; 0x03
    11ac:	fc 81       	ldd	r31, Y+4	; 0x04
    11ae:	80 83       	st	Z, r24
    11b0:	3d c0       	rjmp	.+122    	; 0x122c <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	80 31       	cpi	r24, 0x10	; 16
    11b6:	c8 f0       	brcs	.+50     	; 0x11ea <DIO_enuReadPin+0xbc>
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	88 31       	cpi	r24, 0x18	; 24
    11bc:	b0 f4       	brcc	.+44     	; 0x11ea <DIO_enuReadPin+0xbc>
				{
					*pu8PinValueCpy = GET_BIT(IDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    11be:	e3 e3       	ldi	r30, 0x33	; 51
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	87 70       	andi	r24, 0x07	; 7
    11d0:	90 70       	andi	r25, 0x00	; 0
    11d2:	a9 01       	movw	r20, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_enuReadPin+0xac>
    11d6:	55 95       	asr	r21
    11d8:	47 95       	ror	r20
    11da:	8a 95       	dec	r24
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_enuReadPin+0xa8>
    11de:	ca 01       	movw	r24, r20
    11e0:	81 70       	andi	r24, 0x01	; 1
    11e2:	eb 81       	ldd	r30, Y+3	; 0x03
    11e4:	fc 81       	ldd	r31, Y+4	; 0x04
    11e6:	80 83       	st	Z, r24
    11e8:	21 c0       	rjmp	.+66     	; 0x122c <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	88 31       	cpi	r24, 0x18	; 24
    11ee:	c8 f0       	brcs	.+50     	; 0x1222 <DIO_enuReadPin+0xf4>
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	80 32       	cpi	r24, 0x20	; 32
    11f4:	b0 f4       	brcc	.+44     	; 0x1222 <DIO_enuReadPin+0xf4>
				{
					*pu8PinValueCpy = GET_BIT(IDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    11f6:	e0 e3       	ldi	r30, 0x30	; 48
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	87 70       	andi	r24, 0x07	; 7
    1208:	90 70       	andi	r25, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO_enuReadPin+0xe4>
    120e:	55 95       	asr	r21
    1210:	47 95       	ror	r20
    1212:	8a 95       	dec	r24
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO_enuReadPin+0xe0>
    1216:	ca 01       	movw	r24, r20
    1218:	81 70       	andi	r24, 0x01	; 1
    121a:	eb 81       	ldd	r30, Y+3	; 0x03
    121c:	fc 81       	ldd	r31, Y+4	; 0x04
    121e:	80 83       	st	Z, r24
    1220:	05 c0       	rjmp	.+10     	; 0x122c <DIO_enuReadPin+0xfe>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_enuReadPin+0xfe>
				}
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStatusLoc ;
    122c:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <DIO_enuPullWrite>:
/* Description : function pullwrite ask to write a value of DIO_u8HIGH OR DIO_u8LOW in pin from 0 to 31            */
/* and return the error state                                                                                      */

tenuErrorStatus DIO_enuPullWrite(uint8 u8PinNumCpy , uint8 u8PinStateCpy)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <DIO_enuPullWrite+0x6>
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enuWritePin(u8PinNumCpy , u8PinStateCpy );
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	6a 81       	ldd	r22, Y+2	; 0x02
    124e:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <DIO_enuWriteBus>:

/* Description : function writebus used to write a value of DIO_u8HIGH OR DIO_u8LOW in many  pins from 0 to 31     */
/* and return the error state                                                                                      */

tenuErrorStatus DIO_enuWriteBus(tstrPinMapping * pastrPinMappingCpy , uint8 u8SizeCpy )
{
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <DIO_enuWriteBus+0xa>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <DIO_enuWriteBus+0xc>
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	9c 83       	std	Y+4, r25	; 0x04
    1270:	8b 83       	std	Y+3, r24	; 0x03
    1272:	6d 83       	std	Y+5, r22	; 0x05
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    1274:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	if(pastrPinMappingCpy !=NULL_PTR)
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	09 f4       	brne	.+2      	; 0x1280 <DIO_enuWriteBus+0x24>
    127e:	3f c0       	rjmp	.+126    	; 0x12fe <DIO_enuWriteBus+0xa2>
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS )
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	81 32       	cpi	r24, 0x21	; 33
    1284:	c8 f5       	brcc	.+114    	; 0x12f8 <DIO_enuWriteBus+0x9c>
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    1286:	19 82       	std	Y+1, r1	; 0x01
    1288:	32 c0       	rjmp	.+100    	; 0x12ee <DIO_enuWriteBus+0x92>
			{
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuWritePin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , pastrPinMappingCpy[u8CntrLoc].u8PinValue );
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	c9 01       	movw	r24, r18
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	28 0f       	add	r18, r24
    1298:	39 1f       	adc	r19, r25
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	8c 01       	movw	r16, r24
    12a0:	02 0f       	add	r16, r18
    12a2:	13 1f       	adc	r17, r19
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	c9 01       	movw	r24, r18
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	28 0f       	add	r18, r24
    12b2:	39 1f       	adc	r19, r25
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	fc 01       	movw	r30, r24
    12ba:	e2 0f       	add	r30, r18
    12bc:	f3 1f       	adc	r31, r19
    12be:	40 81       	ld	r20, Z
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	c9 01       	movw	r24, r18
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	28 0f       	add	r18, r24
    12ce:	39 1f       	adc	r19, r25
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	fc 01       	movw	r30, r24
    12d6:	e2 0f       	add	r30, r18
    12d8:	f3 1f       	adc	r31, r19
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	84 2f       	mov	r24, r20
    12de:	69 2f       	mov	r22, r25
    12e0:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
    12e4:	f8 01       	movw	r30, r16
    12e6:	82 83       	std	Z+2, r24	; 0x02
	uint8 u8CntrLoc ;
	if(pastrPinMappingCpy !=NULL_PTR)
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS )
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	8f 5f       	subi	r24, 0xFF	; 255
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	99 81       	ldd	r25, Y+1	; 0x01
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	98 17       	cp	r25, r24
    12f4:	50 f2       	brcs	.-108    	; 0x128a <DIO_enuWriteBus+0x2e>
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <DIO_enuWriteBus+0xa6>
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuWritePin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , pastrPinMappingCpy[u8CntrLoc].u8PinValue );
			}
		}
		else
		{
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    12f8:	82 e0       	ldi	r24, 0x02	; 2
    12fa:	8a 83       	std	Y+2, r24	; 0x02
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_enuWriteBus+0xa6>
		}
		
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	8a 83       	std	Y+2, r24	; 0x02
	}
	return enuReturnStatusLoc ;
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	08 95       	ret

00001318 <DIO_enuReadBus>:
/* Description : function readbus used to read a value of DIO_u8HIGH OR DIO_u8LOW in many  pins from 0 to 31       */
/* and return the error state                                                                                      */

tenuErrorStatus DIO_enuReadBus(tstrPinMapping * pastrPinMappingCpy , uint8 u8SizeCpy )
{
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <DIO_enuReadBus+0xa>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <DIO_enuReadBus+0xc>
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
    132e:	6d 83       	std	Y+5, r22	; 0x05
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    1330:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	
	if(pastrPinMappingCpy != NULL_PTR )
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	09 f4       	brne	.+2      	; 0x133c <DIO_enuReadBus+0x24>
    133a:	40 c0       	rjmp	.+128    	; 0x13bc <DIO_enuReadBus+0xa4>
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS)
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	81 32       	cpi	r24, 0x21	; 33
    1340:	d0 f5       	brcc	.+116    	; 0x13b6 <DIO_enuReadBus+0x9e>
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    1342:	19 82       	std	Y+1, r1	; 0x01
    1344:	33 c0       	rjmp	.+102    	; 0x13ac <DIO_enuReadBus+0x94>
			{
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuReadPin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , &(pastrPinMappingCpy[u8CntrLoc].u8PinValue) );
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	c9 01       	movw	r24, r18
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	28 0f       	add	r18, r24
    1354:	39 1f       	adc	r19, r25
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	8c 01       	movw	r16, r24
    135c:	02 0f       	add	r16, r18
    135e:	13 1f       	adc	r17, r19
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	c9 01       	movw	r24, r18
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	28 0f       	add	r18, r24
    136e:	39 1f       	adc	r19, r25
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	fc 01       	movw	r30, r24
    1376:	e2 0f       	add	r30, r18
    1378:	f3 1f       	adc	r31, r19
    137a:	40 81       	ld	r20, Z
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	c9 01       	movw	r24, r18
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	28 0f       	add	r18, r24
    138a:	39 1f       	adc	r19, r25
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	82 0f       	add	r24, r18
    1392:	93 1f       	adc	r25, r19
    1394:	9c 01       	movw	r18, r24
    1396:	2f 5f       	subi	r18, 0xFF	; 255
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	84 2f       	mov	r24, r20
    139c:	b9 01       	movw	r22, r18
    139e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_enuReadPin>
    13a2:	f8 01       	movw	r30, r16
    13a4:	82 83       	std	Z+2, r24	; 0x02
	
	if(pastrPinMappingCpy != NULL_PTR )
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS)
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	8f 5f       	subi	r24, 0xFF	; 255
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	99 81       	ldd	r25, Y+1	; 0x01
    13ae:	8d 81       	ldd	r24, Y+5	; 0x05
    13b0:	98 17       	cp	r25, r24
    13b2:	48 f2       	brcs	.-110    	; 0x1346 <DIO_enuReadBus+0x2e>
    13b4:	05 c0       	rjmp	.+10     	; 0x13c0 <DIO_enuReadBus+0xa8>
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuReadPin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , &(pastrPinMappingCpy[u8CntrLoc].u8PinValue) );
			}
		}
		else
		{
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_enuReadBus+0xa8>
		}
		
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    13bc:	83 e0       	ldi	r24, 0x03	; 3
    13be:	8a 83       	std	Y+2, r24	; 0x02
	}
	return enuReturnStatusLoc ;
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	08 95       	ret

000013d6 <DIO_enuWritePinDir>:

/* Description : function writePinDir to used to select dir from DIO_u8OUTPUT and DIO_u8INPUT at pin from 0 to 31  */
/* and return the error state                                                                                      */

tenuErrorStatus DIO_enuWritePinDir(uint8 u8PinNumCpy , uint8 u8PinDirCpy)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <DIO_enuWritePinDir+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <DIO_enuWritePinDir+0x8>
    13de:	0f 92       	push	r0
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	8a 83       	std	Y+2, r24	; 0x02
    13e6:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStatusLoc = E_OK ;
    13e8:	19 82       	std	Y+1, r1	; 0x01
	
	switch (u8PinDirCpy)
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3d 83       	std	Y+5, r19	; 0x05
    13f2:	2c 83       	std	Y+4, r18	; 0x04
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	09 f4       	brne	.+2      	; 0x13fe <DIO_enuWritePinDir+0x28>
    13fc:	77 c0       	rjmp	.+238    	; 0x14ec <DIO_enuWritePinDir+0x116>
    13fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1400:	3d 81       	ldd	r19, Y+5	; 0x05
    1402:	21 30       	cpi	r18, 0x01	; 1
    1404:	31 05       	cpc	r19, r1
    1406:	09 f0       	breq	.+2      	; 0x140a <DIO_enuWritePinDir+0x34>
    1408:	e6 c0       	rjmp	.+460    	; 0x15d6 <DIO_enuWritePinDir+0x200>
		{
			case DIO_u8OUTPUT :
			     if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 30       	cpi	r24, 0x08	; 8
    140e:	a0 f4       	brcc	.+40     	; 0x1438 <DIO_enuWritePinDir+0x62>
				{
					SET_BIT(DDRA , u8PinNumCpy ) ;	
    1410:	aa e3       	ldi	r26, 0x3A	; 58
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ea e3       	ldi	r30, 0x3A	; 58
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_enuWritePinDir+0x58>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_enuWritePinDir+0x54>
    1432:	84 2b       	or	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	d1 c0       	rjmp	.+418    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	88 30       	cpi	r24, 0x08	; 8
    143c:	d0 f0       	brcs	.+52     	; 0x1472 <DIO_enuWritePinDir+0x9c>
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	80 31       	cpi	r24, 0x10	; 16
    1442:	b8 f4       	brcc	.+46     	; 0x1472 <DIO_enuWritePinDir+0x9c>
				{
					SET_BIT(DDRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    1444:	a7 e3       	ldi	r26, 0x37	; 55
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e7 e3       	ldi	r30, 0x37	; 55
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	88 2f       	mov	r24, r24
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9c 01       	movw	r18, r24
    1458:	27 70       	andi	r18, 0x07	; 7
    145a:	30 70       	andi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <DIO_enuWritePinDir+0x92>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <DIO_enuWritePinDir+0x8e>
    146c:	84 2b       	or	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	b4 c0       	rjmp	.+360    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	80 31       	cpi	r24, 0x10	; 16
    1476:	d0 f0       	brcs	.+52     	; 0x14ac <DIO_enuWritePinDir+0xd6>
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	88 31       	cpi	r24, 0x18	; 24
    147c:	b8 f4       	brcc	.+46     	; 0x14ac <DIO_enuWritePinDir+0xd6>
				{
					SET_BIT(DDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    147e:	a4 e3       	ldi	r26, 0x34	; 52
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e4 e3       	ldi	r30, 0x34	; 52
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9c 01       	movw	r18, r24
    1492:	27 70       	andi	r18, 0x07	; 7
    1494:	30 70       	andi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_enuWritePinDir+0xcc>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_enuWritePinDir+0xc8>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	97 c0       	rjmp	.+302    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	88 31       	cpi	r24, 0x18	; 24
    14b0:	d0 f0       	brcs	.+52     	; 0x14e6 <DIO_enuWritePinDir+0x110>
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	80 32       	cpi	r24, 0x20	; 32
    14b6:	b8 f4       	brcc	.+46     	; 0x14e6 <DIO_enuWritePinDir+0x110>
				{
					SET_BIT(DDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    14b8:	a1 e3       	ldi	r26, 0x31	; 49
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e1 e3       	ldi	r30, 0x31	; 49
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	9c 01       	movw	r18, r24
    14cc:	27 70       	andi	r18, 0x07	; 7
    14ce:	30 70       	andi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_enuWritePinDir+0x106>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_enuWritePinDir+0x102>
    14e0:	84 2b       	or	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	7a c0       	rjmp	.+244    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	77 c0       	rjmp	.+238    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
			
			break ;
			case DIO_u8INPUT :
			   if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	88 30       	cpi	r24, 0x08	; 8
    14f0:	a8 f4       	brcc	.+42     	; 0x151c <DIO_enuWritePinDir+0x146>
				{		
					CLR_BIT(DDRA , u8PinNumCpy ) ;
    14f2:	aa e3       	ldi	r26, 0x3A	; 58
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	ea e3       	ldi	r30, 0x3A	; 58
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_enuWritePinDir+0x13a>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_enuWritePinDir+0x136>
    1514:	80 95       	com	r24
    1516:	84 23       	and	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	5f c0       	rjmp	.+190    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	88 30       	cpi	r24, 0x08	; 8
    1520:	d8 f0       	brcs	.+54     	; 0x1558 <DIO_enuWritePinDir+0x182>
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	80 31       	cpi	r24, 0x10	; 16
    1526:	c0 f4       	brcc	.+48     	; 0x1558 <DIO_enuWritePinDir+0x182>
				{
					CLR_BIT(DDRB , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    1528:	a7 e3       	ldi	r26, 0x37	; 55
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e7 e3       	ldi	r30, 0x37	; 55
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	88 2f       	mov	r24, r24
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9c 01       	movw	r18, r24
    153c:	27 70       	andi	r18, 0x07	; 7
    153e:	30 70       	andi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <DIO_enuWritePinDir+0x176>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <DIO_enuWritePinDir+0x172>
    1550:	80 95       	com	r24
    1552:	84 23       	and	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	41 c0       	rjmp	.+130    	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	80 31       	cpi	r24, 0x10	; 16
    155c:	d8 f0       	brcs	.+54     	; 0x1594 <DIO_enuWritePinDir+0x1be>
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	88 31       	cpi	r24, 0x18	; 24
    1562:	c0 f4       	brcc	.+48     	; 0x1594 <DIO_enuWritePinDir+0x1be>
				{
					CLR_BIT(DDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    1564:	a4 e3       	ldi	r26, 0x34	; 52
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e4 e3       	ldi	r30, 0x34	; 52
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	9c 01       	movw	r18, r24
    1578:	27 70       	andi	r18, 0x07	; 7
    157a:	30 70       	andi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_enuWritePinDir+0x1b2>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_enuWritePinDir+0x1ae>
    158c:	80 95       	com	r24
    158e:	84 23       	and	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	23 c0       	rjmp	.+70     	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	88 31       	cpi	r24, 0x18	; 24
    1598:	d8 f0       	brcs	.+54     	; 0x15d0 <DIO_enuWritePinDir+0x1fa>
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	80 32       	cpi	r24, 0x20	; 32
    159e:	c0 f4       	brcc	.+48     	; 0x15d0 <DIO_enuWritePinDir+0x1fa>
				{
					CLR_BIT(DDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    15a0:	a1 e3       	ldi	r26, 0x31	; 49
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e1 e3       	ldi	r30, 0x31	; 49
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9c 01       	movw	r18, r24
    15b4:	27 70       	andi	r18, 0x07	; 7
    15b6:	30 70       	andi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <DIO_enuWritePinDir+0x1ee>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <DIO_enuWritePinDir+0x1ea>
    15c8:	80 95       	com	r24
    15ca:	84 23       	and	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <DIO_enuWritePinDir+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_enuWritePinDir+0x204>
				}
			break ;
			default :
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    15d6:	82 e0       	ldi	r24, 0x02	; 2
    15d8:	89 83       	std	Y+1, r24	; 0x01
			break ;
			
		}
	
	return enuReturnStatusLoc ;
    15da:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <DIO_enuTogglePin>:
/* Description : function togglePin to used to toggle pin from 0 and 31                                     */
/* and return the error state                                                                               */

tenuErrorStatus DIO_enuTogglePin(uint8 u8PinNumCpy)
{ tenuErrorStatus enuReturnStatusLoc = E_OK ;
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <DIO_enuTogglePin+0x6>
    15f2:	0f 92       	push	r0
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	19 82       	std	Y+1, r1	; 0x01
uint8 temp;
DIO_enuReadPin(u8PinNumCpy,&temp);
    15fc:	9e 01       	movw	r18, r28
    15fe:	2e 5f       	subi	r18, 0xFE	; 254
    1600:	3f 4f       	sbci	r19, 0xFF	; 255
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	b9 01       	movw	r22, r18
    1606:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_enuReadPin>
  if(u8PinNumCpy>=DIO_u8PIN_0 && u8PinNumCpy<= DIO_u8PIN_0){
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	88 23       	and	r24, r24
    160e:	a9 f4       	brne	.+42     	; 0x163a <DIO_enuTogglePin+0x4e>
	if(temp==DIO_u8HIGH){
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	31 f4       	brne	.+12     	; 0x1622 <DIO_enuTogglePin+0x36>
		enuReturnStatusLoc=DIO_enuWritePin(u8PinNumCpy,DIO_u8LOW);
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	0e c0       	rjmp	.+28     	; 0x163e <DIO_enuTogglePin+0x52>
	}
	else if(temp==DIO_u8LOW){
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	88 23       	and	r24, r24
    1626:	31 f4       	brne	.+12     	; 0x1634 <DIO_enuTogglePin+0x48>
		enuReturnStatusLoc= DIO_enuWritePin(u8PinNumCpy,DIO_u8HIGH);
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	05 c0       	rjmp	.+10     	; 0x163e <DIO_enuTogglePin+0x52>
	}
	else{
		enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_enuTogglePin+0x52>
	}

}
else{
enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;	
    163a:	82 e0       	ldi	r24, 0x02	; 2
    163c:	89 83       	std	Y+1, r24	; 0x01
}
	
	return enuReturnStatusLoc ;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <EEPROM_Write>:
#include "STD_Types.h"
#include "BIT_MATH.h"
#include "EEPROM.h"
#include"Master_TWi.h"

void EEPROM_Write(uint8 u8_address_device_cpy,uint8 u8_address_data_cpy ,uint8 data_cpy){
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <EEPROM_Write+0x6>
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	6a 83       	std	Y+2, r22	; 0x02
    165c:	4b 83       	std	Y+3, r20	; 0x03
	    TWI_start(); 
    165e:	0e 94 d6 25 	call	0x4bac	; 0x4bac <TWI_start>
		TWI_write_address(u8_address_device_cpy);
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <TWI_write_address>
		TWI_write_address(u8_address_data_cpy);
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <TWI_write_address>
		TWI_write_data(data_cpy); // Function to write data in slave
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <TWI_write_data>
		TWI_stop(); 
    1674:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <TWI_stop>
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <EEPROM_Read>:

uint8 EEPROM_Read(uint8 u8_address_device_cpy,uint8 u8_address_data_cpy ){
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	00 d0       	rcall	.+0      	; 0x168a <EEPROM_Read+0x6>
    168a:	0f 92       	push	r0
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	8a 83       	std	Y+2, r24	; 0x02
    1692:	6b 83       	std	Y+3, r22	; 0x03
uint8 x;
		TWI_start();
    1694:	0e 94 d6 25 	call	0x4bac	; 0x4bac <TWI_start>
		TWI_write_address(u8_address_device_cpy);
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <TWI_write_address>
		TWI_write_address(u8_address_data_cpy);
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <TWI_write_address>
		TWI_repeated_start();
    16a4:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <TWI_repeated_start>
	    TWI_read_address(u8_address_device_cpy+1); // Function to write address and data direction bit(read) on SDA
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	8f 5f       	subi	r24, 0xFF	; 255
    16ac:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <TWI_read_address>
        x=TWI_read_data();
    16b0:	0e 94 29 26 	call	0x4c52	; 0x4c52 <TWI_read_data>
    16b4:	89 83       	std	Y+1, r24	; 0x01
        TWI_stop();
    16b6:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <TWI_stop>
	return x;
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <EXTINT0_voidInit>:


pf EXTINT0_pfCallback ;

void EXTINT0_voidInit(void)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
#if EXTINT0_SENSE_MODE == LOW_LEVEL
	CLR_BIT(MCUCR , 0) ;
	CLR_BIT(MCUCR , 1) ;
	
#elif EXTINT0_SENSE_MODE ==IOC 
	SET_BIT(MCUCR , 0) ;
    16d0:	a5 e5       	ldi	r26, 0x55	; 85
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e5 e5       	ldi	r30, 0x55	; 85
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	81 60       	ori	r24, 0x01	; 1
    16dc:	8c 93       	st	X, r24
	CLR_BIT(MCUCR , 1) ;
    16de:	a5 e5       	ldi	r26, 0x55	; 85
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e5 e5       	ldi	r30, 0x55	; 85
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8d 7f       	andi	r24, 0xFD	; 253
    16ea:	8c 93       	st	X, r24
#else
	SET_BIT(MCUCR , 0) ;
	SET_BIT(MCUCR , 1) ;
#endif 

	CLR_BIT(GICR,6); // Disable External interrupt 0
    16ec:	ab e5       	ldi	r26, 0x5B	; 91
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	eb e5       	ldi	r30, 0x5B	; 91
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	8f 7b       	andi	r24, 0xBF	; 191
    16f8:	8c 93       	st	X, r24
	SET_BIT(GIFR,6); //Clear External interrupt 0 Flag 
    16fa:	aa e5       	ldi	r26, 0x5A	; 90
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ea e5       	ldi	r30, 0x5A	; 90
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 64       	ori	r24, 0x40	; 64
    1706:	8c 93       	st	X, r24

}
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <EXTINT0_voidEnable>:

void EXTINT0_voidEnable(void)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,6);
    1716:	ab e5       	ldi	r26, 0x5B	; 91
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	eb e5       	ldi	r30, 0x5B	; 91
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	80 64       	ori	r24, 0x40	; 64
    1722:	8c 93       	st	X, r24
}
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <EXTINT0_voidDisable>:

void EXTINT0_voidDisable(void)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,6);
    1732:	ab e5       	ldi	r26, 0x5B	; 91
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	eb e5       	ldi	r30, 0x5B	; 91
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	8f 7b       	andi	r24, 0xBF	; 191
    173e:	8c 93       	st	X, r24
}
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <EXTINT0_voidSetCallBack>:

void EXTINT0_voidSetCallBack(pf pfCallbackCpy)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	00 d0       	rcall	.+0      	; 0x174c <EXTINT0_voidSetCallBack+0x6>
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	9a 83       	std	Y+2, r25	; 0x02
    1752:	89 83       	std	Y+1, r24	; 0x01
	EXTINT0_pfCallback = pfCallbackCpy ;
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	9a 81       	ldd	r25, Y+2	; 0x02
    1758:	90 93 f0 01 	sts	0x01F0, r25
    175c:	80 93 ef 01 	sts	0x01EF, r24
}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <__vector_1>:

void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
    176a:	1f 92       	push	r1
    176c:	0f 92       	push	r0
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	0f 92       	push	r0
    1772:	11 24       	eor	r1, r1
    1774:	2f 93       	push	r18
    1776:	3f 93       	push	r19
    1778:	4f 93       	push	r20
    177a:	5f 93       	push	r21
    177c:	6f 93       	push	r22
    177e:	7f 93       	push	r23
    1780:	8f 93       	push	r24
    1782:	9f 93       	push	r25
    1784:	af 93       	push	r26
    1786:	bf 93       	push	r27
    1788:	ef 93       	push	r30
    178a:	ff 93       	push	r31
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
	EXTINT0_pfCallback();
    1794:	e0 91 ef 01 	lds	r30, 0x01EF
    1798:	f0 91 f0 01 	lds	r31, 0x01F0
    179c:	09 95       	icall
}
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	ff 91       	pop	r31
    17a4:	ef 91       	pop	r30
    17a6:	bf 91       	pop	r27
    17a8:	af 91       	pop	r26
    17aa:	9f 91       	pop	r25
    17ac:	8f 91       	pop	r24
    17ae:	7f 91       	pop	r23
    17b0:	6f 91       	pop	r22
    17b2:	5f 91       	pop	r21
    17b4:	4f 91       	pop	r20
    17b6:	3f 91       	pop	r19
    17b8:	2f 91       	pop	r18
    17ba:	0f 90       	pop	r0
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	0f 90       	pop	r0
    17c0:	1f 90       	pop	r1
    17c2:	18 95       	reti

000017c4 <EXTINT0_voidSetSenseValue>:
void EXTINT0_voidSetSenseValue(uint8 u8SenseValueCpy){
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	0f 92       	push	r0
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	89 83       	std	Y+1, r24	; 0x01
	if(u8SenseValueCpy==FALLING_EDGE){
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	8a 30       	cpi	r24, 0x0A	; 10
    17d4:	71 f4       	brne	.+28     	; 0x17f2 <EXTINT0_voidSetSenseValue+0x2e>
	CLR_BIT(MCUCR , 0) ;
    17d6:	a5 e5       	ldi	r26, 0x55	; 85
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e5 e5       	ldi	r30, 0x55	; 85
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	8e 7f       	andi	r24, 0xFE	; 254
    17e2:	8c 93       	st	X, r24
	SET_BIT(MCUCR , 1) ;
    17e4:	a5 e5       	ldi	r26, 0x55	; 85
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e5 e5       	ldi	r30, 0x55	; 85
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	82 60       	ori	r24, 0x02	; 2
    17f0:	8c 93       	st	X, r24
		
	}
	if(u8SenseValueCpy==RISING_EDGE){
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	8f 30       	cpi	r24, 0x0F	; 15
    17f6:	71 f4       	brne	.+28     	; 0x1814 <EXTINT0_voidSetSenseValue+0x50>
	SET_BIT(MCUCR , 0) ;
    17f8:	a5 e5       	ldi	r26, 0x55	; 85
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e5 e5       	ldi	r30, 0x55	; 85
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	81 60       	ori	r24, 0x01	; 1
    1804:	8c 93       	st	X, r24
	SET_BIT(MCUCR , 1) ;
    1806:	a5 e5       	ldi	r26, 0x55	; 85
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e5 e5       	ldi	r30, 0x55	; 85
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	82 60       	ori	r24, 0x02	; 2
    1812:	8c 93       	st	X, r24
	}
	
}
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <EXTINT1_voidInit>:


pf EXTINT1_pfCallback ;

void EXTINT1_voidInit(void)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62

#if EXTINT1_SENSE_MODE == LOW_LEVEL
	CLR_BIT(MCUCR , 2) ;
    1824:	a5 e5       	ldi	r26, 0x55	; 85
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e5 e5       	ldi	r30, 0x55	; 85
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	8b 7f       	andi	r24, 0xFB	; 251
    1830:	8c 93       	st	X, r24
	CLR_BIT(MCUCR , 3) ;
    1832:	a5 e5       	ldi	r26, 0x55	; 85
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e5 e5       	ldi	r30, 0x55	; 85
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	87 7f       	andi	r24, 0xF7	; 247
    183e:	8c 93       	st	X, r24
#else
	SET_BIT(MCUCR , 2) ;
	SET_BIT(MCUCR , 3) ;
#endif 

	CLR_BIT(GICR,7); // Disable External interrupt 0
    1840:	ab e5       	ldi	r26, 0x5B	; 91
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	eb e5       	ldi	r30, 0x5B	; 91
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	8f 77       	andi	r24, 0x7F	; 127
    184c:	8c 93       	st	X, r24
	SET_BIT(GIFR,7); //Clear External interrupt 0 Flag 
    184e:	aa e5       	ldi	r26, 0x5A	; 90
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	ea e5       	ldi	r30, 0x5A	; 90
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	80 68       	ori	r24, 0x80	; 128
    185a:	8c 93       	st	X, r24

}
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <EXTINT1_voidEnable>:

void EXTINT1_voidEnable(void)
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,7);
    186a:	ab e5       	ldi	r26, 0x5B	; 91
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	eb e5       	ldi	r30, 0x5B	; 91
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	80 68       	ori	r24, 0x80	; 128
    1876:	8c 93       	st	X, r24
}
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <EXTINT1_voidDisable>:

void EXTINT1_voidDisable(void)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,7);
    1886:	ab e5       	ldi	r26, 0x5B	; 91
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	eb e5       	ldi	r30, 0x5B	; 91
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	8f 77       	andi	r24, 0x7F	; 127
    1892:	8c 93       	st	X, r24
}
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <EXTINT1_voidSetCallBack>:

void EXTINT1_voidSetCallBack(pf pfCallbackCpy)
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <EXTINT1_voidSetCallBack+0x6>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
	EXTINT1_pfCallback = pfCallbackCpy ;
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
    18ac:	90 93 f2 01 	sts	0x01F2, r25
    18b0:	80 93 f1 01 	sts	0x01F1, r24
}
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <__vector_2>:

void __vector_2(void) __attribute__((signal,used));
void __vector_2(void)
{
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	2f 93       	push	r18
    18ca:	3f 93       	push	r19
    18cc:	4f 93       	push	r20
    18ce:	5f 93       	push	r21
    18d0:	6f 93       	push	r22
    18d2:	7f 93       	push	r23
    18d4:	8f 93       	push	r24
    18d6:	9f 93       	push	r25
    18d8:	af 93       	push	r26
    18da:	bf 93       	push	r27
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
	EXTINT1_pfCallback();
    18e8:	e0 91 f1 01 	lds	r30, 0x01F1
    18ec:	f0 91 f2 01 	lds	r31, 0x01F2
    18f0:	09 95       	icall
}
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	ff 91       	pop	r31
    18f8:	ef 91       	pop	r30
    18fa:	bf 91       	pop	r27
    18fc:	af 91       	pop	r26
    18fe:	9f 91       	pop	r25
    1900:	8f 91       	pop	r24
    1902:	7f 91       	pop	r23
    1904:	6f 91       	pop	r22
    1906:	5f 91       	pop	r21
    1908:	4f 91       	pop	r20
    190a:	3f 91       	pop	r19
    190c:	2f 91       	pop	r18
    190e:	0f 90       	pop	r0
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	0f 90       	pop	r0
    1914:	1f 90       	pop	r1
    1916:	18 95       	reti

00001918 <EXTINT1_voidSetSenseValue>:
void EXTINT1_voidSetSenseValue(uint8 u8SenseValueCpy){
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	0f 92       	push	r0
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	89 83       	std	Y+1, r24	; 0x01
	if(u8SenseValueCpy==FALLING_EDGE){
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	8a 30       	cpi	r24, 0x0A	; 10
    1928:	71 f4       	brne	.+28     	; 0x1946 <EXTINT1_voidSetSenseValue+0x2e>
    CLR_BIT(MCUCR , 2) ;
    192a:	a5 e5       	ldi	r26, 0x55	; 85
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e5 e5       	ldi	r30, 0x55	; 85
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8b 7f       	andi	r24, 0xFB	; 251
    1936:	8c 93       	st	X, r24
	SET_BIT(MCUCR , 3) ;
    1938:	a5 e5       	ldi	r26, 0x55	; 85
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e5 e5       	ldi	r30, 0x55	; 85
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	88 60       	ori	r24, 0x08	; 8
    1944:	8c 93       	st	X, r24
		
	}
	if(u8SenseValueCpy==RISING_EDGE){
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	8f 30       	cpi	r24, 0x0F	; 15
    194a:	71 f4       	brne	.+28     	; 0x1968 <EXTINT1_voidSetSenseValue+0x50>
	SET_BIT(MCUCR , 2) ;
    194c:	a5 e5       	ldi	r26, 0x55	; 85
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e5 e5       	ldi	r30, 0x55	; 85
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	84 60       	ori	r24, 0x04	; 4
    1958:	8c 93       	st	X, r24
	SET_BIT(MCUCR , 3) ;
    195a:	a5 e5       	ldi	r26, 0x55	; 85
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e5 e5       	ldi	r30, 0x55	; 85
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	88 60       	ori	r24, 0x08	; 8
    1966:	8c 93       	st	X, r24
	}
	
}
    1968:	0f 90       	pop	r0
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <EXTINT2_voidInit>:


pf EXTINT2_pfCallback ;

void EXTINT2_voidInit(void)
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
#if EXTINT2_SENSE_MODE == FALLING_EDGE
	CLR_BIT( MCUCSR , 6) ;

	
#elif EXTINT2_SENSE_MODE ==RISING_EDGE
	SET_BIT(MCUCSR , 6) ;
    1978:	a4 e5       	ldi	r26, 0x54	; 84
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e4 e5       	ldi	r30, 0x54	; 84
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	80 64       	ori	r24, 0x40	; 64
    1984:	8c 93       	st	X, r24
	
#endif 

	CLR_BIT(GICR,5); // Disable External interrupt 0
    1986:	ab e5       	ldi	r26, 0x5B	; 91
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	eb e5       	ldi	r30, 0x5B	; 91
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	8f 7d       	andi	r24, 0xDF	; 223
    1992:	8c 93       	st	X, r24
	SET_BIT(GIFR,5); //Clear External interrupt 0 Flag 
    1994:	aa e5       	ldi	r26, 0x5A	; 90
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ea e5       	ldi	r30, 0x5A	; 90
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	80 62       	ori	r24, 0x20	; 32
    19a0:	8c 93       	st	X, r24

}
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <EXTINT2_voidEnable>:

void EXTINT2_voidEnable(void)
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,5);
    19b0:	ab e5       	ldi	r26, 0x5B	; 91
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	eb e5       	ldi	r30, 0x5B	; 91
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 62       	ori	r24, 0x20	; 32
    19bc:	8c 93       	st	X, r24
}
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <EXTINT2_voidDisable>:

void EXTINT2_voidDisable(void)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,5);
    19cc:	ab e5       	ldi	r26, 0x5B	; 91
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	eb e5       	ldi	r30, 0x5B	; 91
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	8f 7d       	andi	r24, 0xDF	; 223
    19d8:	8c 93       	st	X, r24
}
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <EXTINT2_voidSetCallBack>:

void EXTINT2_voidSetCallBack(pf pfCallbackCpy)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <EXTINT2_voidSetCallBack+0x6>
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	89 83       	std	Y+1, r24	; 0x01
	EXTINT2_pfCallback = pfCallbackCpy ;
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	90 93 f4 01 	sts	0x01F4, r25
    19f6:	80 93 f3 01 	sts	0x01F3, r24
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <__vector_3>:

void __vector_3(void) __attribute__((signal,used));
void __vector_3(void)
{
    1a04:	1f 92       	push	r1
    1a06:	0f 92       	push	r0
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	0f 92       	push	r0
    1a0c:	11 24       	eor	r1, r1
    1a0e:	2f 93       	push	r18
    1a10:	3f 93       	push	r19
    1a12:	4f 93       	push	r20
    1a14:	5f 93       	push	r21
    1a16:	6f 93       	push	r22
    1a18:	7f 93       	push	r23
    1a1a:	8f 93       	push	r24
    1a1c:	9f 93       	push	r25
    1a1e:	af 93       	push	r26
    1a20:	bf 93       	push	r27
    1a22:	ef 93       	push	r30
    1a24:	ff 93       	push	r31
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
	EXTINT2_pfCallback();
    1a2e:	e0 91 f3 01 	lds	r30, 0x01F3
    1a32:	f0 91 f4 01 	lds	r31, 0x01F4
    1a36:	09 95       	icall
}
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	ff 91       	pop	r31
    1a3e:	ef 91       	pop	r30
    1a40:	bf 91       	pop	r27
    1a42:	af 91       	pop	r26
    1a44:	9f 91       	pop	r25
    1a46:	8f 91       	pop	r24
    1a48:	7f 91       	pop	r23
    1a4a:	6f 91       	pop	r22
    1a4c:	5f 91       	pop	r21
    1a4e:	4f 91       	pop	r20
    1a50:	3f 91       	pop	r19
    1a52:	2f 91       	pop	r18
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	0f 90       	pop	r0
    1a5a:	1f 90       	pop	r1
    1a5c:	18 95       	reti

00001a5e <EXTINT2_voidSetSenseValue>:
void EXTINT2_voidSetSenseValue(uint8 u8SenseValueCpy){
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	0f 92       	push	r0
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	89 83       	std	Y+1, r24	; 0x01
	if(u8SenseValueCpy==FALLING_EDGE){
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	8a 30       	cpi	r24, 0x0A	; 10
    1a6e:	39 f4       	brne	.+14     	; 0x1a7e <EXTINT2_voidSetSenseValue+0x20>
	CLR_BIT( MCUCSR , 6) ;
    1a70:	a4 e5       	ldi	r26, 0x54	; 84
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e4 e5       	ldi	r30, 0x54	; 84
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	8f 7b       	andi	r24, 0xBF	; 191
    1a7c:	8c 93       	st	X, r24
		
	}
	if(u8SenseValueCpy==RISING_EDGE){
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	8f 30       	cpi	r24, 0x0F	; 15
    1a82:	39 f4       	brne	.+14     	; 0x1a92 <EXTINT2_voidSetSenseValue+0x34>
	SET_BIT(MCUCSR , 6) ;
    1a84:	a4 e5       	ldi	r26, 0x54	; 84
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e4 e5       	ldi	r30, 0x54	; 84
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	80 64       	ori	r24, 0x40	; 64
    1a90:	8c 93       	st	X, r24
	}
	
}
    1a92:	0f 90       	pop	r0
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <GIE_voidEnable>:
#include "GIE.h"
#include "GIE_cfg.h"
#include "GIE_priv.h"

void GIE_voidEnable(void)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1aa2:	af e5       	ldi	r26, 0x5F	; 95
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	ef e5       	ldi	r30, 0x5F	; 95
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	80 68       	ori	r24, 0x80	; 128
    1aae:	8c 93       	st	X, r24
}
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1abe:	af e5       	ldi	r26, 0x5F	; 95
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	ef e5       	ldi	r30, 0x5F	; 95
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	8f 77       	andi	r24, 0x7F	; 127
    1aca:	8c 93       	st	X, r24
}
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <KEYPAD_voidInit>:
static void KEYPAD_voidWriteSequence(uint8 u8KeyPadNumCpy , uint8 u8SequenceNumCpy);
static void KEYPAD_voidReadSequence(uint8 u8KeyPadNumCpy,uint8 *pu16PressedKeyCpy,uint8 u8Cntrcpy,uint8* count);


void KEYPAD_voidInit(void)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <KEYPAD_voidInit+0x6>
    1ad8:	0f 92       	push	r0
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
	uint8 u8CntrLoc ;
	uint8 u8CntrInputLoc ;
	uint8 u8CntrOutputLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_MAX_NUM; u8CntrLoc++)
    1ade:	1b 82       	std	Y+3, r1	; 0x03
    1ae0:	65 c0       	rjmp	.+202    	; 0x1bac <KEYPAD_voidInit+0xda>
	{
		
		for(u8CntrInputLoc = 0 ; u8CntrInputLoc < KEYPAD_astrPinCfg[u8CntrLoc].u8InputPinNum ; u8CntrInputLoc++)
    1ae2:	1a 82       	std	Y+2, r1	; 0x02
    1ae4:	1c c0       	rjmp	.+56     	; 0x1b1e <KEYPAD_voidInit+0x4c>
		{
			DIO_enuPullWrite(
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	48 2f       	mov	r20, r24
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	c9 01       	movw	r24, r18
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	9c 01       	movw	r18, r24
    1afa:	22 0f       	add	r18, r18
    1afc:	33 1f       	adc	r19, r19
    1afe:	22 0f       	add	r18, r18
    1b00:	33 1f       	adc	r19, r19
    1b02:	82 0f       	add	r24, r18
    1b04:	93 1f       	adc	r25, r19
    1b06:	84 0f       	add	r24, r20
    1b08:	95 1f       	adc	r25, r21
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	ee 55       	subi	r30, 0x5E	; 94
    1b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b10:	80 81       	ld	r24, Z
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	0e 94 1e 09 	call	0x123c	; 0x123c <DIO_enuPullWrite>
	uint8 u8CntrInputLoc ;
	uint8 u8CntrOutputLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_MAX_NUM; u8CntrLoc++)
	{
		
		for(u8CntrInputLoc = 0 ; u8CntrInputLoc < KEYPAD_astrPinCfg[u8CntrLoc].u8InputPinNum ; u8CntrInputLoc++)
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	8f 5f       	subi	r24, 0xFF	; 255
    1b1c:	8a 83       	std	Y+2, r24	; 0x02
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	9c 01       	movw	r18, r24
    1b2a:	22 0f       	add	r18, r18
    1b2c:	33 1f       	adc	r19, r19
    1b2e:	22 0f       	add	r18, r18
    1b30:	33 1f       	adc	r19, r19
    1b32:	82 0f       	add	r24, r18
    1b34:	93 1f       	adc	r25, r19
    1b36:	fc 01       	movw	r30, r24
    1b38:	e7 55       	subi	r30, 0x57	; 87
    1b3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b3c:	90 81       	ld	r25, Z
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	89 17       	cp	r24, r25
    1b42:	88 f2       	brcs	.-94     	; 0x1ae6 <KEYPAD_voidInit+0x14>
			DIO_enuPullWrite(
			KEYPAD_astrPinCfg[u8CntrLoc].au8InputPins[u8CntrInputLoc] ,
			DIO_u8ACTIVATE);
		}
		
		for(u8CntrOutputLoc = 0 ; u8CntrOutputLoc < KEYPAD_astrPinCfg[u8CntrLoc].u8OutputPinNum ; u8CntrOutputLoc++)
    1b44:	19 82       	std	Y+1, r1	; 0x01
    1b46:	1c c0       	rjmp	.+56     	; 0x1b80 <KEYPAD_voidInit+0xae>
		{
			DIO_enuWritePin(
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	48 2f       	mov	r20, r24
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	c9 01       	movw	r24, r18
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	9c 01       	movw	r18, r24
    1b5c:	22 0f       	add	r18, r18
    1b5e:	33 1f       	adc	r19, r19
    1b60:	22 0f       	add	r18, r18
    1b62:	33 1f       	adc	r19, r19
    1b64:	82 0f       	add	r24, r18
    1b66:	93 1f       	adc	r25, r19
    1b68:	84 0f       	add	r24, r20
    1b6a:	95 1f       	adc	r25, r21
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	eb 55       	subi	r30, 0x5B	; 91
    1b70:	fe 4f       	sbci	r31, 0xFE	; 254
    1b72:	80 81       	ld	r24, Z
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
			DIO_enuPullWrite(
			KEYPAD_astrPinCfg[u8CntrLoc].au8InputPins[u8CntrInputLoc] ,
			DIO_u8ACTIVATE);
		}
		
		for(u8CntrOutputLoc = 0 ; u8CntrOutputLoc < KEYPAD_astrPinCfg[u8CntrLoc].u8OutputPinNum ; u8CntrOutputLoc++)
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	8f 5f       	subi	r24, 0xFF	; 255
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	9c 01       	movw	r18, r24
    1b8c:	22 0f       	add	r18, r18
    1b8e:	33 1f       	adc	r19, r19
    1b90:	22 0f       	add	r18, r18
    1b92:	33 1f       	adc	r19, r19
    1b94:	82 0f       	add	r24, r18
    1b96:	93 1f       	adc	r25, r19
    1b98:	fc 01       	movw	r30, r24
    1b9a:	e6 55       	subi	r30, 0x56	; 86
    1b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9e:	90 81       	ld	r25, Z
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	89 17       	cp	r24, r25
    1ba4:	88 f2       	brcs	.-94     	; 0x1b48 <KEYPAD_voidInit+0x76>
void KEYPAD_voidInit(void)
{
	uint8 u8CntrLoc ;
	uint8 u8CntrInputLoc ;
	uint8 u8CntrOutputLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_MAX_NUM; u8CntrLoc++)
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	8f 5f       	subi	r24, 0xFF	; 255
    1baa:	8b 83       	std	Y+3, r24	; 0x03
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	88 23       	and	r24, r24
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <KEYPAD_voidInit+0xe2>
    1bb2:	97 cf       	rjmp	.-210    	; 0x1ae2 <KEYPAD_voidInit+0x10>
			KEYPAD_astrPinCfg[u8CntrLoc].au8OutputPins[u8CntrOutputLoc]
			,DIO_u8HIGH);
		}
	}
	
}
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <KEYPAD_enuGetPressedKey>:

tenuErrorStatus KEYPAD_enuGetPressedKey(uint8 u8KeyPadNumCpy , uint8 * pu16PressedKeyCpy, uint8 * size)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	cb 57       	subi	r28, 0x7B	; 123
    1bca:	d0 40       	sbci	r29, 0x00	; 0
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e9 58       	subi	r30, 0x89	; 137
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	80 83       	st	Z, r24
    1bde:	fe 01       	movw	r30, r28
    1be0:	e8 58       	subi	r30, 0x88	; 136
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	71 83       	std	Z+1, r23	; 0x01
    1be6:	60 83       	st	Z, r22
    1be8:	fe 01       	movw	r30, r28
    1bea:	e6 58       	subi	r30, 0x86	; 134
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	51 83       	std	Z+1, r21	; 0x01
    1bf0:	40 83       	st	Z, r20
	tenuErrorStatus enuReturnStateLoc = E_OK ;
    1bf2:	19 8a       	std	Y+17, r1	; 0x11

	uint8 u8CntrLoc ;
	uint8 u16CntrSwitchLoc =0;
    1bf4:	1a 8a       	std	Y+18, r1	; 0x12
	uint8  u8bufferLoc[100]={0} ;
    1bf6:	84 e6       	ldi	r24, 0x64	; 100
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	73 96       	adiw	r30, 0x13	; 19
    1bfc:	df 01       	movw	r26, r30
    1bfe:	98 2f       	mov	r25, r24
    1c00:	1d 92       	st	X+, r1
    1c02:	9a 95       	dec	r25
    1c04:	e9 f7       	brne	.-6      	; 0x1c00 <KEYPAD_enuGetPressedKey+0x40>
	uint8 i;
	

	if (pu16PressedKeyCpy != NULL_PTR )
    1c06:	fe 01       	movw	r30, r28
    1c08:	e8 58       	subi	r30, 0x88	; 136
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 81       	ld	r24, Z
    1c0e:	91 81       	ldd	r25, Z+1	; 0x01
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <KEYPAD_enuGetPressedKey+0x56>
    1c14:	e1 c0       	rjmp	.+450    	; 0x1dd8 <KEYPAD_enuGetPressedKey+0x218>
	{
		*pu16PressedKeyCpy = 0 ;
    1c16:	fe 01       	movw	r30, r28
    1c18:	e8 58       	subi	r30, 0x88	; 136
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	01 90       	ld	r0, Z+
    1c1e:	f0 81       	ld	r31, Z
    1c20:	e0 2d       	mov	r30, r0
    1c22:	10 82       	st	Z, r1
		if (u8KeyPadNumCpy < KEYPAD_MAX_NUM)
    1c24:	fe 01       	movw	r30, r28
    1c26:	e9 58       	subi	r30, 0x89	; 137
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 81       	ld	r24, Z
    1c2c:	88 23       	and	r24, r24
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <KEYPAD_enuGetPressedKey+0x72>
    1c30:	d0 c0       	rjmp	.+416    	; 0x1dd2 <KEYPAD_enuGetPressedKey+0x212>
		{
			
			for(u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_astrPinCfg[u8KeyPadNumCpy].u8OutputPinNum ;u8CntrLoc++)
    1c32:	18 8a       	std	Y+16, r1	; 0x10
    1c34:	8f c0       	rjmp	.+286    	; 0x1d54 <KEYPAD_enuGetPressedKey+0x194>
			{
	
				KEYPAD_voidWriteSequence(u8KeyPadNumCpy,u8CntrLoc);
    1c36:	fe 01       	movw	r30, r28
    1c38:	e9 58       	subi	r30, 0x89	; 137
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 81       	ld	r24, Z
    1c3e:	68 89       	ldd	r22, Y+16	; 0x10
    1c40:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <KEYPAD_voidWriteSequence>
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a8 e4       	ldi	r26, 0x48	; 72
    1c4a:	b2 e4       	ldi	r27, 0x42	; 66
    1c4c:	8b 87       	std	Y+11, r24	; 0x0b
    1c4e:	9c 87       	std	Y+12, r25	; 0x0c
    1c50:	ad 87       	std	Y+13, r26	; 0x0d
    1c52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	4a ef       	ldi	r20, 0xFA	; 250
    1c62:	54 e4       	ldi	r21, 0x44	; 68
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	8f 83       	std	Y+7, r24	; 0x07
    1c6e:	98 87       	std	Y+8, r25	; 0x08
    1c70:	a9 87       	std	Y+9, r26	; 0x09
    1c72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c74:	6f 81       	ldd	r22, Y+7	; 0x07
    1c76:	78 85       	ldd	r23, Y+8	; 0x08
    1c78:	89 85       	ldd	r24, Y+9	; 0x09
    1c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e8       	ldi	r20, 0x80	; 128
    1c82:	5f e3       	ldi	r21, 0x3F	; 63
    1c84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c88:	88 23       	and	r24, r24
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <KEYPAD_enuGetPressedKey+0xd6>
		__ticks = 1;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9e 83       	std	Y+6, r25	; 0x06
    1c92:	8d 83       	std	Y+5, r24	; 0x05
    1c94:	3f c0       	rjmp	.+126    	; 0x1d14 <KEYPAD_enuGetPressedKey+0x154>
	else if (__tmp > 65535)
    1c96:	6f 81       	ldd	r22, Y+7	; 0x07
    1c98:	78 85       	ldd	r23, Y+8	; 0x08
    1c9a:	89 85       	ldd	r24, Y+9	; 0x09
    1c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	3f ef       	ldi	r19, 0xFF	; 255
    1ca2:	4f e7       	ldi	r20, 0x7F	; 127
    1ca4:	57 e4       	ldi	r21, 0x47	; 71
    1ca6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1caa:	18 16       	cp	r1, r24
    1cac:	4c f5       	brge	.+82     	; 0x1d00 <KEYPAD_enuGetPressedKey+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e2       	ldi	r20, 0x20	; 32
    1cbc:	51 e4       	ldi	r21, 0x41	; 65
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	9e 83       	std	Y+6, r25	; 0x06
    1cd4:	8d 83       	std	Y+5, r24	; 0x05
    1cd6:	0f c0       	rjmp	.+30     	; 0x1cf6 <KEYPAD_enuGetPressedKey+0x136>
    1cd8:	88 ec       	ldi	r24, 0xC8	; 200
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9c 83       	std	Y+4, r25	; 0x04
    1cde:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <KEYPAD_enuGetPressedKey+0x124>
    1ce8:	9c 83       	std	Y+4, r25	; 0x04
    1cea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	9e 83       	std	Y+6, r25	; 0x06
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	69 f7       	brne	.-38     	; 0x1cd8 <KEYPAD_enuGetPressedKey+0x118>
    1cfe:	14 c0       	rjmp	.+40     	; 0x1d28 <KEYPAD_enuGetPressedKey+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d00:	6f 81       	ldd	r22, Y+7	; 0x07
    1d02:	78 85       	ldd	r23, Y+8	; 0x08
    1d04:	89 85       	ldd	r24, Y+9	; 0x09
    1d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9e 83       	std	Y+6, r25	; 0x06
    1d12:	8d 83       	std	Y+5, r24	; 0x05
    1d14:	8d 81       	ldd	r24, Y+5	; 0x05
    1d16:	9e 81       	ldd	r25, Y+6	; 0x06
    1d18:	9a 83       	std	Y+2, r25	; 0x02
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <KEYPAD_enuGetPressedKey+0x160>
    1d24:	9a 83       	std	Y+2, r25	; 0x02
    1d26:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				KEYPAD_voidReadSequence(u8KeyPadNumCpy,u8bufferLoc+u16CntrSwitchLoc,u8CntrLoc,&u16CntrSwitchLoc);
    1d28:	8a 89       	ldd	r24, Y+18	; 0x12
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9e 01       	movw	r18, r28
    1d30:	2d 5e       	subi	r18, 0xED	; 237
    1d32:	3f 4f       	sbci	r19, 0xFF	; 255
    1d34:	28 0f       	add	r18, r24
    1d36:	39 1f       	adc	r19, r25
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e9 58       	subi	r30, 0x89	; 137
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	de 01       	movw	r26, r28
    1d40:	52 96       	adiw	r26, 0x12	; 18
    1d42:	80 81       	ld	r24, Z
    1d44:	b9 01       	movw	r22, r18
    1d46:	48 89       	ldd	r20, Y+16	; 0x10
    1d48:	9d 01       	movw	r18, r26
    1d4a:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <KEYPAD_voidReadSequence>
	{
		*pu16PressedKeyCpy = 0 ;
		if (u8KeyPadNumCpy < KEYPAD_MAX_NUM)
		{
			
			for(u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_astrPinCfg[u8KeyPadNumCpy].u8OutputPinNum ;u8CntrLoc++)
    1d4e:	88 89       	ldd	r24, Y+16	; 0x10
    1d50:	8f 5f       	subi	r24, 0xFF	; 255
    1d52:	88 8b       	std	Y+16, r24	; 0x10
    1d54:	fe 01       	movw	r30, r28
    1d56:	e9 58       	subi	r30, 0x89	; 137
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	88 2f       	mov	r24, r24
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	9c 01       	movw	r18, r24
    1d66:	22 0f       	add	r18, r18
    1d68:	33 1f       	adc	r19, r19
    1d6a:	22 0f       	add	r18, r18
    1d6c:	33 1f       	adc	r19, r19
    1d6e:	82 0f       	add	r24, r18
    1d70:	93 1f       	adc	r25, r19
    1d72:	fc 01       	movw	r30, r24
    1d74:	e6 55       	subi	r30, 0x56	; 86
    1d76:	fe 4f       	sbci	r31, 0xFE	; 254
    1d78:	90 81       	ld	r25, Z
    1d7a:	88 89       	ldd	r24, Y+16	; 0x10
    1d7c:	89 17       	cp	r24, r25
    1d7e:	08 f4       	brcc	.+2      	; 0x1d82 <KEYPAD_enuGetPressedKey+0x1c2>
    1d80:	5a cf       	rjmp	.-332    	; 0x1c36 <KEYPAD_enuGetPressedKey+0x76>
				_delay_ms(50);
				KEYPAD_voidReadSequence(u8KeyPadNumCpy,u8bufferLoc+u16CntrSwitchLoc,u8CntrLoc,&u16CntrSwitchLoc);

			}

				for(i=0;i<u16CntrSwitchLoc;i++){
    1d82:	1f 86       	std	Y+15, r1	; 0x0f
    1d84:	18 c0       	rjmp	.+48     	; 0x1db6 <KEYPAD_enuGetPressedKey+0x1f6>
					*(pu16PressedKeyCpy+i)=	u8bufferLoc[i];
    1d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	e8 58       	subi	r30, 0x88	; 136
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	80 81       	ld	r24, Z
    1d94:	91 81       	ldd	r25, Z+1	; 0x01
    1d96:	dc 01       	movw	r26, r24
    1d98:	a2 0f       	add	r26, r18
    1d9a:	b3 1f       	adc	r27, r19
    1d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	ce 01       	movw	r24, r28
    1da4:	43 96       	adiw	r24, 0x13	; 19
    1da6:	fc 01       	movw	r30, r24
    1da8:	e2 0f       	add	r30, r18
    1daa:	f3 1f       	adc	r31, r19
    1dac:	80 81       	ld	r24, Z
    1dae:	8c 93       	st	X, r24
				_delay_ms(50);
				KEYPAD_voidReadSequence(u8KeyPadNumCpy,u8bufferLoc+u16CntrSwitchLoc,u8CntrLoc,&u16CntrSwitchLoc);

			}

				for(i=0;i<u16CntrSwitchLoc;i++){
    1db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db2:	8f 5f       	subi	r24, 0xFF	; 255
    1db4:	8f 87       	std	Y+15, r24	; 0x0f
    1db6:	9a 89       	ldd	r25, Y+18	; 0x12
    1db8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dba:	89 17       	cp	r24, r25
    1dbc:	20 f3       	brcs	.-56     	; 0x1d86 <KEYPAD_enuGetPressedKey+0x1c6>
					*(pu16PressedKeyCpy+i)=	u8bufferLoc[i];
				}
*size = u16CntrSwitchLoc;
    1dbe:	8a 89       	ldd	r24, Y+18	; 0x12
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e6 58       	subi	r30, 0x86	; 134
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	01 90       	ld	r0, Z+
    1dc8:	f0 81       	ld	r31, Z
    1dca:	e0 2d       	mov	r30, r0
    1dcc:	80 83       	st	Z, r24
u16CntrSwitchLoc=0;
    1dce:	1a 8a       	std	Y+18, r1	; 0x12
    1dd0:	05 c0       	rjmp	.+10     	; 0x1ddc <KEYPAD_enuGetPressedKey+0x21c>


		}
		else
		{
			enuReturnStateLoc = E_NOK_PARAM_OUT_OF_RANGE ; 
    1dd2:	82 e0       	ldi	r24, 0x02	; 2
    1dd4:	89 8b       	std	Y+17, r24	; 0x11
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <KEYPAD_enuGetPressedKey+0x21c>
		}
		
	}
	else
	{
		enuReturnStateLoc = E_NOK_PARAM_NULL_POINTER ;
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	89 8b       	std	Y+17, r24	; 0x11
	}
	
	return enuReturnStateLoc ;
    1ddc:	89 89       	ldd	r24, Y+17	; 0x11
	
}
    1dde:	c5 58       	subi	r28, 0x85	; 133
    1de0:	df 4f       	sbci	r29, 0xFF	; 255
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <KEYPAD_voidWriteSequence>:

static void KEYPAD_voidWriteSequence(uint8 u8KeyPadNumCpy , uint8 u8SequenceNumCpy)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <KEYPAD_voidWriteSequence+0x6>
    1df8:	0f 92       	push	r0
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	8a 83       	std	Y+2, r24	; 0x02
    1e00:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8CntrLoc ;

	if (u8SequenceNumCpy < KEYPAD_astrPinCfg[u8KeyPadNumCpy].u8OutputPinNum)
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	9c 01       	movw	r18, r24
    1e0e:	22 0f       	add	r18, r18
    1e10:	33 1f       	adc	r19, r19
    1e12:	22 0f       	add	r18, r18
    1e14:	33 1f       	adc	r19, r19
    1e16:	82 0f       	add	r24, r18
    1e18:	93 1f       	adc	r25, r19
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	e6 55       	subi	r30, 0x56	; 86
    1e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e20:	90 81       	ld	r25, Z
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	89 17       	cp	r24, r25
    1e26:	08 f0       	brcs	.+2      	; 0x1e2a <KEYPAD_voidWriteSequence+0x38>
    1e28:	50 c0       	rjmp	.+160    	; 0x1eca <KEYPAD_voidWriteSequence+0xd8>
	{
		for (u8CntrLoc =0 ;u8CntrLoc< KEYPAD_astrPinCfg[u8KeyPadNumCpy].u8OutputPinNum ; u8CntrLoc++)
    1e2a:	19 82       	std	Y+1, r1	; 0x01
    1e2c:	3a c0       	rjmp	.+116    	; 0x1ea2 <KEYPAD_voidWriteSequence+0xb0>
		{
			if(u8CntrLoc == u8SequenceNumCpy)
    1e2e:	99 81       	ldd	r25, Y+1	; 0x01
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	98 17       	cp	r25, r24
    1e34:	d1 f4       	brne	.+52     	; 0x1e6a <KEYPAD_voidWriteSequence+0x78>
			{
				DIO_enuWritePin(
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	48 2f       	mov	r20, r24
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	c9 01       	movw	r24, r18
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	9c 01       	movw	r18, r24
    1e4a:	22 0f       	add	r18, r18
    1e4c:	33 1f       	adc	r19, r19
    1e4e:	22 0f       	add	r18, r18
    1e50:	33 1f       	adc	r19, r19
    1e52:	82 0f       	add	r24, r18
    1e54:	93 1f       	adc	r25, r19
    1e56:	84 0f       	add	r24, r20
    1e58:	95 1f       	adc	r25, r21
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	eb 55       	subi	r30, 0x5B	; 91
    1e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e60:	80 81       	ld	r24, Z
    1e62:	60 e0       	ldi	r22, 0x00	; 0
    1e64:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
    1e68:	19 c0       	rjmp	.+50     	; 0x1e9c <KEYPAD_voidWriteSequence+0xaa>
				KEYPAD_astrPinCfg[u8KeyPadNumCpy].au8OutputPins[u8CntrLoc]
				,DIO_u8LOW);
			}
			else
			{						
				DIO_enuWritePin(
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	48 2f       	mov	r20, r24
    1e74:	50 e0       	ldi	r21, 0x00	; 0
    1e76:	c9 01       	movw	r24, r18
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	9c 01       	movw	r18, r24
    1e7e:	22 0f       	add	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	22 0f       	add	r18, r18
    1e84:	33 1f       	adc	r19, r19
    1e86:	82 0f       	add	r24, r18
    1e88:	93 1f       	adc	r25, r19
    1e8a:	84 0f       	add	r24, r20
    1e8c:	95 1f       	adc	r25, r21
    1e8e:	fc 01       	movw	r30, r24
    1e90:	eb 55       	subi	r30, 0x5B	; 91
    1e92:	fe 4f       	sbci	r31, 0xFE	; 254
    1e94:	80 81       	ld	r24, Z
    1e96:	61 e0       	ldi	r22, 0x01	; 1
    1e98:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
{
	uint8 u8CntrLoc ;

	if (u8SequenceNumCpy < KEYPAD_astrPinCfg[u8KeyPadNumCpy].u8OutputPinNum)
	{
		for (u8CntrLoc =0 ;u8CntrLoc< KEYPAD_astrPinCfg[u8KeyPadNumCpy].u8OutputPinNum ; u8CntrLoc++)
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	9c 01       	movw	r18, r24
    1eae:	22 0f       	add	r18, r18
    1eb0:	33 1f       	adc	r19, r19
    1eb2:	22 0f       	add	r18, r18
    1eb4:	33 1f       	adc	r19, r19
    1eb6:	82 0f       	add	r24, r18
    1eb8:	93 1f       	adc	r25, r19
    1eba:	fc 01       	movw	r30, r24
    1ebc:	e6 55       	subi	r30, 0x56	; 86
    1ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec0:	90 81       	ld	r25, Z
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	89 17       	cp	r24, r25
    1ec6:	08 f4       	brcc	.+2      	; 0x1eca <KEYPAD_voidWriteSequence+0xd8>
    1ec8:	b2 cf       	rjmp	.-156    	; 0x1e2e <KEYPAD_voidWriteSequence+0x3c>
	{
		
	}
	
	
}
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <KEYPAD_voidReadSequence>:

static void KEYPAD_voidReadSequence(uint8 u8KeyPadNumCpy,uint8 *pu16PressedKeyCpy,uint8 u8Cntrcpy,uint8* count)
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	2a 97       	sbiw	r28, 0x0a	; 10
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	8d 83       	std	Y+5, r24	; 0x05
    1eec:	7f 83       	std	Y+7, r23	; 0x07
    1eee:	6e 83       	std	Y+6, r22	; 0x06
    1ef0:	48 87       	std	Y+8, r20	; 0x08
    1ef2:	3a 87       	std	Y+10, r19	; 0x0a
    1ef4:	29 87       	std	Y+9, r18	; 0x09
	uint8 u8CntrLoc ;
	uint8 u8BufferLoc = 0 ;
    1ef6:	1c 82       	std	Y+4, r1	; 0x04

	uint8 * ptemp =array[u8KeyPadNumCpy];
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	fc 01       	movw	r30, r24
    1f04:	e8 54       	subi	r30, 0x48	; 72
    1f06:	fe 4f       	sbci	r31, 0xFE	; 254
    1f08:	80 81       	ld	r24, Z
    1f0a:	91 81       	ldd	r25, Z+1	; 0x01
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
	for (u8CntrLoc =0 ;u8CntrLoc< KEYPAD_astrPinCfg[u8KeyPadNumCpy].u8InputPinNum ; u8CntrLoc++)
    1f10:	1b 82       	std	Y+3, r1	; 0x03
    1f12:	a7 c0       	rjmp	.+334    	; 0x2062 <KEYPAD_voidReadSequence+0x18c>
	{
		DIO_enuReadPin(
    1f14:	8d 81       	ldd	r24, Y+5	; 0x05
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	c9 01       	movw	r24, r18
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	9c 01       	movw	r18, r24
    1f28:	22 0f       	add	r18, r18
    1f2a:	33 1f       	adc	r19, r19
    1f2c:	22 0f       	add	r18, r18
    1f2e:	33 1f       	adc	r19, r19
    1f30:	82 0f       	add	r24, r18
    1f32:	93 1f       	adc	r25, r19
    1f34:	84 0f       	add	r24, r20
    1f36:	95 1f       	adc	r25, r21
    1f38:	fc 01       	movw	r30, r24
    1f3a:	ee 55       	subi	r30, 0x5E	; 94
    1f3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3e:	80 81       	ld	r24, Z
    1f40:	9e 01       	movw	r18, r28
    1f42:	2c 5f       	subi	r18, 0xFC	; 252
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	b9 01       	movw	r22, r18
    1f48:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_enuReadPin>
		KEYPAD_astrPinCfg[u8KeyPadNumCpy].au8InputPins[u8CntrLoc],&u8BufferLoc);
		if(u8BufferLoc== DIO_u8LOW){
    1f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4e:	88 23       	and	r24, r24
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <KEYPAD_voidReadSequence+0x7e>
    1f52:	84 c0       	rjmp	.+264    	; 0x205c <KEYPAD_voidReadSequence+0x186>
			if(KEYPAD_astrPinCfg[u8KeyPadNumCpy]. u8modeconnection==ROW_INPUT_COLOUNM_OUTPUT){
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	9c 01       	movw	r18, r24
    1f60:	22 0f       	add	r18, r18
    1f62:	33 1f       	adc	r19, r19
    1f64:	22 0f       	add	r18, r18
    1f66:	33 1f       	adc	r19, r19
    1f68:	82 0f       	add	r24, r18
    1f6a:	93 1f       	adc	r25, r19
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	e5 55       	subi	r30, 0x55	; 85
    1f70:	fe 4f       	sbci	r31, 0xFE	; 254
    1f72:	80 81       	ld	r24, Z
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	69 f5       	brne	.+90     	; 0x1fd2 <KEYPAD_voidReadSequence+0xfc>
			*pu16PressedKeyCpy = *(ptemp+((KEYPAD_astrPinCfg[u8KeyPadNumCpy].u8InputPinNum)*u8Cntrcpy+u8CntrLoc));
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	88 2f       	mov	r24, r24
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	9c 01       	movw	r18, r24
    1f84:	22 0f       	add	r18, r18
    1f86:	33 1f       	adc	r19, r19
    1f88:	22 0f       	add	r18, r18
    1f8a:	33 1f       	adc	r19, r19
    1f8c:	82 0f       	add	r24, r18
    1f8e:	93 1f       	adc	r25, r19
    1f90:	fc 01       	movw	r30, r24
    1f92:	e7 55       	subi	r30, 0x57	; 87
    1f94:	fe 4f       	sbci	r31, 0xFE	; 254
    1f96:	80 81       	ld	r24, Z
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	88 85       	ldd	r24, Y+8	; 0x08
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	a9 01       	movw	r20, r18
    1fa4:	48 9f       	mul	r20, r24
    1fa6:	90 01       	movw	r18, r0
    1fa8:	49 9f       	mul	r20, r25
    1faa:	30 0d       	add	r19, r0
    1fac:	58 9f       	mul	r21, r24
    1fae:	30 0d       	add	r19, r0
    1fb0:	11 24       	eor	r1, r1
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	82 0f       	add	r24, r18
    1fba:	93 1f       	adc	r25, r19
    1fbc:	9c 01       	movw	r18, r24
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	e2 0f       	add	r30, r18
    1fc6:	f3 1f       	adc	r31, r19
    1fc8:	80 81       	ld	r24, Z
    1fca:	ee 81       	ldd	r30, Y+6	; 0x06
    1fcc:	ff 81       	ldd	r31, Y+7	; 0x07
    1fce:	80 83       	st	Z, r24
    1fd0:	3e c0       	rjmp	.+124    	; 0x204e <KEYPAD_voidReadSequence+0x178>
			}
			else if (KEYPAD_astrPinCfg[u8KeyPadNumCpy]. u8modeconnection==ROW_OUTPUT_COLOUNM_INPUT){
    1fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd4:	88 2f       	mov	r24, r24
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	9c 01       	movw	r18, r24
    1fde:	22 0f       	add	r18, r18
    1fe0:	33 1f       	adc	r19, r19
    1fe2:	22 0f       	add	r18, r18
    1fe4:	33 1f       	adc	r19, r19
    1fe6:	82 0f       	add	r24, r18
    1fe8:	93 1f       	adc	r25, r19
    1fea:	fc 01       	movw	r30, r24
    1fec:	e5 55       	subi	r30, 0x55	; 85
    1fee:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff0:	80 81       	ld	r24, Z
    1ff2:	88 23       	and	r24, r24
    1ff4:	61 f5       	brne	.+88     	; 0x204e <KEYPAD_voidReadSequence+0x178>
				*pu16PressedKeyCpy = *(ptemp+(u8Cntrcpy+  u8CntrLoc*(KEYPAD_astrPinCfg[u8KeyPadNumCpy].u8OutputPinNum)));
    1ff6:	88 85       	ldd	r24, Y+8	; 0x08
    1ff8:	68 2f       	mov	r22, r24
    1ffa:	70 e0       	ldi	r23, 0x00	; 0
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	48 2f       	mov	r20, r24
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	9c 01       	movw	r18, r24
    200e:	22 0f       	add	r18, r18
    2010:	33 1f       	adc	r19, r19
    2012:	22 0f       	add	r18, r18
    2014:	33 1f       	adc	r19, r19
    2016:	82 0f       	add	r24, r18
    2018:	93 1f       	adc	r25, r19
    201a:	fc 01       	movw	r30, r24
    201c:	e6 55       	subi	r30, 0x56	; 86
    201e:	fe 4f       	sbci	r31, 0xFE	; 254
    2020:	80 81       	ld	r24, Z
    2022:	88 2f       	mov	r24, r24
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9c 01       	movw	r18, r24
    2028:	42 9f       	mul	r20, r18
    202a:	c0 01       	movw	r24, r0
    202c:	43 9f       	mul	r20, r19
    202e:	90 0d       	add	r25, r0
    2030:	52 9f       	mul	r21, r18
    2032:	90 0d       	add	r25, r0
    2034:	11 24       	eor	r1, r1
    2036:	86 0f       	add	r24, r22
    2038:	97 1f       	adc	r25, r23
    203a:	9c 01       	movw	r18, r24
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	fc 01       	movw	r30, r24
    2042:	e2 0f       	add	r30, r18
    2044:	f3 1f       	adc	r31, r19
    2046:	80 81       	ld	r24, Z
    2048:	ee 81       	ldd	r30, Y+6	; 0x06
    204a:	ff 81       	ldd	r31, Y+7	; 0x07
    204c:	80 83       	st	Z, r24
			}

			(*count)++;
    204e:	e9 85       	ldd	r30, Y+9	; 0x09
    2050:	fa 85       	ldd	r31, Y+10	; 0x0a
    2052:	80 81       	ld	r24, Z
    2054:	8f 5f       	subi	r24, 0xFF	; 255
    2056:	e9 85       	ldd	r30, Y+9	; 0x09
    2058:	fa 85       	ldd	r31, Y+10	; 0x0a
    205a:	80 83       	st	Z, r24
{
	uint8 u8CntrLoc ;
	uint8 u8BufferLoc = 0 ;

	uint8 * ptemp =array[u8KeyPadNumCpy];
	for (u8CntrLoc =0 ;u8CntrLoc< KEYPAD_astrPinCfg[u8KeyPadNumCpy].u8InputPinNum ; u8CntrLoc++)
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	8f 5f       	subi	r24, 0xFF	; 255
    2060:	8b 83       	std	Y+3, r24	; 0x03
    2062:	8d 81       	ldd	r24, Y+5	; 0x05
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	9c 01       	movw	r18, r24
    206e:	22 0f       	add	r18, r18
    2070:	33 1f       	adc	r19, r19
    2072:	22 0f       	add	r18, r18
    2074:	33 1f       	adc	r19, r19
    2076:	82 0f       	add	r24, r18
    2078:	93 1f       	adc	r25, r19
    207a:	fc 01       	movw	r30, r24
    207c:	e7 55       	subi	r30, 0x57	; 87
    207e:	fe 4f       	sbci	r31, 0xFE	; 254
    2080:	90 81       	ld	r25, Z
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	89 17       	cp	r24, r25
    2086:	08 f4       	brcc	.+2      	; 0x208a <KEYPAD_voidReadSequence+0x1b4>
    2088:	45 cf       	rjmp	.-374    	; 0x1f14 <KEYPAD_voidReadSequence+0x3e>
			
		}

	}
	
}
    208a:	2a 96       	adiw	r28, 0x0a	; 10
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <LCD_voidInit>:
#include "LCD_priv.h"

static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy, uint8 u8LcdDataCmdCpy);

void LCD_voidInit(void)
{
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	c6 5c       	subi	r28, 0xC6	; 198
    20aa:	d0 40       	sbci	r29, 0x00	; 0
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	de bf       	out	0x3e, r29	; 62
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntrLoc;
	uint8 u8CmdLoc;
	for (u8CntrLoc = 0; u8CntrLoc < LCD_MAX_NUM; u8CntrLoc++)
    20b6:	fe 01       	movw	r30, r28
    20b8:	ea 53       	subi	r30, 0x3A	; 58
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	10 82       	st	Z, r1
    20be:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <LCD_voidInit+0x15f4>
    20c2:	fe 01       	movw	r30, r28
    20c4:	ef 53       	subi	r30, 0x3F	; 63
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	a0 ef       	ldi	r26, 0xF0	; 240
    20ce:	b1 e4       	ldi	r27, 0x41	; 65
    20d0:	80 83       	st	Z, r24
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	a2 83       	std	Z+2, r26	; 0x02
    20d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d8:	8e 01       	movw	r16, r28
    20da:	03 54       	subi	r16, 0x43	; 67
    20dc:	1f 4f       	sbci	r17, 0xFF	; 255
    20de:	fe 01       	movw	r30, r28
    20e0:	ef 53       	subi	r30, 0x3F	; 63
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	60 81       	ld	r22, Z
    20e6:	71 81       	ldd	r23, Z+1	; 0x01
    20e8:	82 81       	ldd	r24, Z+2	; 0x02
    20ea:	93 81       	ldd	r25, Z+3	; 0x03
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a ef       	ldi	r20, 0xFA	; 250
    20f2:	54 e4       	ldi	r21, 0x44	; 68
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	f8 01       	movw	r30, r16
    20fe:	80 83       	st	Z, r24
    2100:	91 83       	std	Z+1, r25	; 0x01
    2102:	a2 83       	std	Z+2, r26	; 0x02
    2104:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2106:	fe 01       	movw	r30, r28
    2108:	e3 54       	subi	r30, 0x43	; 67
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	60 81       	ld	r22, Z
    210e:	71 81       	ldd	r23, Z+1	; 0x01
    2110:	82 81       	ldd	r24, Z+2	; 0x02
    2112:	93 81       	ldd	r25, Z+3	; 0x03
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	44 f4       	brge	.+16     	; 0x2134 <LCD_voidInit+0x98>
		__ticks = 1;
    2124:	fe 01       	movw	r30, r28
    2126:	e5 54       	subi	r30, 0x45	; 69
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	80 83       	st	Z, r24
    2132:	64 c0       	rjmp	.+200    	; 0x21fc <LCD_voidInit+0x160>
	else if (__tmp > 65535)
    2134:	fe 01       	movw	r30, r28
    2136:	e3 54       	subi	r30, 0x43	; 67
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	60 81       	ld	r22, Z
    213c:	71 81       	ldd	r23, Z+1	; 0x01
    213e:	82 81       	ldd	r24, Z+2	; 0x02
    2140:	93 81       	ldd	r25, Z+3	; 0x03
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	3f ef       	ldi	r19, 0xFF	; 255
    2146:	4f e7       	ldi	r20, 0x7F	; 127
    2148:	57 e4       	ldi	r21, 0x47	; 71
    214a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    214e:	18 16       	cp	r1, r24
    2150:	0c f0       	brlt	.+2      	; 0x2154 <LCD_voidInit+0xb8>
    2152:	43 c0       	rjmp	.+134    	; 0x21da <LCD_voidInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	fe 01       	movw	r30, r28
    2156:	ef 53       	subi	r30, 0x3F	; 63
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e2       	ldi	r20, 0x20	; 32
    2168:	51 e4       	ldi	r21, 0x41	; 65
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8e 01       	movw	r16, r28
    2174:	05 54       	subi	r16, 0x45	; 69
    2176:	1f 4f       	sbci	r17, 0xFF	; 255
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	f8 01       	movw	r30, r16
    2186:	91 83       	std	Z+1, r25	; 0x01
    2188:	80 83       	st	Z, r24
    218a:	1f c0       	rjmp	.+62     	; 0x21ca <LCD_voidInit+0x12e>
    218c:	fe 01       	movw	r30, r28
    218e:	e7 54       	subi	r30, 0x47	; 71
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	88 ec       	ldi	r24, 0xC8	; 200
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	80 83       	st	Z, r24
    219a:	fe 01       	movw	r30, r28
    219c:	e7 54       	subi	r30, 0x47	; 71
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	91 81       	ldd	r25, Z+1	; 0x01
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <LCD_voidInit+0x108>
    21a8:	fe 01       	movw	r30, r28
    21aa:	e7 54       	subi	r30, 0x47	; 71
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b2:	de 01       	movw	r26, r28
    21b4:	a5 54       	subi	r26, 0x45	; 69
    21b6:	bf 4f       	sbci	r27, 0xFF	; 255
    21b8:	fe 01       	movw	r30, r28
    21ba:	e5 54       	subi	r30, 0x45	; 69
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	80 81       	ld	r24, Z
    21c0:	91 81       	ldd	r25, Z+1	; 0x01
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	11 96       	adiw	r26, 0x01	; 1
    21c6:	9c 93       	st	X, r25
    21c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ca:	fe 01       	movw	r30, r28
    21cc:	e5 54       	subi	r30, 0x45	; 69
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	d1 f6       	brne	.-76     	; 0x218c <LCD_voidInit+0xf0>
    21d8:	28 c0       	rjmp	.+80     	; 0x222a <LCD_voidInit+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21da:	8e 01       	movw	r16, r28
    21dc:	05 54       	subi	r16, 0x45	; 69
    21de:	1f 4f       	sbci	r17, 0xFF	; 255
    21e0:	fe 01       	movw	r30, r28
    21e2:	e3 54       	subi	r30, 0x43	; 67
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	f8 01       	movw	r30, r16
    21f8:	91 83       	std	Z+1, r25	; 0x01
    21fa:	80 83       	st	Z, r24
    21fc:	de 01       	movw	r26, r28
    21fe:	a9 54       	subi	r26, 0x49	; 73
    2200:	bf 4f       	sbci	r27, 0xFF	; 255
    2202:	fe 01       	movw	r30, r28
    2204:	e5 54       	subi	r30, 0x45	; 69
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	80 81       	ld	r24, Z
    220a:	91 81       	ldd	r25, Z+1	; 0x01
    220c:	11 96       	adiw	r26, 0x01	; 1
    220e:	9c 93       	st	X, r25
    2210:	8e 93       	st	-X, r24
    2212:	fe 01       	movw	r30, r28
    2214:	e9 54       	subi	r30, 0x49	; 73
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 81       	ld	r24, Z
    221a:	91 81       	ldd	r25, Z+1	; 0x01
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <LCD_voidInit+0x180>
    2220:	fe 01       	movw	r30, r28
    2222:	e9 54       	subi	r30, 0x49	; 73
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24
	{
		_delay_ms(30);
		if (LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
    222a:	fe 01       	movw	r30, r28
    222c:	ea 53       	subi	r30, 0x3A	; 58
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 81       	ld	r24, Z
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	c9 01       	movw	r24, r18
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	82 0f       	add	r24, r18
    223e:	93 1f       	adc	r25, r19
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	88 0f       	add	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	fc 01       	movw	r30, r24
    224a:	e6 54       	subi	r30, 0x46	; 70
    224c:	fe 4f       	sbci	r31, 0xFE	; 254
    224e:	80 81       	ld	r24, Z
    2250:	82 95       	swap	r24
    2252:	86 95       	lsr	r24
    2254:	87 70       	andi	r24, 0x07	; 7
    2256:	81 70       	andi	r24, 0x01	; 1
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	09 f0       	breq	.+2      	; 0x225e <LCD_voidInit+0x1c2>
    225c:	bf c3       	rjmp	.+1918   	; 0x29dc <LCD_voidInit+0x940>
		{
			u8CmdLoc = 0x30 | LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine << 3 |
    225e:	fe 01       	movw	r30, r28
    2260:	ea 53       	subi	r30, 0x3A	; 58
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	c9 01       	movw	r24, r18
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	82 0f       	add	r24, r18
    2272:	93 1f       	adc	r25, r19
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	fc 01       	movw	r30, r24
    227e:	e6 54       	subi	r30, 0x46	; 70
    2280:	fe 4f       	sbci	r31, 0xFE	; 254
    2282:	80 81       	ld	r24, Z
    2284:	81 70       	andi	r24, 0x01	; 1
    2286:	88 2f       	mov	r24, r24
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	48 2f       	mov	r20, r24
    2298:	40 63       	ori	r20, 0x30	; 48
    229a:	fe 01       	movw	r30, r28
    229c:	ea 53       	subi	r30, 0x3A	; 58
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 81       	ld	r24, Z
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	c9 01       	movw	r24, r18
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	82 0f       	add	r24, r18
    22ae:	93 1f       	adc	r25, r19
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	fc 01       	movw	r30, r24
    22ba:	e6 54       	subi	r30, 0x46	; 70
    22bc:	fe 4f       	sbci	r31, 0xFE	; 254
    22be:	80 81       	ld	r24, Z
    22c0:	86 95       	lsr	r24
    22c2:	81 70       	andi	r24, 0x01	; 1
    22c4:	88 2f       	mov	r24, r24
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	84 2b       	or	r24, r20
    22d2:	fe 01       	movw	r30, r28
    22d4:	eb 53       	subi	r30, 0x3B	; 59
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 83       	st	Z, r24
					   LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont << 2;

			LCD_enuWriteCmd(u8CntrLoc, u8CmdLoc);
    22da:	fe 01       	movw	r30, r28
    22dc:	ea 53       	subi	r30, 0x3A	; 58
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	de 01       	movw	r26, r28
    22e2:	ab 53       	subi	r26, 0x3B	; 59
    22e4:	bf 4f       	sbci	r27, 0xFF	; 255
    22e6:	80 81       	ld	r24, Z
    22e8:	6c 91       	ld	r22, X
    22ea:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    22ee:	fe 01       	movw	r30, r28
    22f0:	ed 54       	subi	r30, 0x4D	; 77
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	a0 e8       	ldi	r26, 0x80	; 128
    22fa:	bf e3       	ldi	r27, 0x3F	; 63
    22fc:	80 83       	st	Z, r24
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	a2 83       	std	Z+2, r26	; 0x02
    2302:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2304:	8e 01       	movw	r16, r28
    2306:	01 55       	subi	r16, 0x51	; 81
    2308:	1f 4f       	sbci	r17, 0xFF	; 255
    230a:	fe 01       	movw	r30, r28
    230c:	ed 54       	subi	r30, 0x4D	; 77
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	60 81       	ld	r22, Z
    2312:	71 81       	ldd	r23, Z+1	; 0x01
    2314:	82 81       	ldd	r24, Z+2	; 0x02
    2316:	93 81       	ldd	r25, Z+3	; 0x03
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a ef       	ldi	r20, 0xFA	; 250
    231e:	54 e4       	ldi	r21, 0x44	; 68
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	f8 01       	movw	r30, r16
    232a:	80 83       	st	Z, r24
    232c:	91 83       	std	Z+1, r25	; 0x01
    232e:	a2 83       	std	Z+2, r26	; 0x02
    2330:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2332:	fe 01       	movw	r30, r28
    2334:	e1 55       	subi	r30, 0x51	; 81
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	60 81       	ld	r22, Z
    233a:	71 81       	ldd	r23, Z+1	; 0x01
    233c:	82 81       	ldd	r24, Z+2	; 0x02
    233e:	93 81       	ldd	r25, Z+3	; 0x03
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e8       	ldi	r20, 0x80	; 128
    2346:	5f e3       	ldi	r21, 0x3F	; 63
    2348:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234c:	88 23       	and	r24, r24
    234e:	44 f4       	brge	.+16     	; 0x2360 <LCD_voidInit+0x2c4>
		__ticks = 1;
    2350:	fe 01       	movw	r30, r28
    2352:	e3 55       	subi	r30, 0x53	; 83
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
    235e:	64 c0       	rjmp	.+200    	; 0x2428 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    2360:	fe 01       	movw	r30, r28
    2362:	e1 55       	subi	r30, 0x51	; 81
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	60 81       	ld	r22, Z
    2368:	71 81       	ldd	r23, Z+1	; 0x01
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	57 e4       	ldi	r21, 0x47	; 71
    2376:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237a:	18 16       	cp	r1, r24
    237c:	0c f0       	brlt	.+2      	; 0x2380 <LCD_voidInit+0x2e4>
    237e:	43 c0       	rjmp	.+134    	; 0x2406 <LCD_voidInit+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2380:	fe 01       	movw	r30, r28
    2382:	ed 54       	subi	r30, 0x4D	; 77
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e2       	ldi	r20, 0x20	; 32
    2394:	51 e4       	ldi	r21, 0x41	; 65
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	8e 01       	movw	r16, r28
    23a0:	03 55       	subi	r16, 0x53	; 83
    23a2:	1f 4f       	sbci	r17, 0xFF	; 255
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	f8 01       	movw	r30, r16
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	80 83       	st	Z, r24
    23b6:	1f c0       	rjmp	.+62     	; 0x23f6 <LCD_voidInit+0x35a>
    23b8:	fe 01       	movw	r30, r28
    23ba:	e5 55       	subi	r30, 0x55	; 85
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	88 ec       	ldi	r24, 0xC8	; 200
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	80 83       	st	Z, r24
    23c6:	fe 01       	movw	r30, r28
    23c8:	e5 55       	subi	r30, 0x55	; 85
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	80 81       	ld	r24, Z
    23ce:	91 81       	ldd	r25, Z+1	; 0x01
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <LCD_voidInit+0x334>
    23d4:	fe 01       	movw	r30, r28
    23d6:	e5 55       	subi	r30, 0x55	; 85
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	91 83       	std	Z+1, r25	; 0x01
    23dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23de:	de 01       	movw	r26, r28
    23e0:	a3 55       	subi	r26, 0x53	; 83
    23e2:	bf 4f       	sbci	r27, 0xFF	; 255
    23e4:	fe 01       	movw	r30, r28
    23e6:	e3 55       	subi	r30, 0x53	; 83
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	80 81       	ld	r24, Z
    23ec:	91 81       	ldd	r25, Z+1	; 0x01
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	11 96       	adiw	r26, 0x01	; 1
    23f2:	9c 93       	st	X, r25
    23f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f6:	fe 01       	movw	r30, r28
    23f8:	e3 55       	subi	r30, 0x53	; 83
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 81       	ld	r24, Z
    23fe:	91 81       	ldd	r25, Z+1	; 0x01
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	d1 f6       	brne	.-76     	; 0x23b8 <LCD_voidInit+0x31c>
    2404:	27 c0       	rjmp	.+78     	; 0x2454 <LCD_voidInit+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	8e 01       	movw	r16, r28
    2408:	03 55       	subi	r16, 0x53	; 83
    240a:	1f 4f       	sbci	r17, 0xFF	; 255
    240c:	fe 01       	movw	r30, r28
    240e:	e1 55       	subi	r30, 0x51	; 81
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	60 81       	ld	r22, Z
    2414:	71 81       	ldd	r23, Z+1	; 0x01
    2416:	82 81       	ldd	r24, Z+2	; 0x02
    2418:	93 81       	ldd	r25, Z+3	; 0x03
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	f8 01       	movw	r30, r16
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	80 83       	st	Z, r24
    2428:	de 01       	movw	r26, r28
    242a:	a7 55       	subi	r26, 0x57	; 87
    242c:	bf 4f       	sbci	r27, 0xFF	; 255
    242e:	fe 01       	movw	r30, r28
    2430:	e3 55       	subi	r30, 0x53	; 83
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	8d 93       	st	X+, r24
    243a:	9c 93       	st	X, r25
    243c:	fe 01       	movw	r30, r28
    243e:	e7 55       	subi	r30, 0x57	; 87
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 81       	ld	r24, Z
    2444:	91 81       	ldd	r25, Z+1	; 0x01
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_voidInit+0x3aa>
    244a:	fe 01       	movw	r30, r28
    244c:	e7 55       	subi	r30, 0x57	; 87
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	91 83       	std	Z+1, r25	; 0x01
    2452:	80 83       	st	Z, r24
			_delay_ms(1);

			u8CmdLoc = 0x08 | LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display << 2 |
    2454:	fe 01       	movw	r30, r28
    2456:	ea 53       	subi	r30, 0x3A	; 58
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	80 81       	ld	r24, Z
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	c9 01       	movw	r24, r18
    2462:	88 0f       	add	r24, r24
    2464:	99 1f       	adc	r25, r25
    2466:	82 0f       	add	r24, r18
    2468:	93 1f       	adc	r25, r19
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	fc 01       	movw	r30, r24
    2474:	e6 54       	subi	r30, 0x46	; 70
    2476:	fe 4f       	sbci	r31, 0xFE	; 254
    2478:	80 81       	ld	r24, Z
    247a:	86 95       	lsr	r24
    247c:	86 95       	lsr	r24
    247e:	81 70       	andi	r24, 0x01	; 1
    2480:	88 2f       	mov	r24, r24
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	48 2f       	mov	r20, r24
    248e:	48 60       	ori	r20, 0x08	; 8
    2490:	fe 01       	movw	r30, r28
    2492:	ea 53       	subi	r30, 0x3A	; 58
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 81       	ld	r24, Z
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	c9 01       	movw	r24, r18
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	82 0f       	add	r24, r18
    24a4:	93 1f       	adc	r25, r19
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	fc 01       	movw	r30, r24
    24b0:	e6 54       	subi	r30, 0x46	; 70
    24b2:	fe 4f       	sbci	r31, 0xFE	; 254
    24b4:	80 81       	ld	r24, Z
    24b6:	86 95       	lsr	r24
    24b8:	86 95       	lsr	r24
    24ba:	86 95       	lsr	r24
    24bc:	81 70       	andi	r24, 0x01	; 1
    24be:	88 2f       	mov	r24, r24
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	48 2b       	or	r20, r24
    24c8:	fe 01       	movw	r30, r28
    24ca:	ea 53       	subi	r30, 0x3A	; 58
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 81       	ld	r24, Z
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	c9 01       	movw	r24, r18
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	82 0f       	add	r24, r18
    24dc:	93 1f       	adc	r25, r19
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	fc 01       	movw	r30, r24
    24e8:	e6 54       	subi	r30, 0x46	; 70
    24ea:	fe 4f       	sbci	r31, 0xFE	; 254
    24ec:	80 81       	ld	r24, Z
    24ee:	82 95       	swap	r24
    24f0:	8f 70       	andi	r24, 0x0F	; 15
    24f2:	81 70       	andi	r24, 0x01	; 1
    24f4:	84 2b       	or	r24, r20
    24f6:	fe 01       	movw	r30, r28
    24f8:	eb 53       	subi	r30, 0x3B	; 59
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 83       	st	Z, r24
					   LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor << 1 |
					   LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink << 0;

			LCD_enuWriteCmd(u8CntrLoc, u8CmdLoc);
    24fe:	fe 01       	movw	r30, r28
    2500:	ea 53       	subi	r30, 0x3A	; 58
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	de 01       	movw	r26, r28
    2506:	ab 53       	subi	r26, 0x3B	; 59
    2508:	bf 4f       	sbci	r27, 0xFF	; 255
    250a:	80 81       	ld	r24, Z
    250c:	6c 91       	ld	r22, X
    250e:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    2512:	fe 01       	movw	r30, r28
    2514:	eb 55       	subi	r30, 0x5B	; 91
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	a0 e8       	ldi	r26, 0x80	; 128
    251e:	bf e3       	ldi	r27, 0x3F	; 63
    2520:	80 83       	st	Z, r24
    2522:	91 83       	std	Z+1, r25	; 0x01
    2524:	a2 83       	std	Z+2, r26	; 0x02
    2526:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2528:	8e 01       	movw	r16, r28
    252a:	0f 55       	subi	r16, 0x5F	; 95
    252c:	1f 4f       	sbci	r17, 0xFF	; 255
    252e:	fe 01       	movw	r30, r28
    2530:	eb 55       	subi	r30, 0x5B	; 91
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	60 81       	ld	r22, Z
    2536:	71 81       	ldd	r23, Z+1	; 0x01
    2538:	82 81       	ldd	r24, Z+2	; 0x02
    253a:	93 81       	ldd	r25, Z+3	; 0x03
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a ef       	ldi	r20, 0xFA	; 250
    2542:	54 e4       	ldi	r21, 0x44	; 68
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	f8 01       	movw	r30, r16
    254e:	80 83       	st	Z, r24
    2550:	91 83       	std	Z+1, r25	; 0x01
    2552:	a2 83       	std	Z+2, r26	; 0x02
    2554:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2556:	fe 01       	movw	r30, r28
    2558:	ef 55       	subi	r30, 0x5F	; 95
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	60 81       	ld	r22, Z
    255e:	71 81       	ldd	r23, Z+1	; 0x01
    2560:	82 81       	ldd	r24, Z+2	; 0x02
    2562:	93 81       	ldd	r25, Z+3	; 0x03
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2570:	88 23       	and	r24, r24
    2572:	44 f4       	brge	.+16     	; 0x2584 <LCD_voidInit+0x4e8>
		__ticks = 1;
    2574:	fe 01       	movw	r30, r28
    2576:	e1 56       	subi	r30, 0x61	; 97
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	80 83       	st	Z, r24
    2582:	64 c0       	rjmp	.+200    	; 0x264c <LCD_voidInit+0x5b0>
	else if (__tmp > 65535)
    2584:	fe 01       	movw	r30, r28
    2586:	ef 55       	subi	r30, 0x5F	; 95
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	3f ef       	ldi	r19, 0xFF	; 255
    2596:	4f e7       	ldi	r20, 0x7F	; 127
    2598:	57 e4       	ldi	r21, 0x47	; 71
    259a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    259e:	18 16       	cp	r1, r24
    25a0:	0c f0       	brlt	.+2      	; 0x25a4 <LCD_voidInit+0x508>
    25a2:	43 c0       	rjmp	.+134    	; 0x262a <LCD_voidInit+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a4:	fe 01       	movw	r30, r28
    25a6:	eb 55       	subi	r30, 0x5B	; 91
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	60 81       	ld	r22, Z
    25ac:	71 81       	ldd	r23, Z+1	; 0x01
    25ae:	82 81       	ldd	r24, Z+2	; 0x02
    25b0:	93 81       	ldd	r25, Z+3	; 0x03
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e2       	ldi	r20, 0x20	; 32
    25b8:	51 e4       	ldi	r21, 0x41	; 65
    25ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	8e 01       	movw	r16, r28
    25c4:	01 56       	subi	r16, 0x61	; 97
    25c6:	1f 4f       	sbci	r17, 0xFF	; 255
    25c8:	bc 01       	movw	r22, r24
    25ca:	cd 01       	movw	r24, r26
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	f8 01       	movw	r30, r16
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	80 83       	st	Z, r24
    25da:	1f c0       	rjmp	.+62     	; 0x261a <LCD_voidInit+0x57e>
    25dc:	fe 01       	movw	r30, r28
    25de:	e3 56       	subi	r30, 0x63	; 99
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	88 ec       	ldi	r24, 0xC8	; 200
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	80 83       	st	Z, r24
    25ea:	fe 01       	movw	r30, r28
    25ec:	e3 56       	subi	r30, 0x63	; 99
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	80 81       	ld	r24, Z
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <LCD_voidInit+0x558>
    25f8:	fe 01       	movw	r30, r28
    25fa:	e3 56       	subi	r30, 0x63	; 99
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2602:	de 01       	movw	r26, r28
    2604:	a1 56       	subi	r26, 0x61	; 97
    2606:	bf 4f       	sbci	r27, 0xFF	; 255
    2608:	fe 01       	movw	r30, r28
    260a:	e1 56       	subi	r30, 0x61	; 97
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	11 96       	adiw	r26, 0x01	; 1
    2616:	9c 93       	st	X, r25
    2618:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261a:	fe 01       	movw	r30, r28
    261c:	e1 56       	subi	r30, 0x61	; 97
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	d1 f6       	brne	.-76     	; 0x25dc <LCD_voidInit+0x540>
    2628:	27 c0       	rjmp	.+78     	; 0x2678 <LCD_voidInit+0x5dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262a:	8e 01       	movw	r16, r28
    262c:	01 56       	subi	r16, 0x61	; 97
    262e:	1f 4f       	sbci	r17, 0xFF	; 255
    2630:	fe 01       	movw	r30, r28
    2632:	ef 55       	subi	r30, 0x5F	; 95
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	60 81       	ld	r22, Z
    2638:	71 81       	ldd	r23, Z+1	; 0x01
    263a:	82 81       	ldd	r24, Z+2	; 0x02
    263c:	93 81       	ldd	r25, Z+3	; 0x03
    263e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	f8 01       	movw	r30, r16
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
    264c:	de 01       	movw	r26, r28
    264e:	a5 56       	subi	r26, 0x65	; 101
    2650:	bf 4f       	sbci	r27, 0xFF	; 255
    2652:	fe 01       	movw	r30, r28
    2654:	e1 56       	subi	r30, 0x61	; 97
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	8d 93       	st	X+, r24
    265e:	9c 93       	st	X, r25
    2660:	fe 01       	movw	r30, r28
    2662:	e5 56       	subi	r30, 0x65	; 101
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	80 81       	ld	r24, Z
    2668:	91 81       	ldd	r25, Z+1	; 0x01
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <LCD_voidInit+0x5ce>
    266e:	fe 01       	movw	r30, r28
    2670:	e5 56       	subi	r30, 0x65	; 101
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	80 83       	st	Z, r24
			_delay_ms(1);

			LCD_enuWriteCmd(u8CntrLoc, LCD_u8CLEAR);
    2678:	fe 01       	movw	r30, r28
    267a:	ea 53       	subi	r30, 0x3A	; 58
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	80 81       	ld	r24, Z
    2680:	61 e0       	ldi	r22, 0x01	; 1
    2682:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    2686:	fe 01       	movw	r30, r28
    2688:	e9 56       	subi	r30, 0x69	; 105
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 e0       	ldi	r26, 0x00	; 0
    2692:	b0 e4       	ldi	r27, 0x40	; 64
    2694:	80 83       	st	Z, r24
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	a2 83       	std	Z+2, r26	; 0x02
    269a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	8e 01       	movw	r16, r28
    269e:	0d 56       	subi	r16, 0x6D	; 109
    26a0:	1f 4f       	sbci	r17, 0xFF	; 255
    26a2:	fe 01       	movw	r30, r28
    26a4:	e9 56       	subi	r30, 0x69	; 105
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	4a ef       	ldi	r20, 0xFA	; 250
    26b6:	54 e4       	ldi	r21, 0x44	; 68
    26b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	f8 01       	movw	r30, r16
    26c2:	80 83       	st	Z, r24
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	a2 83       	std	Z+2, r26	; 0x02
    26c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ca:	fe 01       	movw	r30, r28
    26cc:	ed 56       	subi	r30, 0x6D	; 109
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	60 81       	ld	r22, Z
    26d2:	71 81       	ldd	r23, Z+1	; 0x01
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	93 81       	ldd	r25, Z+3	; 0x03
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e8       	ldi	r20, 0x80	; 128
    26de:	5f e3       	ldi	r21, 0x3F	; 63
    26e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26e4:	88 23       	and	r24, r24
    26e6:	44 f4       	brge	.+16     	; 0x26f8 <LCD_voidInit+0x65c>
		__ticks = 1;
    26e8:	fe 01       	movw	r30, r28
    26ea:	ef 56       	subi	r30, 0x6F	; 111
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24
    26f6:	64 c0       	rjmp	.+200    	; 0x27c0 <LCD_voidInit+0x724>
	else if (__tmp > 65535)
    26f8:	fe 01       	movw	r30, r28
    26fa:	ed 56       	subi	r30, 0x6D	; 109
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	60 81       	ld	r22, Z
    2700:	71 81       	ldd	r23, Z+1	; 0x01
    2702:	82 81       	ldd	r24, Z+2	; 0x02
    2704:	93 81       	ldd	r25, Z+3	; 0x03
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	3f ef       	ldi	r19, 0xFF	; 255
    270a:	4f e7       	ldi	r20, 0x7F	; 127
    270c:	57 e4       	ldi	r21, 0x47	; 71
    270e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2712:	18 16       	cp	r1, r24
    2714:	0c f0       	brlt	.+2      	; 0x2718 <LCD_voidInit+0x67c>
    2716:	43 c0       	rjmp	.+134    	; 0x279e <LCD_voidInit+0x702>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2718:	fe 01       	movw	r30, r28
    271a:	e9 56       	subi	r30, 0x69	; 105
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e2       	ldi	r20, 0x20	; 32
    272c:	51 e4       	ldi	r21, 0x41	; 65
    272e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	8e 01       	movw	r16, r28
    2738:	0f 56       	subi	r16, 0x6F	; 111
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	bc 01       	movw	r22, r24
    273e:	cd 01       	movw	r24, r26
    2740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	f8 01       	movw	r30, r16
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	80 83       	st	Z, r24
    274e:	1f c0       	rjmp	.+62     	; 0x278e <LCD_voidInit+0x6f2>
    2750:	fe 01       	movw	r30, r28
    2752:	e1 57       	subi	r30, 0x71	; 113
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	88 ec       	ldi	r24, 0xC8	; 200
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	91 83       	std	Z+1, r25	; 0x01
    275c:	80 83       	st	Z, r24
    275e:	fe 01       	movw	r30, r28
    2760:	e1 57       	subi	r30, 0x71	; 113
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 81       	ld	r24, Z
    2766:	91 81       	ldd	r25, Z+1	; 0x01
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <LCD_voidInit+0x6cc>
    276c:	fe 01       	movw	r30, r28
    276e:	e1 57       	subi	r30, 0x71	; 113
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2776:	de 01       	movw	r26, r28
    2778:	af 56       	subi	r26, 0x6F	; 111
    277a:	bf 4f       	sbci	r27, 0xFF	; 255
    277c:	fe 01       	movw	r30, r28
    277e:	ef 56       	subi	r30, 0x6F	; 111
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	11 96       	adiw	r26, 0x01	; 1
    278a:	9c 93       	st	X, r25
    278c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278e:	fe 01       	movw	r30, r28
    2790:	ef 56       	subi	r30, 0x6F	; 111
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	80 81       	ld	r24, Z
    2796:	91 81       	ldd	r25, Z+1	; 0x01
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	d1 f6       	brne	.-76     	; 0x2750 <LCD_voidInit+0x6b4>
    279c:	27 c0       	rjmp	.+78     	; 0x27ec <LCD_voidInit+0x750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	8e 01       	movw	r16, r28
    27a0:	0f 56       	subi	r16, 0x6F	; 111
    27a2:	1f 4f       	sbci	r17, 0xFF	; 255
    27a4:	fe 01       	movw	r30, r28
    27a6:	ed 56       	subi	r30, 0x6D	; 109
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	f8 01       	movw	r30, r16
    27bc:	91 83       	std	Z+1, r25	; 0x01
    27be:	80 83       	st	Z, r24
    27c0:	de 01       	movw	r26, r28
    27c2:	a3 57       	subi	r26, 0x73	; 115
    27c4:	bf 4f       	sbci	r27, 0xFF	; 255
    27c6:	fe 01       	movw	r30, r28
    27c8:	ef 56       	subi	r30, 0x6F	; 111
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	80 81       	ld	r24, Z
    27ce:	91 81       	ldd	r25, Z+1	; 0x01
    27d0:	8d 93       	st	X+, r24
    27d2:	9c 93       	st	X, r25
    27d4:	fe 01       	movw	r30, r28
    27d6:	e3 57       	subi	r30, 0x73	; 115
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	80 81       	ld	r24, Z
    27dc:	91 81       	ldd	r25, Z+1	; 0x01
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <LCD_voidInit+0x742>
    27e2:	fe 01       	movw	r30, r28
    27e4:	e3 57       	subi	r30, 0x73	; 115
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
			_delay_ms(2);

			u8CmdLoc = 0x04 | LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment << 1 |
    27ec:	fe 01       	movw	r30, r28
    27ee:	ea 53       	subi	r30, 0x3A	; 58
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 81       	ld	r24, Z
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	c9 01       	movw	r24, r18
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	82 0f       	add	r24, r18
    2800:	93 1f       	adc	r25, r19
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	fc 01       	movw	r30, r24
    280c:	e6 54       	subi	r30, 0x46	; 70
    280e:	fe 4f       	sbci	r31, 0xFE	; 254
    2810:	80 81       	ld	r24, Z
    2812:	82 95       	swap	r24
    2814:	86 95       	lsr	r24
    2816:	86 95       	lsr	r24
    2818:	83 70       	andi	r24, 0x03	; 3
    281a:	81 70       	andi	r24, 0x01	; 1
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	48 2f       	mov	r20, r24
    2826:	44 60       	ori	r20, 0x04	; 4
    2828:	fe 01       	movw	r30, r28
    282a:	ea 53       	subi	r30, 0x3A	; 58
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	80 81       	ld	r24, Z
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	c9 01       	movw	r24, r18
    2836:	88 0f       	add	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	82 0f       	add	r24, r18
    283c:	93 1f       	adc	r25, r19
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	fc 01       	movw	r30, r24
    2848:	e6 54       	subi	r30, 0x46	; 70
    284a:	fe 4f       	sbci	r31, 0xFE	; 254
    284c:	80 81       	ld	r24, Z
    284e:	88 1f       	adc	r24, r24
    2850:	88 27       	eor	r24, r24
    2852:	88 1f       	adc	r24, r24
    2854:	84 2b       	or	r24, r20
    2856:	fe 01       	movw	r30, r28
    2858:	eb 53       	subi	r30, 0x3B	; 59
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 83       	st	Z, r24
					   LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift << 0;

			LCD_enuWriteCmd(u8CntrLoc, u8CmdLoc);
    285e:	fe 01       	movw	r30, r28
    2860:	ea 53       	subi	r30, 0x3A	; 58
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	de 01       	movw	r26, r28
    2866:	ab 53       	subi	r26, 0x3B	; 59
    2868:	bf 4f       	sbci	r27, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	6c 91       	ld	r22, X
    286e:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    2872:	fe 01       	movw	r30, r28
    2874:	e7 57       	subi	r30, 0x77	; 119
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a0 e0       	ldi	r26, 0x00	; 0
    287e:	b0 e4       	ldi	r27, 0x40	; 64
    2880:	80 83       	st	Z, r24
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	a2 83       	std	Z+2, r26	; 0x02
    2886:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	8e 01       	movw	r16, r28
    288a:	0b 57       	subi	r16, 0x7B	; 123
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
    288e:	fe 01       	movw	r30, r28
    2890:	e7 57       	subi	r30, 0x77	; 119
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	60 81       	ld	r22, Z
    2896:	71 81       	ldd	r23, Z+1	; 0x01
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	4a ef       	ldi	r20, 0xFA	; 250
    28a2:	54 e4       	ldi	r21, 0x44	; 68
    28a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	f8 01       	movw	r30, r16
    28ae:	80 83       	st	Z, r24
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	a2 83       	std	Z+2, r26	; 0x02
    28b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28b6:	fe 01       	movw	r30, r28
    28b8:	eb 57       	subi	r30, 0x7B	; 123
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	60 81       	ld	r22, Z
    28be:	71 81       	ldd	r23, Z+1	; 0x01
    28c0:	82 81       	ldd	r24, Z+2	; 0x02
    28c2:	93 81       	ldd	r25, Z+3	; 0x03
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e8       	ldi	r20, 0x80	; 128
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28d0:	88 23       	and	r24, r24
    28d2:	44 f4       	brge	.+16     	; 0x28e4 <LCD_voidInit+0x848>
		__ticks = 1;
    28d4:	fe 01       	movw	r30, r28
    28d6:	ed 57       	subi	r30, 0x7D	; 125
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
    28e2:	64 c0       	rjmp	.+200    	; 0x29ac <LCD_voidInit+0x910>
	else if (__tmp > 65535)
    28e4:	fe 01       	movw	r30, r28
    28e6:	eb 57       	subi	r30, 0x7B	; 123
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	3f ef       	ldi	r19, 0xFF	; 255
    28f6:	4f e7       	ldi	r20, 0x7F	; 127
    28f8:	57 e4       	ldi	r21, 0x47	; 71
    28fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28fe:	18 16       	cp	r1, r24
    2900:	0c f0       	brlt	.+2      	; 0x2904 <LCD_voidInit+0x868>
    2902:	43 c0       	rjmp	.+134    	; 0x298a <LCD_voidInit+0x8ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2904:	fe 01       	movw	r30, r28
    2906:	e7 57       	subi	r30, 0x77	; 119
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	60 81       	ld	r22, Z
    290c:	71 81       	ldd	r23, Z+1	; 0x01
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	93 81       	ldd	r25, Z+3	; 0x03
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e2       	ldi	r20, 0x20	; 32
    2918:	51 e4       	ldi	r21, 0x41	; 65
    291a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	8e 01       	movw	r16, r28
    2924:	0d 57       	subi	r16, 0x7D	; 125
    2926:	1f 4f       	sbci	r17, 0xFF	; 255
    2928:	bc 01       	movw	r22, r24
    292a:	cd 01       	movw	r24, r26
    292c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	f8 01       	movw	r30, r16
    2936:	91 83       	std	Z+1, r25	; 0x01
    2938:	80 83       	st	Z, r24
    293a:	1f c0       	rjmp	.+62     	; 0x297a <LCD_voidInit+0x8de>
    293c:	fe 01       	movw	r30, r28
    293e:	ef 57       	subi	r30, 0x7F	; 127
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	88 ec       	ldi	r24, 0xC8	; 200
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
    294a:	fe 01       	movw	r30, r28
    294c:	ef 57       	subi	r30, 0x7F	; 127
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <LCD_voidInit+0x8b8>
    2958:	fe 01       	movw	r30, r28
    295a:	ef 57       	subi	r30, 0x7F	; 127
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2962:	de 01       	movw	r26, r28
    2964:	ad 57       	subi	r26, 0x7D	; 125
    2966:	bf 4f       	sbci	r27, 0xFF	; 255
    2968:	fe 01       	movw	r30, r28
    296a:	ed 57       	subi	r30, 0x7D	; 125
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 81       	ld	r24, Z
    2970:	91 81       	ldd	r25, Z+1	; 0x01
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	11 96       	adiw	r26, 0x01	; 1
    2976:	9c 93       	st	X, r25
    2978:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297a:	fe 01       	movw	r30, r28
    297c:	ed 57       	subi	r30, 0x7D	; 125
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 81       	ld	r24, Z
    2982:	91 81       	ldd	r25, Z+1	; 0x01
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	d1 f6       	brne	.-76     	; 0x293c <LCD_voidInit+0x8a0>
    2988:	7a c6       	rjmp	.+3316   	; 0x367e <LCD_voidInit+0x15e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298a:	8e 01       	movw	r16, r28
    298c:	0d 57       	subi	r16, 0x7D	; 125
    298e:	1f 4f       	sbci	r17, 0xFF	; 255
    2990:	fe 01       	movw	r30, r28
    2992:	eb 57       	subi	r30, 0x7B	; 123
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	60 81       	ld	r22, Z
    2998:	71 81       	ldd	r23, Z+1	; 0x01
    299a:	82 81       	ldd	r24, Z+2	; 0x02
    299c:	93 81       	ldd	r25, Z+3	; 0x03
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	f8 01       	movw	r30, r16
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	80 83       	st	Z, r24
    29ac:	de 01       	movw	r26, r28
    29ae:	a1 58       	subi	r26, 0x81	; 129
    29b0:	bf 4f       	sbci	r27, 0xFF	; 255
    29b2:	fe 01       	movw	r30, r28
    29b4:	ed 57       	subi	r30, 0x7D	; 125
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 81       	ld	r24, Z
    29ba:	91 81       	ldd	r25, Z+1	; 0x01
    29bc:	11 96       	adiw	r26, 0x01	; 1
    29be:	9c 93       	st	X, r25
    29c0:	8e 93       	st	-X, r24
    29c2:	fe 01       	movw	r30, r28
    29c4:	e1 58       	subi	r30, 0x81	; 129
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <LCD_voidInit+0x930>
    29d0:	fe 01       	movw	r30, r28
    29d2:	e1 58       	subi	r30, 0x81	; 129
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
    29da:	51 c6       	rjmp	.+3234   	; 0x367e <LCD_voidInit+0x15e2>
			_delay_ms(2);
		}
		else
		{
			LCD_enuWriteCmd(u8CntrLoc, 0x20);
    29dc:	fe 01       	movw	r30, r28
    29de:	ea 53       	subi	r30, 0x3A	; 58
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	80 81       	ld	r24, Z
    29e4:	60 e2       	ldi	r22, 0x20	; 32
    29e6:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    29ea:	fe 01       	movw	r30, r28
    29ec:	e5 58       	subi	r30, 0x85	; 133
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	a0 e8       	ldi	r26, 0x80	; 128
    29f6:	bf e3       	ldi	r27, 0x3F	; 63
    29f8:	80 83       	st	Z, r24
    29fa:	91 83       	std	Z+1, r25	; 0x01
    29fc:	a2 83       	std	Z+2, r26	; 0x02
    29fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a00:	8e 01       	movw	r16, r28
    2a02:	09 58       	subi	r16, 0x89	; 137
    2a04:	1f 4f       	sbci	r17, 0xFF	; 255
    2a06:	fe 01       	movw	r30, r28
    2a08:	e5 58       	subi	r30, 0x85	; 133
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	60 81       	ld	r22, Z
    2a0e:	71 81       	ldd	r23, Z+1	; 0x01
    2a10:	82 81       	ldd	r24, Z+2	; 0x02
    2a12:	93 81       	ldd	r25, Z+3	; 0x03
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	4a ef       	ldi	r20, 0xFA	; 250
    2a1a:	54 e4       	ldi	r21, 0x44	; 68
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	f8 01       	movw	r30, r16
    2a26:	80 83       	st	Z, r24
    2a28:	91 83       	std	Z+1, r25	; 0x01
    2a2a:	a2 83       	std	Z+2, r26	; 0x02
    2a2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a2e:	fe 01       	movw	r30, r28
    2a30:	e9 58       	subi	r30, 0x89	; 137
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	60 81       	ld	r22, Z
    2a36:	71 81       	ldd	r23, Z+1	; 0x01
    2a38:	82 81       	ldd	r24, Z+2	; 0x02
    2a3a:	93 81       	ldd	r25, Z+3	; 0x03
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e8       	ldi	r20, 0x80	; 128
    2a42:	5f e3       	ldi	r21, 0x3F	; 63
    2a44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a48:	88 23       	and	r24, r24
    2a4a:	44 f4       	brge	.+16     	; 0x2a5c <LCD_voidInit+0x9c0>
		__ticks = 1;
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	eb 58       	subi	r30, 0x8B	; 139
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	91 83       	std	Z+1, r25	; 0x01
    2a58:	80 83       	st	Z, r24
    2a5a:	64 c0       	rjmp	.+200    	; 0x2b24 <LCD_voidInit+0xa88>
	else if (__tmp > 65535)
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e9 58       	subi	r30, 0x89	; 137
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	60 81       	ld	r22, Z
    2a64:	71 81       	ldd	r23, Z+1	; 0x01
    2a66:	82 81       	ldd	r24, Z+2	; 0x02
    2a68:	93 81       	ldd	r25, Z+3	; 0x03
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	3f ef       	ldi	r19, 0xFF	; 255
    2a6e:	4f e7       	ldi	r20, 0x7F	; 127
    2a70:	57 e4       	ldi	r21, 0x47	; 71
    2a72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a76:	18 16       	cp	r1, r24
    2a78:	0c f0       	brlt	.+2      	; 0x2a7c <LCD_voidInit+0x9e0>
    2a7a:	43 c0       	rjmp	.+134    	; 0x2b02 <LCD_voidInit+0xa66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e5 58       	subi	r30, 0x85	; 133
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	60 81       	ld	r22, Z
    2a84:	71 81       	ldd	r23, Z+1	; 0x01
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e2       	ldi	r20, 0x20	; 32
    2a90:	51 e4       	ldi	r21, 0x41	; 65
    2a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	8e 01       	movw	r16, r28
    2a9c:	0b 58       	subi	r16, 0x8B	; 139
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	bc 01       	movw	r22, r24
    2aa2:	cd 01       	movw	r24, r26
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	f8 01       	movw	r30, r16
    2aae:	91 83       	std	Z+1, r25	; 0x01
    2ab0:	80 83       	st	Z, r24
    2ab2:	1f c0       	rjmp	.+62     	; 0x2af2 <LCD_voidInit+0xa56>
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	ed 58       	subi	r30, 0x8D	; 141
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	88 ec       	ldi	r24, 0xC8	; 200
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	80 83       	st	Z, r24
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	ed 58       	subi	r30, 0x8D	; 141
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	80 81       	ld	r24, Z
    2aca:	91 81       	ldd	r25, Z+1	; 0x01
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <LCD_voidInit+0xa30>
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	ed 58       	subi	r30, 0x8D	; 141
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ada:	de 01       	movw	r26, r28
    2adc:	ab 58       	subi	r26, 0x8B	; 139
    2ade:	bf 4f       	sbci	r27, 0xFF	; 255
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	eb 58       	subi	r30, 0x8B	; 139
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 81       	ld	r24, Z
    2ae8:	91 81       	ldd	r25, Z+1	; 0x01
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	11 96       	adiw	r26, 0x01	; 1
    2aee:	9c 93       	st	X, r25
    2af0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af2:	fe 01       	movw	r30, r28
    2af4:	eb 58       	subi	r30, 0x8B	; 139
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	80 81       	ld	r24, Z
    2afa:	91 81       	ldd	r25, Z+1	; 0x01
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	d1 f6       	brne	.-76     	; 0x2ab4 <LCD_voidInit+0xa18>
    2b00:	27 c0       	rjmp	.+78     	; 0x2b50 <LCD_voidInit+0xab4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b02:	8e 01       	movw	r16, r28
    2b04:	0b 58       	subi	r16, 0x8B	; 139
    2b06:	1f 4f       	sbci	r17, 0xFF	; 255
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e9 58       	subi	r30, 0x89	; 137
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	60 81       	ld	r22, Z
    2b10:	71 81       	ldd	r23, Z+1	; 0x01
    2b12:	82 81       	ldd	r24, Z+2	; 0x02
    2b14:	93 81       	ldd	r25, Z+3	; 0x03
    2b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	f8 01       	movw	r30, r16
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
    2b24:	de 01       	movw	r26, r28
    2b26:	af 58       	subi	r26, 0x8F	; 143
    2b28:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	eb 58       	subi	r30, 0x8B	; 139
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	8d 93       	st	X+, r24
    2b36:	9c 93       	st	X, r25
    2b38:	fe 01       	movw	r30, r28
    2b3a:	ef 58       	subi	r30, 0x8F	; 143
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	80 81       	ld	r24, Z
    2b40:	91 81       	ldd	r25, Z+1	; 0x01
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <LCD_voidInit+0xaa6>
    2b46:	fe 01       	movw	r30, r28
    2b48:	ef 58       	subi	r30, 0x8F	; 143
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	91 83       	std	Z+1, r25	; 0x01
    2b4e:	80 83       	st	Z, r24
			_delay_ms(1);
			LCD_enuWriteCmd(u8CntrLoc, 0x20);
    2b50:	fe 01       	movw	r30, r28
    2b52:	ea 53       	subi	r30, 0x3A	; 58
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	80 81       	ld	r24, Z
    2b58:	60 e2       	ldi	r22, 0x20	; 32
    2b5a:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e3 59       	subi	r30, 0x93	; 147
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	a0 e8       	ldi	r26, 0x80	; 128
    2b6a:	bf e3       	ldi	r27, 0x3F	; 63
    2b6c:	80 83       	st	Z, r24
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	a2 83       	std	Z+2, r26	; 0x02
    2b72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b74:	8e 01       	movw	r16, r28
    2b76:	07 59       	subi	r16, 0x97	; 151
    2b78:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e3 59       	subi	r30, 0x93	; 147
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	60 81       	ld	r22, Z
    2b82:	71 81       	ldd	r23, Z+1	; 0x01
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	93 81       	ldd	r25, Z+3	; 0x03
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	4a ef       	ldi	r20, 0xFA	; 250
    2b8e:	54 e4       	ldi	r21, 0x44	; 68
    2b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	f8 01       	movw	r30, r16
    2b9a:	80 83       	st	Z, r24
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	a2 83       	std	Z+2, r26	; 0x02
    2ba0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e7 59       	subi	r30, 0x97	; 151
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e8       	ldi	r20, 0x80	; 128
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bbc:	88 23       	and	r24, r24
    2bbe:	44 f4       	brge	.+16     	; 0x2bd0 <LCD_voidInit+0xb34>
		__ticks = 1;
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e9 59       	subi	r30, 0x99	; 153
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	91 83       	std	Z+1, r25	; 0x01
    2bcc:	80 83       	st	Z, r24
    2bce:	64 c0       	rjmp	.+200    	; 0x2c98 <LCD_voidInit+0xbfc>
	else if (__tmp > 65535)
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e7 59       	subi	r30, 0x97	; 151
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	3f ef       	ldi	r19, 0xFF	; 255
    2be2:	4f e7       	ldi	r20, 0x7F	; 127
    2be4:	57 e4       	ldi	r21, 0x47	; 71
    2be6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bea:	18 16       	cp	r1, r24
    2bec:	0c f0       	brlt	.+2      	; 0x2bf0 <LCD_voidInit+0xb54>
    2bee:	43 c0       	rjmp	.+134    	; 0x2c76 <LCD_voidInit+0xbda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	e3 59       	subi	r30, 0x93	; 147
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	60 81       	ld	r22, Z
    2bf8:	71 81       	ldd	r23, Z+1	; 0x01
    2bfa:	82 81       	ldd	r24, Z+2	; 0x02
    2bfc:	93 81       	ldd	r25, Z+3	; 0x03
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e2       	ldi	r20, 0x20	; 32
    2c04:	51 e4       	ldi	r21, 0x41	; 65
    2c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	8e 01       	movw	r16, r28
    2c10:	09 59       	subi	r16, 0x99	; 153
    2c12:	1f 4f       	sbci	r17, 0xFF	; 255
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	f8 01       	movw	r30, r16
    2c22:	91 83       	std	Z+1, r25	; 0x01
    2c24:	80 83       	st	Z, r24
    2c26:	1f c0       	rjmp	.+62     	; 0x2c66 <LCD_voidInit+0xbca>
    2c28:	fe 01       	movw	r30, r28
    2c2a:	eb 59       	subi	r30, 0x9B	; 155
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	88 ec       	ldi	r24, 0xC8	; 200
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	80 83       	st	Z, r24
    2c36:	fe 01       	movw	r30, r28
    2c38:	eb 59       	subi	r30, 0x9B	; 155
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	80 81       	ld	r24, Z
    2c3e:	91 81       	ldd	r25, Z+1	; 0x01
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <LCD_voidInit+0xba4>
    2c44:	fe 01       	movw	r30, r28
    2c46:	eb 59       	subi	r30, 0x9B	; 155
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	91 83       	std	Z+1, r25	; 0x01
    2c4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4e:	de 01       	movw	r26, r28
    2c50:	a9 59       	subi	r26, 0x99	; 153
    2c52:	bf 4f       	sbci	r27, 0xFF	; 255
    2c54:	fe 01       	movw	r30, r28
    2c56:	e9 59       	subi	r30, 0x99	; 153
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	80 81       	ld	r24, Z
    2c5c:	91 81       	ldd	r25, Z+1	; 0x01
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	11 96       	adiw	r26, 0x01	; 1
    2c62:	9c 93       	st	X, r25
    2c64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c66:	fe 01       	movw	r30, r28
    2c68:	e9 59       	subi	r30, 0x99	; 153
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	80 81       	ld	r24, Z
    2c6e:	91 81       	ldd	r25, Z+1	; 0x01
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	d1 f6       	brne	.-76     	; 0x2c28 <LCD_voidInit+0xb8c>
    2c74:	27 c0       	rjmp	.+78     	; 0x2cc4 <LCD_voidInit+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c76:	8e 01       	movw	r16, r28
    2c78:	09 59       	subi	r16, 0x99	; 153
    2c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	e7 59       	subi	r30, 0x97	; 151
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	93 81       	ldd	r25, Z+3	; 0x03
    2c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	f8 01       	movw	r30, r16
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	80 83       	st	Z, r24
    2c98:	de 01       	movw	r26, r28
    2c9a:	ad 59       	subi	r26, 0x9D	; 157
    2c9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e9 59       	subi	r30, 0x99	; 153
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	80 81       	ld	r24, Z
    2ca6:	91 81       	ldd	r25, Z+1	; 0x01
    2ca8:	8d 93       	st	X+, r24
    2caa:	9c 93       	st	X, r25
    2cac:	fe 01       	movw	r30, r28
    2cae:	ed 59       	subi	r30, 0x9D	; 157
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	80 81       	ld	r24, Z
    2cb4:	91 81       	ldd	r25, Z+1	; 0x01
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <LCD_voidInit+0xc1a>
    2cba:	fe 01       	movw	r30, r28
    2cbc:	ed 59       	subi	r30, 0x9D	; 157
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	91 83       	std	Z+1, r25	; 0x01
    2cc2:	80 83       	st	Z, r24
			_delay_ms(1);
			u8CmdLoc = 0x00 | LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine << 7 |
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	ea 53       	subi	r30, 0x3A	; 58
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	80 81       	ld	r24, Z
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	c9 01       	movw	r24, r18
    2cd2:	88 0f       	add	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	82 0f       	add	r24, r18
    2cd8:	93 1f       	adc	r25, r19
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	e6 54       	subi	r30, 0x46	; 70
    2ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce8:	80 81       	ld	r24, Z
    2cea:	81 70       	andi	r24, 0x01	; 1
    2cec:	88 2f       	mov	r24, r24
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	96 95       	lsr	r25
    2cf2:	98 2f       	mov	r25, r24
    2cf4:	88 27       	eor	r24, r24
    2cf6:	97 95       	ror	r25
    2cf8:	87 95       	ror	r24
    2cfa:	48 2f       	mov	r20, r24
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	ea 53       	subi	r30, 0x3A	; 58
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	80 81       	ld	r24, Z
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	c9 01       	movw	r24, r18
    2d0a:	88 0f       	add	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	82 0f       	add	r24, r18
    2d10:	93 1f       	adc	r25, r19
    2d12:	88 0f       	add	r24, r24
    2d14:	99 1f       	adc	r25, r25
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	e6 54       	subi	r30, 0x46	; 70
    2d1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d20:	80 81       	ld	r24, Z
    2d22:	86 95       	lsr	r24
    2d24:	81 70       	andi	r24, 0x01	; 1
    2d26:	88 2f       	mov	r24, r24
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	00 24       	eor	r0, r0
    2d2c:	96 95       	lsr	r25
    2d2e:	87 95       	ror	r24
    2d30:	07 94       	ror	r0
    2d32:	96 95       	lsr	r25
    2d34:	87 95       	ror	r24
    2d36:	07 94       	ror	r0
    2d38:	98 2f       	mov	r25, r24
    2d3a:	80 2d       	mov	r24, r0
    2d3c:	84 2b       	or	r24, r20
    2d3e:	fe 01       	movw	r30, r28
    2d40:	eb 53       	subi	r30, 0x3B	; 59
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	80 83       	st	Z, r24
					   LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont << 6;

			LCD_enuWriteCmd(u8CntrLoc, u8CmdLoc);
    2d46:	fe 01       	movw	r30, r28
    2d48:	ea 53       	subi	r30, 0x3A	; 58
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	de 01       	movw	r26, r28
    2d4e:	ab 53       	subi	r26, 0x3B	; 59
    2d50:	bf 4f       	sbci	r27, 0xFF	; 255
    2d52:	80 81       	ld	r24, Z
    2d54:	6c 91       	ld	r22, X
    2d56:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e1 5a       	subi	r30, 0xA1	; 161
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	a0 e8       	ldi	r26, 0x80	; 128
    2d66:	bf e3       	ldi	r27, 0x3F	; 63
    2d68:	80 83       	st	Z, r24
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	a2 83       	std	Z+2, r26	; 0x02
    2d6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d70:	8e 01       	movw	r16, r28
    2d72:	05 5a       	subi	r16, 0xA5	; 165
    2d74:	1f 4f       	sbci	r17, 0xFF	; 255
    2d76:	fe 01       	movw	r30, r28
    2d78:	e1 5a       	subi	r30, 0xA1	; 161
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	60 81       	ld	r22, Z
    2d7e:	71 81       	ldd	r23, Z+1	; 0x01
    2d80:	82 81       	ldd	r24, Z+2	; 0x02
    2d82:	93 81       	ldd	r25, Z+3	; 0x03
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	4a ef       	ldi	r20, 0xFA	; 250
    2d8a:	54 e4       	ldi	r21, 0x44	; 68
    2d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	f8 01       	movw	r30, r16
    2d96:	80 83       	st	Z, r24
    2d98:	91 83       	std	Z+1, r25	; 0x01
    2d9a:	a2 83       	std	Z+2, r26	; 0x02
    2d9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e5 5a       	subi	r30, 0xA5	; 165
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	60 81       	ld	r22, Z
    2da6:	71 81       	ldd	r23, Z+1	; 0x01
    2da8:	82 81       	ldd	r24, Z+2	; 0x02
    2daa:	93 81       	ldd	r25, Z+3	; 0x03
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e8       	ldi	r20, 0x80	; 128
    2db2:	5f e3       	ldi	r21, 0x3F	; 63
    2db4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2db8:	88 23       	and	r24, r24
    2dba:	44 f4       	brge	.+16     	; 0x2dcc <LCD_voidInit+0xd30>
		__ticks = 1;
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e7 5a       	subi	r30, 0xA7	; 167
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	91 83       	std	Z+1, r25	; 0x01
    2dc8:	80 83       	st	Z, r24
    2dca:	64 c0       	rjmp	.+200    	; 0x2e94 <LCD_voidInit+0xdf8>
	else if (__tmp > 65535)
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e5 5a       	subi	r30, 0xA5	; 165
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	60 81       	ld	r22, Z
    2dd4:	71 81       	ldd	r23, Z+1	; 0x01
    2dd6:	82 81       	ldd	r24, Z+2	; 0x02
    2dd8:	93 81       	ldd	r25, Z+3	; 0x03
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	3f ef       	ldi	r19, 0xFF	; 255
    2dde:	4f e7       	ldi	r20, 0x7F	; 127
    2de0:	57 e4       	ldi	r21, 0x47	; 71
    2de2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2de6:	18 16       	cp	r1, r24
    2de8:	0c f0       	brlt	.+2      	; 0x2dec <LCD_voidInit+0xd50>
    2dea:	43 c0       	rjmp	.+134    	; 0x2e72 <LCD_voidInit+0xdd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dec:	fe 01       	movw	r30, r28
    2dee:	e1 5a       	subi	r30, 0xA1	; 161
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	60 81       	ld	r22, Z
    2df4:	71 81       	ldd	r23, Z+1	; 0x01
    2df6:	82 81       	ldd	r24, Z+2	; 0x02
    2df8:	93 81       	ldd	r25, Z+3	; 0x03
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e2       	ldi	r20, 0x20	; 32
    2e00:	51 e4       	ldi	r21, 0x41	; 65
    2e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	8e 01       	movw	r16, r28
    2e0c:	07 5a       	subi	r16, 0xA7	; 167
    2e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e10:	bc 01       	movw	r22, r24
    2e12:	cd 01       	movw	r24, r26
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	91 83       	std	Z+1, r25	; 0x01
    2e20:	80 83       	st	Z, r24
    2e22:	1f c0       	rjmp	.+62     	; 0x2e62 <LCD_voidInit+0xdc6>
    2e24:	fe 01       	movw	r30, r28
    2e26:	e9 5a       	subi	r30, 0xA9	; 169
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	88 ec       	ldi	r24, 0xC8	; 200
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	91 83       	std	Z+1, r25	; 0x01
    2e30:	80 83       	st	Z, r24
    2e32:	fe 01       	movw	r30, r28
    2e34:	e9 5a       	subi	r30, 0xA9	; 169
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	80 81       	ld	r24, Z
    2e3a:	91 81       	ldd	r25, Z+1	; 0x01
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <LCD_voidInit+0xda0>
    2e40:	fe 01       	movw	r30, r28
    2e42:	e9 5a       	subi	r30, 0xA9	; 169
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	91 83       	std	Z+1, r25	; 0x01
    2e48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4a:	de 01       	movw	r26, r28
    2e4c:	a7 5a       	subi	r26, 0xA7	; 167
    2e4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e50:	fe 01       	movw	r30, r28
    2e52:	e7 5a       	subi	r30, 0xA7	; 167
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	80 81       	ld	r24, Z
    2e58:	91 81       	ldd	r25, Z+1	; 0x01
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	11 96       	adiw	r26, 0x01	; 1
    2e5e:	9c 93       	st	X, r25
    2e60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e62:	fe 01       	movw	r30, r28
    2e64:	e7 5a       	subi	r30, 0xA7	; 167
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	80 81       	ld	r24, Z
    2e6a:	91 81       	ldd	r25, Z+1	; 0x01
    2e6c:	00 97       	sbiw	r24, 0x00	; 0
    2e6e:	d1 f6       	brne	.-76     	; 0x2e24 <LCD_voidInit+0xd88>
    2e70:	27 c0       	rjmp	.+78     	; 0x2ec0 <LCD_voidInit+0xe24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e72:	8e 01       	movw	r16, r28
    2e74:	07 5a       	subi	r16, 0xA7	; 167
    2e76:	1f 4f       	sbci	r17, 0xFF	; 255
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e5 5a       	subi	r30, 0xA5	; 165
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	60 81       	ld	r22, Z
    2e80:	71 81       	ldd	r23, Z+1	; 0x01
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	f8 01       	movw	r30, r16
    2e90:	91 83       	std	Z+1, r25	; 0x01
    2e92:	80 83       	st	Z, r24
    2e94:	de 01       	movw	r26, r28
    2e96:	ab 5a       	subi	r26, 0xAB	; 171
    2e98:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e7 5a       	subi	r30, 0xA7	; 167
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	80 81       	ld	r24, Z
    2ea2:	91 81       	ldd	r25, Z+1	; 0x01
    2ea4:	8d 93       	st	X+, r24
    2ea6:	9c 93       	st	X, r25
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	eb 5a       	subi	r30, 0xAB	; 171
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 81       	ld	r24, Z
    2eb0:	91 81       	ldd	r25, Z+1	; 0x01
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <LCD_voidInit+0xe16>
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	eb 5a       	subi	r30, 0xAB	; 171
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	91 83       	std	Z+1, r25	; 0x01
    2ebe:	80 83       	st	Z, r24
			_delay_ms(1);

			LCD_enuWriteCmd(u8CntrLoc, 0x00);
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	ea 53       	subi	r30, 0x3A	; 58
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	60 e0       	ldi	r22, 0x00	; 0
    2eca:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    2ece:	fe 01       	movw	r30, r28
    2ed0:	ef 5a       	subi	r30, 0xAF	; 175
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	a0 e8       	ldi	r26, 0x80	; 128
    2eda:	bf e3       	ldi	r27, 0x3F	; 63
    2edc:	80 83       	st	Z, r24
    2ede:	91 83       	std	Z+1, r25	; 0x01
    2ee0:	a2 83       	std	Z+2, r26	; 0x02
    2ee2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee4:	8e 01       	movw	r16, r28
    2ee6:	03 5b       	subi	r16, 0xB3	; 179
    2ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eea:	fe 01       	movw	r30, r28
    2eec:	ef 5a       	subi	r30, 0xAF	; 175
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	60 81       	ld	r22, Z
    2ef2:	71 81       	ldd	r23, Z+1	; 0x01
    2ef4:	82 81       	ldd	r24, Z+2	; 0x02
    2ef6:	93 81       	ldd	r25, Z+3	; 0x03
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	4a ef       	ldi	r20, 0xFA	; 250
    2efe:	54 e4       	ldi	r21, 0x44	; 68
    2f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	f8 01       	movw	r30, r16
    2f0a:	80 83       	st	Z, r24
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	a2 83       	std	Z+2, r26	; 0x02
    2f10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f12:	fe 01       	movw	r30, r28
    2f14:	e3 5b       	subi	r30, 0xB3	; 179
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	60 81       	ld	r22, Z
    2f1a:	71 81       	ldd	r23, Z+1	; 0x01
    2f1c:	82 81       	ldd	r24, Z+2	; 0x02
    2f1e:	93 81       	ldd	r25, Z+3	; 0x03
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	40 e8       	ldi	r20, 0x80	; 128
    2f26:	5f e3       	ldi	r21, 0x3F	; 63
    2f28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f2c:	88 23       	and	r24, r24
    2f2e:	44 f4       	brge	.+16     	; 0x2f40 <LCD_voidInit+0xea4>
		__ticks = 1;
    2f30:	fe 01       	movw	r30, r28
    2f32:	e5 5b       	subi	r30, 0xB5	; 181
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	91 83       	std	Z+1, r25	; 0x01
    2f3c:	80 83       	st	Z, r24
    2f3e:	64 c0       	rjmp	.+200    	; 0x3008 <LCD_voidInit+0xf6c>
	else if (__tmp > 65535)
    2f40:	fe 01       	movw	r30, r28
    2f42:	e3 5b       	subi	r30, 0xB3	; 179
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	60 81       	ld	r22, Z
    2f48:	71 81       	ldd	r23, Z+1	; 0x01
    2f4a:	82 81       	ldd	r24, Z+2	; 0x02
    2f4c:	93 81       	ldd	r25, Z+3	; 0x03
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	3f ef       	ldi	r19, 0xFF	; 255
    2f52:	4f e7       	ldi	r20, 0x7F	; 127
    2f54:	57 e4       	ldi	r21, 0x47	; 71
    2f56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f5a:	18 16       	cp	r1, r24
    2f5c:	0c f0       	brlt	.+2      	; 0x2f60 <LCD_voidInit+0xec4>
    2f5e:	43 c0       	rjmp	.+134    	; 0x2fe6 <LCD_voidInit+0xf4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f60:	fe 01       	movw	r30, r28
    2f62:	ef 5a       	subi	r30, 0xAF	; 175
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	60 81       	ld	r22, Z
    2f68:	71 81       	ldd	r23, Z+1	; 0x01
    2f6a:	82 81       	ldd	r24, Z+2	; 0x02
    2f6c:	93 81       	ldd	r25, Z+3	; 0x03
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e2       	ldi	r20, 0x20	; 32
    2f74:	51 e4       	ldi	r21, 0x41	; 65
    2f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	8e 01       	movw	r16, r28
    2f80:	05 5b       	subi	r16, 0xB5	; 181
    2f82:	1f 4f       	sbci	r17, 0xFF	; 255
    2f84:	bc 01       	movw	r22, r24
    2f86:	cd 01       	movw	r24, r26
    2f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	f8 01       	movw	r30, r16
    2f92:	91 83       	std	Z+1, r25	; 0x01
    2f94:	80 83       	st	Z, r24
    2f96:	1f c0       	rjmp	.+62     	; 0x2fd6 <LCD_voidInit+0xf3a>
    2f98:	fe 01       	movw	r30, r28
    2f9a:	e7 5b       	subi	r30, 0xB7	; 183
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	88 ec       	ldi	r24, 0xC8	; 200
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	91 83       	std	Z+1, r25	; 0x01
    2fa4:	80 83       	st	Z, r24
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e7 5b       	subi	r30, 0xB7	; 183
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	80 81       	ld	r24, Z
    2fae:	91 81       	ldd	r25, Z+1	; 0x01
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <LCD_voidInit+0xf14>
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	e7 5b       	subi	r30, 0xB7	; 183
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	91 83       	std	Z+1, r25	; 0x01
    2fbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fbe:	de 01       	movw	r26, r28
    2fc0:	a5 5b       	subi	r26, 0xB5	; 181
    2fc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	e5 5b       	subi	r30, 0xB5	; 181
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	80 81       	ld	r24, Z
    2fcc:	91 81       	ldd	r25, Z+1	; 0x01
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	11 96       	adiw	r26, 0x01	; 1
    2fd2:	9c 93       	st	X, r25
    2fd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	e5 5b       	subi	r30, 0xB5	; 181
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	80 81       	ld	r24, Z
    2fde:	91 81       	ldd	r25, Z+1	; 0x01
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	d1 f6       	brne	.-76     	; 0x2f98 <LCD_voidInit+0xefc>
    2fe4:	27 c0       	rjmp	.+78     	; 0x3034 <LCD_voidInit+0xf98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe6:	8e 01       	movw	r16, r28
    2fe8:	05 5b       	subi	r16, 0xB5	; 181
    2fea:	1f 4f       	sbci	r17, 0xFF	; 255
    2fec:	fe 01       	movw	r30, r28
    2fee:	e3 5b       	subi	r30, 0xB3	; 179
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	60 81       	ld	r22, Z
    2ff4:	71 81       	ldd	r23, Z+1	; 0x01
    2ff6:	82 81       	ldd	r24, Z+2	; 0x02
    2ff8:	93 81       	ldd	r25, Z+3	; 0x03
    2ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	f8 01       	movw	r30, r16
    3004:	91 83       	std	Z+1, r25	; 0x01
    3006:	80 83       	st	Z, r24
    3008:	de 01       	movw	r26, r28
    300a:	a9 5b       	subi	r26, 0xB9	; 185
    300c:	bf 4f       	sbci	r27, 0xFF	; 255
    300e:	fe 01       	movw	r30, r28
    3010:	e5 5b       	subi	r30, 0xB5	; 181
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	80 81       	ld	r24, Z
    3016:	91 81       	ldd	r25, Z+1	; 0x01
    3018:	8d 93       	st	X+, r24
    301a:	9c 93       	st	X, r25
    301c:	fe 01       	movw	r30, r28
    301e:	e9 5b       	subi	r30, 0xB9	; 185
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	80 81       	ld	r24, Z
    3024:	91 81       	ldd	r25, Z+1	; 0x01
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	f1 f7       	brne	.-4      	; 0x3026 <LCD_voidInit+0xf8a>
    302a:	fe 01       	movw	r30, r28
    302c:	e9 5b       	subi	r30, 0xB9	; 185
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	91 83       	std	Z+1, r25	; 0x01
    3032:	80 83       	st	Z, r24
			_delay_ms(1);

			u8CmdLoc = 0x80 | LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display << 6 |
    3034:	fe 01       	movw	r30, r28
    3036:	ea 53       	subi	r30, 0x3A	; 58
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	80 81       	ld	r24, Z
    303c:	28 2f       	mov	r18, r24
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	c9 01       	movw	r24, r18
    3042:	88 0f       	add	r24, r24
    3044:	99 1f       	adc	r25, r25
    3046:	82 0f       	add	r24, r18
    3048:	93 1f       	adc	r25, r19
    304a:	88 0f       	add	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	88 0f       	add	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	fc 01       	movw	r30, r24
    3054:	e6 54       	subi	r30, 0x46	; 70
    3056:	fe 4f       	sbci	r31, 0xFE	; 254
    3058:	80 81       	ld	r24, Z
    305a:	86 95       	lsr	r24
    305c:	86 95       	lsr	r24
    305e:	81 70       	andi	r24, 0x01	; 1
    3060:	88 2f       	mov	r24, r24
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	00 24       	eor	r0, r0
    3066:	96 95       	lsr	r25
    3068:	87 95       	ror	r24
    306a:	07 94       	ror	r0
    306c:	96 95       	lsr	r25
    306e:	87 95       	ror	r24
    3070:	07 94       	ror	r0
    3072:	98 2f       	mov	r25, r24
    3074:	80 2d       	mov	r24, r0
    3076:	48 2f       	mov	r20, r24
    3078:	40 68       	ori	r20, 0x80	; 128
    307a:	fe 01       	movw	r30, r28
    307c:	ea 53       	subi	r30, 0x3A	; 58
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	80 81       	ld	r24, Z
    3082:	28 2f       	mov	r18, r24
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	c9 01       	movw	r24, r18
    3088:	88 0f       	add	r24, r24
    308a:	99 1f       	adc	r25, r25
    308c:	82 0f       	add	r24, r18
    308e:	93 1f       	adc	r25, r19
    3090:	88 0f       	add	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	fc 01       	movw	r30, r24
    309a:	e6 54       	subi	r30, 0x46	; 70
    309c:	fe 4f       	sbci	r31, 0xFE	; 254
    309e:	80 81       	ld	r24, Z
    30a0:	86 95       	lsr	r24
    30a2:	86 95       	lsr	r24
    30a4:	86 95       	lsr	r24
    30a6:	81 70       	andi	r24, 0x01	; 1
    30a8:	88 2f       	mov	r24, r24
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	88 0f       	add	r24, r24
    30ae:	99 1f       	adc	r25, r25
    30b0:	82 95       	swap	r24
    30b2:	92 95       	swap	r25
    30b4:	90 7f       	andi	r25, 0xF0	; 240
    30b6:	98 27       	eor	r25, r24
    30b8:	80 7f       	andi	r24, 0xF0	; 240
    30ba:	98 27       	eor	r25, r24
    30bc:	48 2b       	or	r20, r24
    30be:	fe 01       	movw	r30, r28
    30c0:	ea 53       	subi	r30, 0x3A	; 58
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	80 81       	ld	r24, Z
    30c6:	28 2f       	mov	r18, r24
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	c9 01       	movw	r24, r18
    30cc:	88 0f       	add	r24, r24
    30ce:	99 1f       	adc	r25, r25
    30d0:	82 0f       	add	r24, r18
    30d2:	93 1f       	adc	r25, r19
    30d4:	88 0f       	add	r24, r24
    30d6:	99 1f       	adc	r25, r25
    30d8:	88 0f       	add	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	fc 01       	movw	r30, r24
    30de:	e6 54       	subi	r30, 0x46	; 70
    30e0:	fe 4f       	sbci	r31, 0xFE	; 254
    30e2:	80 81       	ld	r24, Z
    30e4:	82 95       	swap	r24
    30e6:	8f 70       	andi	r24, 0x0F	; 15
    30e8:	81 70       	andi	r24, 0x01	; 1
    30ea:	88 2f       	mov	r24, r24
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	82 95       	swap	r24
    30f0:	92 95       	swap	r25
    30f2:	90 7f       	andi	r25, 0xF0	; 240
    30f4:	98 27       	eor	r25, r24
    30f6:	80 7f       	andi	r24, 0xF0	; 240
    30f8:	98 27       	eor	r25, r24
    30fa:	84 2b       	or	r24, r20
    30fc:	fe 01       	movw	r30, r28
    30fe:	eb 53       	subi	r30, 0x3B	; 59
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	80 83       	st	Z, r24
					   LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor << 5 |
					   LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink << 4;

			LCD_enuWriteCmd(u8CntrLoc, u8CmdLoc);
    3104:	fe 01       	movw	r30, r28
    3106:	ea 53       	subi	r30, 0x3A	; 58
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	de 01       	movw	r26, r28
    310c:	ab 53       	subi	r26, 0x3B	; 59
    310e:	bf 4f       	sbci	r27, 0xFF	; 255
    3110:	80 81       	ld	r24, Z
    3112:	6c 91       	ld	r22, X
    3114:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    3118:	fe 01       	movw	r30, r28
    311a:	ed 5b       	subi	r30, 0xBD	; 189
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	a0 e8       	ldi	r26, 0x80	; 128
    3124:	bf e3       	ldi	r27, 0x3F	; 63
    3126:	80 83       	st	Z, r24
    3128:	91 83       	std	Z+1, r25	; 0x01
    312a:	a2 83       	std	Z+2, r26	; 0x02
    312c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312e:	8e 01       	movw	r16, r28
    3130:	01 5c       	subi	r16, 0xC1	; 193
    3132:	1f 4f       	sbci	r17, 0xFF	; 255
    3134:	fe 01       	movw	r30, r28
    3136:	ed 5b       	subi	r30, 0xBD	; 189
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	60 81       	ld	r22, Z
    313c:	71 81       	ldd	r23, Z+1	; 0x01
    313e:	82 81       	ldd	r24, Z+2	; 0x02
    3140:	93 81       	ldd	r25, Z+3	; 0x03
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	4a ef       	ldi	r20, 0xFA	; 250
    3148:	54 e4       	ldi	r21, 0x44	; 68
    314a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	f8 01       	movw	r30, r16
    3154:	80 83       	st	Z, r24
    3156:	91 83       	std	Z+1, r25	; 0x01
    3158:	a2 83       	std	Z+2, r26	; 0x02
    315a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    315c:	fe 01       	movw	r30, r28
    315e:	ff 96       	adiw	r30, 0x3f	; 63
    3160:	60 81       	ld	r22, Z
    3162:	71 81       	ldd	r23, Z+1	; 0x01
    3164:	82 81       	ldd	r24, Z+2	; 0x02
    3166:	93 81       	ldd	r25, Z+3	; 0x03
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e8       	ldi	r20, 0x80	; 128
    316e:	5f e3       	ldi	r21, 0x3F	; 63
    3170:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3174:	88 23       	and	r24, r24
    3176:	2c f4       	brge	.+10     	; 0x3182 <LCD_voidInit+0x10e6>
		__ticks = 1;
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	9e af       	std	Y+62, r25	; 0x3e
    317e:	8d af       	std	Y+61, r24	; 0x3d
    3180:	46 c0       	rjmp	.+140    	; 0x320e <LCD_voidInit+0x1172>
	else if (__tmp > 65535)
    3182:	fe 01       	movw	r30, r28
    3184:	ff 96       	adiw	r30, 0x3f	; 63
    3186:	60 81       	ld	r22, Z
    3188:	71 81       	ldd	r23, Z+1	; 0x01
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	93 81       	ldd	r25, Z+3	; 0x03
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	3f ef       	ldi	r19, 0xFF	; 255
    3192:	4f e7       	ldi	r20, 0x7F	; 127
    3194:	57 e4       	ldi	r21, 0x47	; 71
    3196:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    319a:	18 16       	cp	r1, r24
    319c:	64 f5       	brge	.+88     	; 0x31f6 <LCD_voidInit+0x115a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319e:	fe 01       	movw	r30, r28
    31a0:	ed 5b       	subi	r30, 0xBD	; 189
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	60 81       	ld	r22, Z
    31a6:	71 81       	ldd	r23, Z+1	; 0x01
    31a8:	82 81       	ldd	r24, Z+2	; 0x02
    31aa:	93 81       	ldd	r25, Z+3	; 0x03
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e2       	ldi	r20, 0x20	; 32
    31b2:	51 e4       	ldi	r21, 0x41	; 65
    31b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	bc 01       	movw	r22, r24
    31be:	cd 01       	movw	r24, r26
    31c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	9e af       	std	Y+62, r25	; 0x3e
    31ca:	8d af       	std	Y+61, r24	; 0x3d
    31cc:	0f c0       	rjmp	.+30     	; 0x31ec <LCD_voidInit+0x1150>
    31ce:	88 ec       	ldi	r24, 0xC8	; 200
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	9c af       	std	Y+60, r25	; 0x3c
    31d4:	8b af       	std	Y+59, r24	; 0x3b
    31d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    31d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <LCD_voidInit+0x113e>
    31de:	9c af       	std	Y+60, r25	; 0x3c
    31e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    31e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	9e af       	std	Y+62, r25	; 0x3e
    31ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    31ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	69 f7       	brne	.-38     	; 0x31ce <LCD_voidInit+0x1132>
    31f4:	16 c0       	rjmp	.+44     	; 0x3222 <LCD_voidInit+0x1186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f6:	fe 01       	movw	r30, r28
    31f8:	ff 96       	adiw	r30, 0x3f	; 63
    31fa:	60 81       	ld	r22, Z
    31fc:	71 81       	ldd	r23, Z+1	; 0x01
    31fe:	82 81       	ldd	r24, Z+2	; 0x02
    3200:	93 81       	ldd	r25, Z+3	; 0x03
    3202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	9e af       	std	Y+62, r25	; 0x3e
    320c:	8d af       	std	Y+61, r24	; 0x3d
    320e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3210:	9e ad       	ldd	r25, Y+62	; 0x3e
    3212:	9a af       	std	Y+58, r25	; 0x3a
    3214:	89 af       	std	Y+57, r24	; 0x39
    3216:	89 ad       	ldd	r24, Y+57	; 0x39
    3218:	9a ad       	ldd	r25, Y+58	; 0x3a
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	f1 f7       	brne	.-4      	; 0x321a <LCD_voidInit+0x117e>
    321e:	9a af       	std	Y+58, r25	; 0x3a
    3220:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1);

			LCD_enuWriteCmd(u8CntrLoc, 0x00);
    3222:	fe 01       	movw	r30, r28
    3224:	ea 53       	subi	r30, 0x3A	; 58
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	80 81       	ld	r24, Z
    322a:	60 e0       	ldi	r22, 0x00	; 0
    322c:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	a0 e8       	ldi	r26, 0x80	; 128
    3236:	bf e3       	ldi	r27, 0x3F	; 63
    3238:	8d ab       	std	Y+53, r24	; 0x35
    323a:	9e ab       	std	Y+54, r25	; 0x36
    323c:	af ab       	std	Y+55, r26	; 0x37
    323e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3240:	6d a9       	ldd	r22, Y+53	; 0x35
    3242:	7e a9       	ldd	r23, Y+54	; 0x36
    3244:	8f a9       	ldd	r24, Y+55	; 0x37
    3246:	98 ad       	ldd	r25, Y+56	; 0x38
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	4a ef       	ldi	r20, 0xFA	; 250
    324e:	54 e4       	ldi	r21, 0x44	; 68
    3250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	89 ab       	std	Y+49, r24	; 0x31
    325a:	9a ab       	std	Y+50, r25	; 0x32
    325c:	ab ab       	std	Y+51, r26	; 0x33
    325e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3260:	69 a9       	ldd	r22, Y+49	; 0x31
    3262:	7a a9       	ldd	r23, Y+50	; 0x32
    3264:	8b a9       	ldd	r24, Y+51	; 0x33
    3266:	9c a9       	ldd	r25, Y+52	; 0x34
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	40 e8       	ldi	r20, 0x80	; 128
    326e:	5f e3       	ldi	r21, 0x3F	; 63
    3270:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3274:	88 23       	and	r24, r24
    3276:	2c f4       	brge	.+10     	; 0x3282 <LCD_voidInit+0x11e6>
		__ticks = 1;
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	98 ab       	std	Y+48, r25	; 0x30
    327e:	8f a7       	std	Y+47, r24	; 0x2f
    3280:	3f c0       	rjmp	.+126    	; 0x3300 <LCD_voidInit+0x1264>
	else if (__tmp > 65535)
    3282:	69 a9       	ldd	r22, Y+49	; 0x31
    3284:	7a a9       	ldd	r23, Y+50	; 0x32
    3286:	8b a9       	ldd	r24, Y+51	; 0x33
    3288:	9c a9       	ldd	r25, Y+52	; 0x34
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	3f ef       	ldi	r19, 0xFF	; 255
    328e:	4f e7       	ldi	r20, 0x7F	; 127
    3290:	57 e4       	ldi	r21, 0x47	; 71
    3292:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3296:	18 16       	cp	r1, r24
    3298:	4c f5       	brge	.+82     	; 0x32ec <LCD_voidInit+0x1250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    329a:	6d a9       	ldd	r22, Y+53	; 0x35
    329c:	7e a9       	ldd	r23, Y+54	; 0x36
    329e:	8f a9       	ldd	r24, Y+55	; 0x37
    32a0:	98 ad       	ldd	r25, Y+56	; 0x38
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	40 e2       	ldi	r20, 0x20	; 32
    32a8:	51 e4       	ldi	r21, 0x41	; 65
    32aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	bc 01       	movw	r22, r24
    32b4:	cd 01       	movw	r24, r26
    32b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	98 ab       	std	Y+48, r25	; 0x30
    32c0:	8f a7       	std	Y+47, r24	; 0x2f
    32c2:	0f c0       	rjmp	.+30     	; 0x32e2 <LCD_voidInit+0x1246>
    32c4:	88 ec       	ldi	r24, 0xC8	; 200
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	9e a7       	std	Y+46, r25	; 0x2e
    32ca:	8d a7       	std	Y+45, r24	; 0x2d
    32cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    32ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <LCD_voidInit+0x1234>
    32d4:	9e a7       	std	Y+46, r25	; 0x2e
    32d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    32da:	98 a9       	ldd	r25, Y+48	; 0x30
    32dc:	01 97       	sbiw	r24, 0x01	; 1
    32de:	98 ab       	std	Y+48, r25	; 0x30
    32e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32e4:	98 a9       	ldd	r25, Y+48	; 0x30
    32e6:	00 97       	sbiw	r24, 0x00	; 0
    32e8:	69 f7       	brne	.-38     	; 0x32c4 <LCD_voidInit+0x1228>
    32ea:	14 c0       	rjmp	.+40     	; 0x3314 <LCD_voidInit+0x1278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ec:	69 a9       	ldd	r22, Y+49	; 0x31
    32ee:	7a a9       	ldd	r23, Y+50	; 0x32
    32f0:	8b a9       	ldd	r24, Y+51	; 0x33
    32f2:	9c a9       	ldd	r25, Y+52	; 0x34
    32f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	98 ab       	std	Y+48, r25	; 0x30
    32fe:	8f a7       	std	Y+47, r24	; 0x2f
    3300:	8f a5       	ldd	r24, Y+47	; 0x2f
    3302:	98 a9       	ldd	r25, Y+48	; 0x30
    3304:	9c a7       	std	Y+44, r25	; 0x2c
    3306:	8b a7       	std	Y+43, r24	; 0x2b
    3308:	8b a5       	ldd	r24, Y+43	; 0x2b
    330a:	9c a5       	ldd	r25, Y+44	; 0x2c
    330c:	01 97       	sbiw	r24, 0x01	; 1
    330e:	f1 f7       	brne	.-4      	; 0x330c <LCD_voidInit+0x1270>
    3310:	9c a7       	std	Y+44, r25	; 0x2c
    3312:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			LCD_enuWriteCmd(u8CntrLoc, 0x10);
    3314:	fe 01       	movw	r30, r28
    3316:	ea 53       	subi	r30, 0x3A	; 58
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	80 81       	ld	r24, Z
    331c:	60 e1       	ldi	r22, 0x10	; 16
    331e:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	a0 e8       	ldi	r26, 0x80	; 128
    3328:	bf e3       	ldi	r27, 0x3F	; 63
    332a:	8f a3       	std	Y+39, r24	; 0x27
    332c:	98 a7       	std	Y+40, r25	; 0x28
    332e:	a9 a7       	std	Y+41, r26	; 0x29
    3330:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3332:	6f a1       	ldd	r22, Y+39	; 0x27
    3334:	78 a5       	ldd	r23, Y+40	; 0x28
    3336:	89 a5       	ldd	r24, Y+41	; 0x29
    3338:	9a a5       	ldd	r25, Y+42	; 0x2a
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	4a ef       	ldi	r20, 0xFA	; 250
    3340:	54 e4       	ldi	r21, 0x44	; 68
    3342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	8b a3       	std	Y+35, r24	; 0x23
    334c:	9c a3       	std	Y+36, r25	; 0x24
    334e:	ad a3       	std	Y+37, r26	; 0x25
    3350:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3352:	6b a1       	ldd	r22, Y+35	; 0x23
    3354:	7c a1       	ldd	r23, Y+36	; 0x24
    3356:	8d a1       	ldd	r24, Y+37	; 0x25
    3358:	9e a1       	ldd	r25, Y+38	; 0x26
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e8       	ldi	r20, 0x80	; 128
    3360:	5f e3       	ldi	r21, 0x3F	; 63
    3362:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3366:	88 23       	and	r24, r24
    3368:	2c f4       	brge	.+10     	; 0x3374 <LCD_voidInit+0x12d8>
		__ticks = 1;
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	9a a3       	std	Y+34, r25	; 0x22
    3370:	89 a3       	std	Y+33, r24	; 0x21
    3372:	3f c0       	rjmp	.+126    	; 0x33f2 <LCD_voidInit+0x1356>
	else if (__tmp > 65535)
    3374:	6b a1       	ldd	r22, Y+35	; 0x23
    3376:	7c a1       	ldd	r23, Y+36	; 0x24
    3378:	8d a1       	ldd	r24, Y+37	; 0x25
    337a:	9e a1       	ldd	r25, Y+38	; 0x26
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	3f ef       	ldi	r19, 0xFF	; 255
    3380:	4f e7       	ldi	r20, 0x7F	; 127
    3382:	57 e4       	ldi	r21, 0x47	; 71
    3384:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3388:	18 16       	cp	r1, r24
    338a:	4c f5       	brge	.+82     	; 0x33de <LCD_voidInit+0x1342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338c:	6f a1       	ldd	r22, Y+39	; 0x27
    338e:	78 a5       	ldd	r23, Y+40	; 0x28
    3390:	89 a5       	ldd	r24, Y+41	; 0x29
    3392:	9a a5       	ldd	r25, Y+42	; 0x2a
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	40 e2       	ldi	r20, 0x20	; 32
    339a:	51 e4       	ldi	r21, 0x41	; 65
    339c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	bc 01       	movw	r22, r24
    33a6:	cd 01       	movw	r24, r26
    33a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	9a a3       	std	Y+34, r25	; 0x22
    33b2:	89 a3       	std	Y+33, r24	; 0x21
    33b4:	0f c0       	rjmp	.+30     	; 0x33d4 <LCD_voidInit+0x1338>
    33b6:	88 ec       	ldi	r24, 0xC8	; 200
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	98 a3       	std	Y+32, r25	; 0x20
    33bc:	8f 8f       	std	Y+31, r24	; 0x1f
    33be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33c0:	98 a1       	ldd	r25, Y+32	; 0x20
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <LCD_voidInit+0x1326>
    33c6:	98 a3       	std	Y+32, r25	; 0x20
    33c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ca:	89 a1       	ldd	r24, Y+33	; 0x21
    33cc:	9a a1       	ldd	r25, Y+34	; 0x22
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	9a a3       	std	Y+34, r25	; 0x22
    33d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d4:	89 a1       	ldd	r24, Y+33	; 0x21
    33d6:	9a a1       	ldd	r25, Y+34	; 0x22
    33d8:	00 97       	sbiw	r24, 0x00	; 0
    33da:	69 f7       	brne	.-38     	; 0x33b6 <LCD_voidInit+0x131a>
    33dc:	14 c0       	rjmp	.+40     	; 0x3406 <LCD_voidInit+0x136a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33de:	6b a1       	ldd	r22, Y+35	; 0x23
    33e0:	7c a1       	ldd	r23, Y+36	; 0x24
    33e2:	8d a1       	ldd	r24, Y+37	; 0x25
    33e4:	9e a1       	ldd	r25, Y+38	; 0x26
    33e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	9a a3       	std	Y+34, r25	; 0x22
    33f0:	89 a3       	std	Y+33, r24	; 0x21
    33f2:	89 a1       	ldd	r24, Y+33	; 0x21
    33f4:	9a a1       	ldd	r25, Y+34	; 0x22
    33f6:	9e 8f       	std	Y+30, r25	; 0x1e
    33f8:	8d 8f       	std	Y+29, r24	; 0x1d
    33fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	f1 f7       	brne	.-4      	; 0x33fe <LCD_voidInit+0x1362>
    3402:	9e 8f       	std	Y+30, r25	; 0x1e
    3404:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);

			LCD_enuWriteCmd(u8CntrLoc, 0x00);
    3406:	fe 01       	movw	r30, r28
    3408:	ea 53       	subi	r30, 0x3A	; 58
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	80 81       	ld	r24, Z
    340e:	60 e0       	ldi	r22, 0x00	; 0
    3410:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	a0 e8       	ldi	r26, 0x80	; 128
    341a:	bf e3       	ldi	r27, 0x3F	; 63
    341c:	89 8f       	std	Y+25, r24	; 0x19
    341e:	9a 8f       	std	Y+26, r25	; 0x1a
    3420:	ab 8f       	std	Y+27, r26	; 0x1b
    3422:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3424:	69 8d       	ldd	r22, Y+25	; 0x19
    3426:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3428:	8b 8d       	ldd	r24, Y+27	; 0x1b
    342a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	4a ef       	ldi	r20, 0xFA	; 250
    3432:	54 e4       	ldi	r21, 0x44	; 68
    3434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	8d 8b       	std	Y+21, r24	; 0x15
    343e:	9e 8b       	std	Y+22, r25	; 0x16
    3440:	af 8b       	std	Y+23, r26	; 0x17
    3442:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3444:	6d 89       	ldd	r22, Y+21	; 0x15
    3446:	7e 89       	ldd	r23, Y+22	; 0x16
    3448:	8f 89       	ldd	r24, Y+23	; 0x17
    344a:	98 8d       	ldd	r25, Y+24	; 0x18
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	40 e8       	ldi	r20, 0x80	; 128
    3452:	5f e3       	ldi	r21, 0x3F	; 63
    3454:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3458:	88 23       	and	r24, r24
    345a:	2c f4       	brge	.+10     	; 0x3466 <LCD_voidInit+0x13ca>
		__ticks = 1;
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	9c 8b       	std	Y+20, r25	; 0x14
    3462:	8b 8b       	std	Y+19, r24	; 0x13
    3464:	3f c0       	rjmp	.+126    	; 0x34e4 <LCD_voidInit+0x1448>
	else if (__tmp > 65535)
    3466:	6d 89       	ldd	r22, Y+21	; 0x15
    3468:	7e 89       	ldd	r23, Y+22	; 0x16
    346a:	8f 89       	ldd	r24, Y+23	; 0x17
    346c:	98 8d       	ldd	r25, Y+24	; 0x18
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	3f ef       	ldi	r19, 0xFF	; 255
    3472:	4f e7       	ldi	r20, 0x7F	; 127
    3474:	57 e4       	ldi	r21, 0x47	; 71
    3476:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    347a:	18 16       	cp	r1, r24
    347c:	4c f5       	brge	.+82     	; 0x34d0 <LCD_voidInit+0x1434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347e:	69 8d       	ldd	r22, Y+25	; 0x19
    3480:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3482:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3484:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 e2       	ldi	r20, 0x20	; 32
    348c:	51 e4       	ldi	r21, 0x41	; 65
    348e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	bc 01       	movw	r22, r24
    3498:	cd 01       	movw	r24, r26
    349a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	9c 8b       	std	Y+20, r25	; 0x14
    34a4:	8b 8b       	std	Y+19, r24	; 0x13
    34a6:	0f c0       	rjmp	.+30     	; 0x34c6 <LCD_voidInit+0x142a>
    34a8:	88 ec       	ldi	r24, 0xC8	; 200
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	9a 8b       	std	Y+18, r25	; 0x12
    34ae:	89 8b       	std	Y+17, r24	; 0x11
    34b0:	89 89       	ldd	r24, Y+17	; 0x11
    34b2:	9a 89       	ldd	r25, Y+18	; 0x12
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	f1 f7       	brne	.-4      	; 0x34b4 <LCD_voidInit+0x1418>
    34b8:	9a 8b       	std	Y+18, r25	; 0x12
    34ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34bc:	8b 89       	ldd	r24, Y+19	; 0x13
    34be:	9c 89       	ldd	r25, Y+20	; 0x14
    34c0:	01 97       	sbiw	r24, 0x01	; 1
    34c2:	9c 8b       	std	Y+20, r25	; 0x14
    34c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c6:	8b 89       	ldd	r24, Y+19	; 0x13
    34c8:	9c 89       	ldd	r25, Y+20	; 0x14
    34ca:	00 97       	sbiw	r24, 0x00	; 0
    34cc:	69 f7       	brne	.-38     	; 0x34a8 <LCD_voidInit+0x140c>
    34ce:	14 c0       	rjmp	.+40     	; 0x34f8 <LCD_voidInit+0x145c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d0:	6d 89       	ldd	r22, Y+21	; 0x15
    34d2:	7e 89       	ldd	r23, Y+22	; 0x16
    34d4:	8f 89       	ldd	r24, Y+23	; 0x17
    34d6:	98 8d       	ldd	r25, Y+24	; 0x18
    34d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	9c 8b       	std	Y+20, r25	; 0x14
    34e2:	8b 8b       	std	Y+19, r24	; 0x13
    34e4:	8b 89       	ldd	r24, Y+19	; 0x13
    34e6:	9c 89       	ldd	r25, Y+20	; 0x14
    34e8:	98 8b       	std	Y+16, r25	; 0x10
    34ea:	8f 87       	std	Y+15, r24	; 0x0f
    34ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ee:	98 89       	ldd	r25, Y+16	; 0x10
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	f1 f7       	brne	.-4      	; 0x34f0 <LCD_voidInit+0x1454>
    34f4:	98 8b       	std	Y+16, r25	; 0x10
    34f6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);

			u8CmdLoc = 0x40 | LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment << 5 |
    34f8:	fe 01       	movw	r30, r28
    34fa:	ea 53       	subi	r30, 0x3A	; 58
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	80 81       	ld	r24, Z
    3500:	28 2f       	mov	r18, r24
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	c9 01       	movw	r24, r18
    3506:	88 0f       	add	r24, r24
    3508:	99 1f       	adc	r25, r25
    350a:	82 0f       	add	r24, r18
    350c:	93 1f       	adc	r25, r19
    350e:	88 0f       	add	r24, r24
    3510:	99 1f       	adc	r25, r25
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	fc 01       	movw	r30, r24
    3518:	e6 54       	subi	r30, 0x46	; 70
    351a:	fe 4f       	sbci	r31, 0xFE	; 254
    351c:	80 81       	ld	r24, Z
    351e:	82 95       	swap	r24
    3520:	86 95       	lsr	r24
    3522:	86 95       	lsr	r24
    3524:	83 70       	andi	r24, 0x03	; 3
    3526:	81 70       	andi	r24, 0x01	; 1
    3528:	88 2f       	mov	r24, r24
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	88 0f       	add	r24, r24
    352e:	99 1f       	adc	r25, r25
    3530:	82 95       	swap	r24
    3532:	92 95       	swap	r25
    3534:	90 7f       	andi	r25, 0xF0	; 240
    3536:	98 27       	eor	r25, r24
    3538:	80 7f       	andi	r24, 0xF0	; 240
    353a:	98 27       	eor	r25, r24
    353c:	48 2f       	mov	r20, r24
    353e:	40 64       	ori	r20, 0x40	; 64
    3540:	fe 01       	movw	r30, r28
    3542:	ea 53       	subi	r30, 0x3A	; 58
    3544:	ff 4f       	sbci	r31, 0xFF	; 255
    3546:	80 81       	ld	r24, Z
    3548:	28 2f       	mov	r18, r24
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	c9 01       	movw	r24, r18
    354e:	88 0f       	add	r24, r24
    3550:	99 1f       	adc	r25, r25
    3552:	82 0f       	add	r24, r18
    3554:	93 1f       	adc	r25, r19
    3556:	88 0f       	add	r24, r24
    3558:	99 1f       	adc	r25, r25
    355a:	88 0f       	add	r24, r24
    355c:	99 1f       	adc	r25, r25
    355e:	fc 01       	movw	r30, r24
    3560:	e6 54       	subi	r30, 0x46	; 70
    3562:	fe 4f       	sbci	r31, 0xFE	; 254
    3564:	80 81       	ld	r24, Z
    3566:	88 1f       	adc	r24, r24
    3568:	88 27       	eor	r24, r24
    356a:	88 1f       	adc	r24, r24
    356c:	88 2f       	mov	r24, r24
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	82 95       	swap	r24
    3572:	92 95       	swap	r25
    3574:	90 7f       	andi	r25, 0xF0	; 240
    3576:	98 27       	eor	r25, r24
    3578:	80 7f       	andi	r24, 0xF0	; 240
    357a:	98 27       	eor	r25, r24
    357c:	84 2b       	or	r24, r20
    357e:	fe 01       	movw	r30, r28
    3580:	eb 53       	subi	r30, 0x3B	; 59
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	80 83       	st	Z, r24
					   LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift << 4;

			LCD_enuWriteCmd(u8CntrLoc, u8CmdLoc);
    3586:	fe 01       	movw	r30, r28
    3588:	ea 53       	subi	r30, 0x3A	; 58
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	de 01       	movw	r26, r28
    358e:	ab 53       	subi	r26, 0x3B	; 59
    3590:	bf 4f       	sbci	r27, 0xFF	; 255
    3592:	80 81       	ld	r24, Z
    3594:	6c 91       	ld	r22, X
    3596:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	a0 e8       	ldi	r26, 0x80	; 128
    35a0:	bf e3       	ldi	r27, 0x3F	; 63
    35a2:	8b 87       	std	Y+11, r24	; 0x0b
    35a4:	9c 87       	std	Y+12, r25	; 0x0c
    35a6:	ad 87       	std	Y+13, r26	; 0x0d
    35a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    35ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	4a ef       	ldi	r20, 0xFA	; 250
    35b8:	54 e4       	ldi	r21, 0x44	; 68
    35ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	8f 83       	std	Y+7, r24	; 0x07
    35c4:	98 87       	std	Y+8, r25	; 0x08
    35c6:	a9 87       	std	Y+9, r26	; 0x09
    35c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35ca:	6f 81       	ldd	r22, Y+7	; 0x07
    35cc:	78 85       	ldd	r23, Y+8	; 0x08
    35ce:	89 85       	ldd	r24, Y+9	; 0x09
    35d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	40 e8       	ldi	r20, 0x80	; 128
    35d8:	5f e3       	ldi	r21, 0x3F	; 63
    35da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35de:	88 23       	and	r24, r24
    35e0:	2c f4       	brge	.+10     	; 0x35ec <LCD_voidInit+0x1550>
		__ticks = 1;
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
    35ea:	3f c0       	rjmp	.+126    	; 0x366a <LCD_voidInit+0x15ce>
	else if (__tmp > 65535)
    35ec:	6f 81       	ldd	r22, Y+7	; 0x07
    35ee:	78 85       	ldd	r23, Y+8	; 0x08
    35f0:	89 85       	ldd	r24, Y+9	; 0x09
    35f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	3f ef       	ldi	r19, 0xFF	; 255
    35f8:	4f e7       	ldi	r20, 0x7F	; 127
    35fa:	57 e4       	ldi	r21, 0x47	; 71
    35fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3600:	18 16       	cp	r1, r24
    3602:	4c f5       	brge	.+82     	; 0x3656 <LCD_voidInit+0x15ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3604:	6b 85       	ldd	r22, Y+11	; 0x0b
    3606:	7c 85       	ldd	r23, Y+12	; 0x0c
    3608:	8d 85       	ldd	r24, Y+13	; 0x0d
    360a:	9e 85       	ldd	r25, Y+14	; 0x0e
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e2       	ldi	r20, 0x20	; 32
    3612:	51 e4       	ldi	r21, 0x41	; 65
    3614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	bc 01       	movw	r22, r24
    361e:	cd 01       	movw	r24, r26
    3620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	9e 83       	std	Y+6, r25	; 0x06
    362a:	8d 83       	std	Y+5, r24	; 0x05
    362c:	0f c0       	rjmp	.+30     	; 0x364c <LCD_voidInit+0x15b0>
    362e:	88 ec       	ldi	r24, 0xC8	; 200
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	9c 83       	std	Y+4, r25	; 0x04
    3634:	8b 83       	std	Y+3, r24	; 0x03
    3636:	8b 81       	ldd	r24, Y+3	; 0x03
    3638:	9c 81       	ldd	r25, Y+4	; 0x04
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	f1 f7       	brne	.-4      	; 0x363a <LCD_voidInit+0x159e>
    363e:	9c 83       	std	Y+4, r25	; 0x04
    3640:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3642:	8d 81       	ldd	r24, Y+5	; 0x05
    3644:	9e 81       	ldd	r25, Y+6	; 0x06
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	9e 83       	std	Y+6, r25	; 0x06
    364a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    364c:	8d 81       	ldd	r24, Y+5	; 0x05
    364e:	9e 81       	ldd	r25, Y+6	; 0x06
    3650:	00 97       	sbiw	r24, 0x00	; 0
    3652:	69 f7       	brne	.-38     	; 0x362e <LCD_voidInit+0x1592>
    3654:	14 c0       	rjmp	.+40     	; 0x367e <LCD_voidInit+0x15e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3656:	6f 81       	ldd	r22, Y+7	; 0x07
    3658:	78 85       	ldd	r23, Y+8	; 0x08
    365a:	89 85       	ldd	r24, Y+9	; 0x09
    365c:	9a 85       	ldd	r25, Y+10	; 0x0a
    365e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	9e 83       	std	Y+6, r25	; 0x06
    3668:	8d 83       	std	Y+5, r24	; 0x05
    366a:	8d 81       	ldd	r24, Y+5	; 0x05
    366c:	9e 81       	ldd	r25, Y+6	; 0x06
    366e:	9a 83       	std	Y+2, r25	; 0x02
    3670:	89 83       	std	Y+1, r24	; 0x01
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	01 97       	sbiw	r24, 0x01	; 1
    3678:	f1 f7       	brne	.-4      	; 0x3676 <LCD_voidInit+0x15da>
    367a:	9a 83       	std	Y+2, r25	; 0x02
    367c:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void)
{
	uint8 u8CntrLoc;
	uint8 u8CmdLoc;
	for (u8CntrLoc = 0; u8CntrLoc < LCD_MAX_NUM; u8CntrLoc++)
    367e:	de 01       	movw	r26, r28
    3680:	aa 53       	subi	r26, 0x3A	; 58
    3682:	bf 4f       	sbci	r27, 0xFF	; 255
    3684:	fe 01       	movw	r30, r28
    3686:	ea 53       	subi	r30, 0x3A	; 58
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	80 81       	ld	r24, Z
    368c:	8f 5f       	subi	r24, 0xFF	; 255
    368e:	8c 93       	st	X, r24
    3690:	fe 01       	movw	r30, r28
    3692:	ea 53       	subi	r30, 0x3A	; 58
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	80 81       	ld	r24, Z
    3698:	88 23       	and	r24, r24
    369a:	11 f4       	brne	.+4      	; 0x36a0 <LCD_voidInit+0x1604>
    369c:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <LCD_voidInit+0x26>

			LCD_enuWriteCmd(u8CntrLoc, u8CmdLoc);
			_delay_ms(1);
		}
	}
}
    36a0:	ca 53       	subi	r28, 0x3A	; 58
    36a2:	df 4f       	sbci	r29, 0xFF	; 255
    36a4:	0f b6       	in	r0, 0x3f	; 63
    36a6:	f8 94       	cli
    36a8:	de bf       	out	0x3e, r29	; 62
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	cd bf       	out	0x3d, r28	; 61
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	1f 91       	pop	r17
    36b4:	0f 91       	pop	r16
    36b6:	08 95       	ret

000036b8 <LCD_enuWriteCmd>:

tenuErrorStatus LCD_enuWriteCmd(uint8 u8LcdNumCpy, uint8 u8CmdCpy)
{
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	00 d0       	rcall	.+0      	; 0x36be <LCD_enuWriteCmd+0x6>
    36be:	0f 92       	push	r0
    36c0:	cd b7       	in	r28, 0x3d	; 61
    36c2:	de b7       	in	r29, 0x3e	; 62
    36c4:	8a 83       	std	Y+2, r24	; 0x02
    36c6:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStateLoc = E_OK;
    36c8:	19 82       	std	Y+1, r1	; 0x01
	if (u8LcdNumCpy < LCD_MAX_NUM)
    36ca:	8a 81       	ldd	r24, Y+2	; 0x02
    36cc:	88 23       	and	r24, r24
    36ce:	c9 f4       	brne	.+50     	; 0x3702 <LCD_enuWriteCmd+0x4a>
	{
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect, DIO_u8LOW);
    36d0:	8a 81       	ldd	r24, Y+2	; 0x02
    36d2:	28 2f       	mov	r18, r24
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	c9 01       	movw	r24, r18
    36d8:	88 0f       	add	r24, r24
    36da:	99 1f       	adc	r25, r25
    36dc:	82 0f       	add	r24, r18
    36de:	93 1f       	adc	r25, r19
    36e0:	88 0f       	add	r24, r24
    36e2:	99 1f       	adc	r25, r25
    36e4:	88 0f       	add	r24, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	fc 01       	movw	r30, r24
    36ea:	e5 54       	subi	r30, 0x45	; 69
    36ec:	fe 4f       	sbci	r31, 0xFE	; 254
    36ee:	80 81       	ld	r24, Z
    36f0:	60 e0       	ldi	r22, 0x00	; 0
    36f2:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy, u8CmdCpy);
    36f6:	8a 81       	ldd	r24, Y+2	; 0x02
    36f8:	6b 81       	ldd	r22, Y+3	; 0x03
    36fa:	0e 94 b8 1b 	call	0x3770	; 0x3770 <LCD_enuHelp>
    36fe:	89 83       	std	Y+1, r24	; 0x01
    3700:	02 c0       	rjmp	.+4      	; 0x3706 <LCD_enuWriteCmd+0x4e>
	}
	else
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE;
    3702:	82 e0       	ldi	r24, 0x02	; 2
    3704:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuErrorStateLoc;
    3706:	89 81       	ldd	r24, Y+1	; 0x01
}
    3708:	0f 90       	pop	r0
    370a:	0f 90       	pop	r0
    370c:	0f 90       	pop	r0
    370e:	cf 91       	pop	r28
    3710:	df 91       	pop	r29
    3712:	08 95       	ret

00003714 <LCD_enuWriteChar>:

tenuErrorStatus LCD_enuWriteChar(uint8 u8LcdNumCpy, uint8 u8DataCpy)
{
    3714:	df 93       	push	r29
    3716:	cf 93       	push	r28
    3718:	00 d0       	rcall	.+0      	; 0x371a <LCD_enuWriteChar+0x6>
    371a:	0f 92       	push	r0
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
    3720:	8a 83       	std	Y+2, r24	; 0x02
    3722:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStateLoc = E_OK;
    3724:	19 82       	std	Y+1, r1	; 0x01
	if (u8LcdNumCpy < LCD_MAX_NUM)
    3726:	8a 81       	ldd	r24, Y+2	; 0x02
    3728:	88 23       	and	r24, r24
    372a:	c9 f4       	brne	.+50     	; 0x375e <LCD_enuWriteChar+0x4a>
	{
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect, DIO_u8HIGH);
    372c:	8a 81       	ldd	r24, Y+2	; 0x02
    372e:	28 2f       	mov	r18, r24
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	c9 01       	movw	r24, r18
    3734:	88 0f       	add	r24, r24
    3736:	99 1f       	adc	r25, r25
    3738:	82 0f       	add	r24, r18
    373a:	93 1f       	adc	r25, r19
    373c:	88 0f       	add	r24, r24
    373e:	99 1f       	adc	r25, r25
    3740:	88 0f       	add	r24, r24
    3742:	99 1f       	adc	r25, r25
    3744:	fc 01       	movw	r30, r24
    3746:	e5 54       	subi	r30, 0x45	; 69
    3748:	fe 4f       	sbci	r31, 0xFE	; 254
    374a:	80 81       	ld	r24, Z
    374c:	61 e0       	ldi	r22, 0x01	; 1
    374e:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy, u8DataCpy);
    3752:	8a 81       	ldd	r24, Y+2	; 0x02
    3754:	6b 81       	ldd	r22, Y+3	; 0x03
    3756:	0e 94 b8 1b 	call	0x3770	; 0x3770 <LCD_enuHelp>
    375a:	89 83       	std	Y+1, r24	; 0x01
    375c:	02 c0       	rjmp	.+4      	; 0x3762 <LCD_enuWriteChar+0x4e>
	}
	else
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE;
    375e:	82 e0       	ldi	r24, 0x02	; 2
    3760:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuErrorStateLoc;
    3762:	89 81       	ldd	r24, Y+1	; 0x01
}
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	cf 91       	pop	r28
    376c:	df 91       	pop	r29
    376e:	08 95       	ret

00003770 <LCD_enuHelp>:

static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy, uint8 u8LcdDataCmdCpy)
{
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	00 d0       	rcall	.+0      	; 0x3776 <LCD_enuHelp+0x6>
    3776:	00 d0       	rcall	.+0      	; 0x3778 <LCD_enuHelp+0x8>
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	8b 83       	std	Y+3, r24	; 0x03
    377e:	6c 83       	std	Y+4, r22	; 0x04
	tenuErrorStatus enuErrorStateLoc = E_OK;
    3780:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc;
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch, DIO_u8HIGH);
    3782:	8b 81       	ldd	r24, Y+3	; 0x03
    3784:	28 2f       	mov	r18, r24
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	c9 01       	movw	r24, r18
    378a:	88 0f       	add	r24, r24
    378c:	99 1f       	adc	r25, r25
    378e:	82 0f       	add	r24, r18
    3790:	93 1f       	adc	r25, r19
    3792:	88 0f       	add	r24, r24
    3794:	99 1f       	adc	r25, r25
    3796:	88 0f       	add	r24, r24
    3798:	99 1f       	adc	r25, r25
    379a:	fc 01       	movw	r30, r24
    379c:	e3 54       	subi	r30, 0x43	; 67
    379e:	fe 4f       	sbci	r31, 0xFE	; 254
    37a0:	80 81       	ld	r24, Z
    37a2:	61 e0       	ldi	r22, 0x01	; 1
    37a4:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite, DIO_u8LOW);
    37a8:	8b 81       	ldd	r24, Y+3	; 0x03
    37aa:	28 2f       	mov	r18, r24
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	c9 01       	movw	r24, r18
    37b0:	88 0f       	add	r24, r24
    37b2:	99 1f       	adc	r25, r25
    37b4:	82 0f       	add	r24, r18
    37b6:	93 1f       	adc	r25, r19
    37b8:	88 0f       	add	r24, r24
    37ba:	99 1f       	adc	r25, r25
    37bc:	01 96       	adiw	r24, 0x01	; 1
    37be:	88 0f       	add	r24, r24
    37c0:	99 1f       	adc	r25, r25
    37c2:	fc 01       	movw	r30, r24
    37c4:	e6 54       	subi	r30, 0x46	; 70
    37c6:	fe 4f       	sbci	r31, 0xFE	; 254
    37c8:	80 81       	ld	r24, Z
    37ca:	60 e0       	ldi	r22, 0x00	; 0
    37cc:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>

	if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
    37d0:	8b 81       	ldd	r24, Y+3	; 0x03
    37d2:	28 2f       	mov	r18, r24
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	c9 01       	movw	r24, r18
    37d8:	88 0f       	add	r24, r24
    37da:	99 1f       	adc	r25, r25
    37dc:	82 0f       	add	r24, r18
    37de:	93 1f       	adc	r25, r19
    37e0:	88 0f       	add	r24, r24
    37e2:	99 1f       	adc	r25, r25
    37e4:	88 0f       	add	r24, r24
    37e6:	99 1f       	adc	r25, r25
    37e8:	fc 01       	movw	r30, r24
    37ea:	e6 54       	subi	r30, 0x46	; 70
    37ec:	fe 4f       	sbci	r31, 0xFE	; 254
    37ee:	80 81       	ld	r24, Z
    37f0:	82 95       	swap	r24
    37f2:	86 95       	lsr	r24
    37f4:	87 70       	andi	r24, 0x07	; 7
    37f6:	81 70       	andi	r24, 0x01	; 1
    37f8:	81 30       	cpi	r24, 0x01	; 1
    37fa:	89 f5       	brne	.+98     	; 0x385e <LCD_enuHelp+0xee>
	{
		for (u8CntrLoc = 0; u8CntrLoc < 8; u8CntrLoc++)
    37fc:	19 82       	std	Y+1, r1	; 0x01
    37fe:	2b c0       	rjmp	.+86     	; 0x3856 <LCD_enuHelp+0xe6>
		{
			(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc));
    3800:	8b 81       	ldd	r24, Y+3	; 0x03
    3802:	28 2f       	mov	r18, r24
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	48 2f       	mov	r20, r24
    380a:	50 e0       	ldi	r21, 0x00	; 0
    380c:	c9 01       	movw	r24, r18
    380e:	88 0f       	add	r24, r24
    3810:	99 1f       	adc	r25, r25
    3812:	82 0f       	add	r24, r18
    3814:	93 1f       	adc	r25, r19
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	88 0f       	add	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	84 0f       	add	r24, r20
    3820:	95 1f       	adc	r25, r21
    3822:	fc 01       	movw	r30, r24
    3824:	e2 54       	subi	r30, 0x42	; 66
    3826:	fe 4f       	sbci	r31, 0xFE	; 254
    3828:	40 81       	ld	r20, Z
    382a:	8c 81       	ldd	r24, Y+4	; 0x04
    382c:	28 2f       	mov	r18, r24
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	88 2f       	mov	r24, r24
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	b9 01       	movw	r22, r18
    3838:	02 c0       	rjmp	.+4      	; 0x383e <LCD_enuHelp+0xce>
    383a:	75 95       	asr	r23
    383c:	67 95       	ror	r22
    383e:	8a 95       	dec	r24
    3840:	e2 f7       	brpl	.-8      	; 0x383a <LCD_enuHelp+0xca>
    3842:	cb 01       	movw	r24, r22
    3844:	98 2f       	mov	r25, r24
    3846:	91 70       	andi	r25, 0x01	; 1
    3848:	84 2f       	mov	r24, r20
    384a:	69 2f       	mov	r22, r25
    384c:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch, DIO_u8HIGH);
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite, DIO_u8LOW);

	if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
	{
		for (u8CntrLoc = 0; u8CntrLoc < 8; u8CntrLoc++)
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	8f 5f       	subi	r24, 0xFF	; 255
    3854:	89 83       	std	Y+1, r24	; 0x01
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	88 30       	cpi	r24, 0x08	; 8
    385a:	90 f2       	brcs	.-92     	; 0x3800 <LCD_enuHelp+0x90>
    385c:	4a c0       	rjmp	.+148    	; 0x38f2 <LCD_enuHelp+0x182>
		{
			(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc));
		}
	}
	else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
    385e:	8b 81       	ldd	r24, Y+3	; 0x03
    3860:	28 2f       	mov	r18, r24
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	c9 01       	movw	r24, r18
    3866:	88 0f       	add	r24, r24
    3868:	99 1f       	adc	r25, r25
    386a:	82 0f       	add	r24, r18
    386c:	93 1f       	adc	r25, r19
    386e:	88 0f       	add	r24, r24
    3870:	99 1f       	adc	r25, r25
    3872:	88 0f       	add	r24, r24
    3874:	99 1f       	adc	r25, r25
    3876:	fc 01       	movw	r30, r24
    3878:	e6 54       	subi	r30, 0x46	; 70
    387a:	fe 4f       	sbci	r31, 0xFE	; 254
    387c:	80 81       	ld	r24, Z
    387e:	82 95       	swap	r24
    3880:	86 95       	lsr	r24
    3882:	87 70       	andi	r24, 0x07	; 7
    3884:	81 70       	andi	r24, 0x01	; 1
    3886:	88 23       	and	r24, r24
    3888:	91 f5       	brne	.+100    	; 0x38ee <LCD_enuHelp+0x17e>
	{
		for (u8CntrLoc = 4; u8CntrLoc < 8; u8CntrLoc++)
    388a:	84 e0       	ldi	r24, 0x04	; 4
    388c:	89 83       	std	Y+1, r24	; 0x01
    388e:	2b c0       	rjmp	.+86     	; 0x38e6 <LCD_enuHelp+0x176>
		{
			(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc));
    3890:	8b 81       	ldd	r24, Y+3	; 0x03
    3892:	28 2f       	mov	r18, r24
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	89 81       	ldd	r24, Y+1	; 0x01
    3898:	48 2f       	mov	r20, r24
    389a:	50 e0       	ldi	r21, 0x00	; 0
    389c:	c9 01       	movw	r24, r18
    389e:	88 0f       	add	r24, r24
    38a0:	99 1f       	adc	r25, r25
    38a2:	82 0f       	add	r24, r18
    38a4:	93 1f       	adc	r25, r19
    38a6:	88 0f       	add	r24, r24
    38a8:	99 1f       	adc	r25, r25
    38aa:	88 0f       	add	r24, r24
    38ac:	99 1f       	adc	r25, r25
    38ae:	84 0f       	add	r24, r20
    38b0:	95 1f       	adc	r25, r21
    38b2:	fc 01       	movw	r30, r24
    38b4:	e2 54       	subi	r30, 0x42	; 66
    38b6:	fe 4f       	sbci	r31, 0xFE	; 254
    38b8:	40 81       	ld	r20, Z
    38ba:	8c 81       	ldd	r24, Y+4	; 0x04
    38bc:	28 2f       	mov	r18, r24
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	89 81       	ldd	r24, Y+1	; 0x01
    38c2:	88 2f       	mov	r24, r24
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	b9 01       	movw	r22, r18
    38c8:	02 c0       	rjmp	.+4      	; 0x38ce <LCD_enuHelp+0x15e>
    38ca:	75 95       	asr	r23
    38cc:	67 95       	ror	r22
    38ce:	8a 95       	dec	r24
    38d0:	e2 f7       	brpl	.-8      	; 0x38ca <LCD_enuHelp+0x15a>
    38d2:	cb 01       	movw	r24, r22
    38d4:	98 2f       	mov	r25, r24
    38d6:	91 70       	andi	r25, 0x01	; 1
    38d8:	84 2f       	mov	r24, r20
    38da:	69 2f       	mov	r22, r25
    38dc:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
			(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc));
		}
	}
	else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
	{
		for (u8CntrLoc = 4; u8CntrLoc < 8; u8CntrLoc++)
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	8f 5f       	subi	r24, 0xFF	; 255
    38e4:	89 83       	std	Y+1, r24	; 0x01
    38e6:	89 81       	ldd	r24, Y+1	; 0x01
    38e8:	88 30       	cpi	r24, 0x08	; 8
    38ea:	90 f2       	brcs	.-92     	; 0x3890 <LCD_enuHelp+0x120>
    38ec:	02 c0       	rjmp	.+4      	; 0x38f2 <LCD_enuHelp+0x182>
			(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc));
		}
	}
	else
	{
		enuErrorStateLoc = E_NOK_CONFIG_PARM_ERROR;
    38ee:	84 e0       	ldi	r24, 0x04	; 4
    38f0:	8a 83       	std	Y+2, r24	; 0x02
	}
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch, DIO_u8LOW);
    38f2:	8b 81       	ldd	r24, Y+3	; 0x03
    38f4:	28 2f       	mov	r18, r24
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	c9 01       	movw	r24, r18
    38fa:	88 0f       	add	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	82 0f       	add	r24, r18
    3900:	93 1f       	adc	r25, r19
    3902:	88 0f       	add	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	88 0f       	add	r24, r24
    3908:	99 1f       	adc	r25, r25
    390a:	fc 01       	movw	r30, r24
    390c:	e3 54       	subi	r30, 0x43	; 67
    390e:	fe 4f       	sbci	r31, 0xFE	; 254
    3910:	80 81       	ld	r24, Z
    3912:	60 e0       	ldi	r22, 0x00	; 0
    3914:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>

	return enuErrorStateLoc;
    3918:	8a 81       	ldd	r24, Y+2	; 0x02
}
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	0f 90       	pop	r0
    3922:	cf 91       	pop	r28
    3924:	df 91       	pop	r29
    3926:	08 95       	ret

00003928 <LCD_enuWritenumber>:

void LCD_enuWritenumber(uint8 u8LcdNumCpy, float32 pu8DataCpy)
{
    3928:	0f 93       	push	r16
    392a:	1f 93       	push	r17
    392c:	df 93       	push	r29
    392e:	cf 93       	push	r28
    3930:	cd b7       	in	r28, 0x3d	; 61
    3932:	de b7       	in	r29, 0x3e	; 62
    3934:	cf 56       	subi	r28, 0x6F	; 111
    3936:	d0 40       	sbci	r29, 0x00	; 0
    3938:	0f b6       	in	r0, 0x3f	; 63
    393a:	f8 94       	cli
    393c:	de bf       	out	0x3e, r29	; 62
    393e:	0f be       	out	0x3f, r0	; 63
    3940:	cd bf       	out	0x3d, r28	; 61
    3942:	fe 01       	movw	r30, r28
    3944:	e5 59       	subi	r30, 0x95	; 149
    3946:	ff 4f       	sbci	r31, 0xFF	; 255
    3948:	80 83       	st	Z, r24
    394a:	fe 01       	movw	r30, r28
    394c:	e4 59       	subi	r30, 0x94	; 148
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	40 83       	st	Z, r20
    3952:	51 83       	std	Z+1, r21	; 0x01
    3954:	62 83       	std	Z+2, r22	; 0x02
    3956:	73 83       	std	Z+3, r23	; 0x03
	uint8 array[100];
	uint8 cntr = 0;
    3958:	1e 82       	std	Y+6, r1	; 0x06
	sint8 loopcntr;
	float32 temp;

	if (pu8DataCpy < 0)
    395a:	fe 01       	movw	r30, r28
    395c:	e4 59       	subi	r30, 0x94	; 148
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	60 81       	ld	r22, Z
    3962:	71 81       	ldd	r23, Z+1	; 0x01
    3964:	82 81       	ldd	r24, Z+2	; 0x02
    3966:	93 81       	ldd	r25, Z+3	; 0x03
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	40 e0       	ldi	r20, 0x00	; 0
    396e:	50 e0       	ldi	r21, 0x00	; 0
    3970:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3974:	88 23       	and	r24, r24
    3976:	94 f5       	brge	.+100    	; 0x39dc <LCD_enuWritenumber+0xb4>
	{
		LCD_enuWriteChar(u8LcdNumCpy, '-');
    3978:	fe 01       	movw	r30, r28
    397a:	e5 59       	subi	r30, 0x95	; 149
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	80 81       	ld	r24, Z
    3980:	6d e2       	ldi	r22, 0x2D	; 45
    3982:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuWriteChar>
		temp = 0 - pu8DataCpy;
    3986:	fe 01       	movw	r30, r28
    3988:	e4 59       	subi	r30, 0x94	; 148
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	70 e0       	ldi	r23, 0x00	; 0
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	20 81       	ld	r18, Z
    3996:	31 81       	ldd	r19, Z+1	; 0x01
    3998:	42 81       	ldd	r20, Z+2	; 0x02
    399a:	53 81       	ldd	r21, Z+3	; 0x03
    399c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    39a0:	dc 01       	movw	r26, r24
    39a2:	cb 01       	movw	r24, r22
    39a4:	89 83       	std	Y+1, r24	; 0x01
    39a6:	9a 83       	std	Y+2, r25	; 0x02
    39a8:	ab 83       	std	Y+3, r26	; 0x03
    39aa:	bc 83       	std	Y+4, r27	; 0x04
		pu8DataCpy = 0 - pu8DataCpy;
    39ac:	8e 01       	movw	r16, r28
    39ae:	04 59       	subi	r16, 0x94	; 148
    39b0:	1f 4f       	sbci	r17, 0xFF	; 255
    39b2:	fe 01       	movw	r30, r28
    39b4:	e4 59       	subi	r30, 0x94	; 148
    39b6:	ff 4f       	sbci	r31, 0xFF	; 255
    39b8:	60 e0       	ldi	r22, 0x00	; 0
    39ba:	70 e0       	ldi	r23, 0x00	; 0
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	20 81       	ld	r18, Z
    39c2:	31 81       	ldd	r19, Z+1	; 0x01
    39c4:	42 81       	ldd	r20, Z+2	; 0x02
    39c6:	53 81       	ldd	r21, Z+3	; 0x03
    39c8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	f8 01       	movw	r30, r16
    39d2:	80 83       	st	Z, r24
    39d4:	91 83       	std	Z+1, r25	; 0x01
    39d6:	a2 83       	std	Z+2, r26	; 0x02
    39d8:	b3 83       	std	Z+3, r27	; 0x03
    39da:	0b c0       	rjmp	.+22     	; 0x39f2 <LCD_enuWritenumber+0xca>
	}
	else
	{
		temp = pu8DataCpy;
    39dc:	fe 01       	movw	r30, r28
    39de:	e4 59       	subi	r30, 0x94	; 148
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	80 81       	ld	r24, Z
    39e4:	91 81       	ldd	r25, Z+1	; 0x01
    39e6:	a2 81       	ldd	r26, Z+2	; 0x02
    39e8:	b3 81       	ldd	r27, Z+3	; 0x03
    39ea:	89 83       	std	Y+1, r24	; 0x01
    39ec:	9a 83       	std	Y+2, r25	; 0x02
    39ee:	ab 83       	std	Y+3, r26	; 0x03
    39f0:	bc 83       	std	Y+4, r27	; 0x04
	}

	do
	{
		array[cntr] = (int)(temp) % 10;
    39f2:	8e 81       	ldd	r24, Y+6	; 0x06
    39f4:	08 2f       	mov	r16, r24
    39f6:	10 e0       	ldi	r17, 0x00	; 0
    39f8:	69 81       	ldd	r22, Y+1	; 0x01
    39fa:	7a 81       	ldd	r23, Y+2	; 0x02
    39fc:	8b 81       	ldd	r24, Y+3	; 0x03
    39fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3a00:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	2a e0       	ldi	r18, 0x0A	; 10
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	b9 01       	movw	r22, r18
    3a0e:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <__divmodhi4>
    3a12:	28 2f       	mov	r18, r24
    3a14:	ce 01       	movw	r24, r28
    3a16:	07 96       	adiw	r24, 0x07	; 7
    3a18:	fc 01       	movw	r30, r24
    3a1a:	e0 0f       	add	r30, r16
    3a1c:	f1 1f       	adc	r31, r17
    3a1e:	20 83       	st	Z, r18
		array[cntr] = array[cntr] + '0';
    3a20:	8e 81       	ldd	r24, Y+6	; 0x06
    3a22:	48 2f       	mov	r20, r24
    3a24:	50 e0       	ldi	r21, 0x00	; 0
    3a26:	8e 81       	ldd	r24, Y+6	; 0x06
    3a28:	28 2f       	mov	r18, r24
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	ce 01       	movw	r24, r28
    3a2e:	07 96       	adiw	r24, 0x07	; 7
    3a30:	fc 01       	movw	r30, r24
    3a32:	e2 0f       	add	r30, r18
    3a34:	f3 1f       	adc	r31, r19
    3a36:	80 81       	ld	r24, Z
    3a38:	28 2f       	mov	r18, r24
    3a3a:	20 5d       	subi	r18, 0xD0	; 208
    3a3c:	ce 01       	movw	r24, r28
    3a3e:	07 96       	adiw	r24, 0x07	; 7
    3a40:	fc 01       	movw	r30, r24
    3a42:	e4 0f       	add	r30, r20
    3a44:	f5 1f       	adc	r31, r21
    3a46:	20 83       	st	Z, r18
		temp = temp / 10;
    3a48:	69 81       	ldd	r22, Y+1	; 0x01
    3a4a:	7a 81       	ldd	r23, Y+2	; 0x02
    3a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	40 e2       	ldi	r20, 0x20	; 32
    3a56:	51 e4       	ldi	r21, 0x41	; 65
    3a58:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	89 83       	std	Y+1, r24	; 0x01
    3a62:	9a 83       	std	Y+2, r25	; 0x02
    3a64:	ab 83       	std	Y+3, r26	; 0x03
    3a66:	bc 83       	std	Y+4, r27	; 0x04
		cntr++;
    3a68:	8e 81       	ldd	r24, Y+6	; 0x06
    3a6a:	8f 5f       	subi	r24, 0xFF	; 255
    3a6c:	8e 83       	std	Y+6, r24	; 0x06
	} while ((int)temp != 0);
    3a6e:	69 81       	ldd	r22, Y+1	; 0x01
    3a70:	7a 81       	ldd	r23, Y+2	; 0x02
    3a72:	8b 81       	ldd	r24, Y+3	; 0x03
    3a74:	9c 81       	ldd	r25, Y+4	; 0x04
    3a76:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	00 97       	sbiw	r24, 0x00	; 0
    3a80:	09 f0       	breq	.+2      	; 0x3a84 <LCD_enuWritenumber+0x15c>
    3a82:	b7 cf       	rjmp	.-146    	; 0x39f2 <LCD_enuWritenumber+0xca>

	for (loopcntr = (cntr - 1); loopcntr >= 0; loopcntr--)
    3a84:	8e 81       	ldd	r24, Y+6	; 0x06
    3a86:	81 50       	subi	r24, 0x01	; 1
    3a88:	8d 83       	std	Y+5, r24	; 0x05
    3a8a:	15 c0       	rjmp	.+42     	; 0x3ab6 <LCD_enuWritenumber+0x18e>
	{
		LCD_enuWriteChar(u8LcdNumCpy, array[loopcntr]);
    3a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8e:	28 2f       	mov	r18, r24
    3a90:	33 27       	eor	r19, r19
    3a92:	27 fd       	sbrc	r18, 7
    3a94:	30 95       	com	r19
    3a96:	ce 01       	movw	r24, r28
    3a98:	07 96       	adiw	r24, 0x07	; 7
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	e2 0f       	add	r30, r18
    3a9e:	f3 1f       	adc	r31, r19
    3aa0:	90 81       	ld	r25, Z
    3aa2:	fe 01       	movw	r30, r28
    3aa4:	e5 59       	subi	r30, 0x95	; 149
    3aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa8:	80 81       	ld	r24, Z
    3aaa:	69 2f       	mov	r22, r25
    3aac:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuWriteChar>
		array[cntr] = array[cntr] + '0';
		temp = temp / 10;
		cntr++;
	} while ((int)temp != 0);

	for (loopcntr = (cntr - 1); loopcntr >= 0; loopcntr--)
    3ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab2:	81 50       	subi	r24, 0x01	; 1
    3ab4:	8d 83       	std	Y+5, r24	; 0x05
    3ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab8:	88 23       	and	r24, r24
    3aba:	44 f7       	brge	.-48     	; 0x3a8c <LCD_enuWritenumber+0x164>
	{
		LCD_enuWriteChar(u8LcdNumCpy, array[loopcntr]);
	}

	if ((pu8DataCpy - (int)pu8DataCpy) > 0.001)
    3abc:	fe 01       	movw	r30, r28
    3abe:	e4 59       	subi	r30, 0x94	; 148
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	60 81       	ld	r22, Z
    3ac4:	71 81       	ldd	r23, Z+1	; 0x01
    3ac6:	82 81       	ldd	r24, Z+2	; 0x02
    3ac8:	93 81       	ldd	r25, Z+3	; 0x03
    3aca:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	aa 27       	eor	r26, r26
    3ad4:	97 fd       	sbrc	r25, 7
    3ad6:	a0 95       	com	r26
    3ad8:	ba 2f       	mov	r27, r26
    3ada:	bc 01       	movw	r22, r24
    3adc:	cd 01       	movw	r24, r26
    3ade:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3ae2:	9b 01       	movw	r18, r22
    3ae4:	ac 01       	movw	r20, r24
    3ae6:	fe 01       	movw	r30, r28
    3ae8:	e4 59       	subi	r30, 0x94	; 148
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	60 81       	ld	r22, Z
    3aee:	71 81       	ldd	r23, Z+1	; 0x01
    3af0:	82 81       	ldd	r24, Z+2	; 0x02
    3af2:	93 81       	ldd	r25, Z+3	; 0x03
    3af4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3af8:	dc 01       	movw	r26, r24
    3afa:	cb 01       	movw	r24, r22
    3afc:	bc 01       	movw	r22, r24
    3afe:	cd 01       	movw	r24, r26
    3b00:	2f e6       	ldi	r18, 0x6F	; 111
    3b02:	32 e1       	ldi	r19, 0x12	; 18
    3b04:	43 e8       	ldi	r20, 0x83	; 131
    3b06:	5a e3       	ldi	r21, 0x3A	; 58
    3b08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b0c:	18 16       	cp	r1, r24
    3b0e:	0c f0       	brlt	.+2      	; 0x3b12 <LCD_enuWritenumber+0x1ea>
    3b10:	79 c0       	rjmp	.+242    	; 0x3c04 <LCD_enuWritenumber+0x2dc>
	{

		LCD_enuWriteChar(u8LcdNumCpy, '.');
    3b12:	fe 01       	movw	r30, r28
    3b14:	e5 59       	subi	r30, 0x95	; 149
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	80 81       	ld	r24, Z
    3b1a:	6e e2       	ldi	r22, 0x2E	; 46
    3b1c:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuWriteChar>

		for (loopcntr = 0; loopcntr < 4; loopcntr++)
    3b20:	1d 82       	std	Y+5, r1	; 0x05
    3b22:	6c c0       	rjmp	.+216    	; 0x3bfc <LCD_enuWritenumber+0x2d4>
		{
			pu8DataCpy = pu8DataCpy - (int)pu8DataCpy;
    3b24:	fe 01       	movw	r30, r28
    3b26:	e4 59       	subi	r30, 0x94	; 148
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	60 81       	ld	r22, Z
    3b2c:	71 81       	ldd	r23, Z+1	; 0x01
    3b2e:	82 81       	ldd	r24, Z+2	; 0x02
    3b30:	93 81       	ldd	r25, Z+3	; 0x03
    3b32:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	aa 27       	eor	r26, r26
    3b3c:	97 fd       	sbrc	r25, 7
    3b3e:	a0 95       	com	r26
    3b40:	ba 2f       	mov	r27, r26
    3b42:	bc 01       	movw	r22, r24
    3b44:	cd 01       	movw	r24, r26
    3b46:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3b4a:	9b 01       	movw	r18, r22
    3b4c:	ac 01       	movw	r20, r24
    3b4e:	8e 01       	movw	r16, r28
    3b50:	04 59       	subi	r16, 0x94	; 148
    3b52:	1f 4f       	sbci	r17, 0xFF	; 255
    3b54:	fe 01       	movw	r30, r28
    3b56:	e4 59       	subi	r30, 0x94	; 148
    3b58:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5a:	60 81       	ld	r22, Z
    3b5c:	71 81       	ldd	r23, Z+1	; 0x01
    3b5e:	82 81       	ldd	r24, Z+2	; 0x02
    3b60:	93 81       	ldd	r25, Z+3	; 0x03
    3b62:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3b66:	dc 01       	movw	r26, r24
    3b68:	cb 01       	movw	r24, r22
    3b6a:	f8 01       	movw	r30, r16
    3b6c:	80 83       	st	Z, r24
    3b6e:	91 83       	std	Z+1, r25	; 0x01
    3b70:	a2 83       	std	Z+2, r26	; 0x02
    3b72:	b3 83       	std	Z+3, r27	; 0x03
			pu8DataCpy = pu8DataCpy * 10;
    3b74:	8e 01       	movw	r16, r28
    3b76:	04 59       	subi	r16, 0x94	; 148
    3b78:	1f 4f       	sbci	r17, 0xFF	; 255
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	e4 59       	subi	r30, 0x94	; 148
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	60 81       	ld	r22, Z
    3b82:	71 81       	ldd	r23, Z+1	; 0x01
    3b84:	82 81       	ldd	r24, Z+2	; 0x02
    3b86:	93 81       	ldd	r25, Z+3	; 0x03
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e2       	ldi	r20, 0x20	; 32
    3b8e:	51 e4       	ldi	r21, 0x41	; 65
    3b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	f8 01       	movw	r30, r16
    3b9a:	80 83       	st	Z, r24
    3b9c:	91 83       	std	Z+1, r25	; 0x01
    3b9e:	a2 83       	std	Z+2, r26	; 0x02
    3ba0:	b3 83       	std	Z+3, r27	; 0x03
			temp = (int)pu8DataCpy + '0';
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	e4 59       	subi	r30, 0x94	; 148
    3ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba8:	60 81       	ld	r22, Z
    3baa:	71 81       	ldd	r23, Z+1	; 0x01
    3bac:	82 81       	ldd	r24, Z+2	; 0x02
    3bae:	93 81       	ldd	r25, Z+3	; 0x03
    3bb0:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	c0 96       	adiw	r24, 0x30	; 48
    3bba:	aa 27       	eor	r26, r26
    3bbc:	97 fd       	sbrc	r25, 7
    3bbe:	a0 95       	com	r26
    3bc0:	ba 2f       	mov	r27, r26
    3bc2:	bc 01       	movw	r22, r24
    3bc4:	cd 01       	movw	r24, r26
    3bc6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	89 83       	std	Y+1, r24	; 0x01
    3bd0:	9a 83       	std	Y+2, r25	; 0x02
    3bd2:	ab 83       	std	Y+3, r26	; 0x03
    3bd4:	bc 83       	std	Y+4, r27	; 0x04
			LCD_enuWriteChar(u8LcdNumCpy, temp);
    3bd6:	69 81       	ldd	r22, Y+1	; 0x01
    3bd8:	7a 81       	ldd	r23, Y+2	; 0x02
    3bda:	8b 81       	ldd	r24, Y+3	; 0x03
    3bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	98 2f       	mov	r25, r24
    3be8:	fe 01       	movw	r30, r28
    3bea:	e5 59       	subi	r30, 0x95	; 149
    3bec:	ff 4f       	sbci	r31, 0xFF	; 255
    3bee:	80 81       	ld	r24, Z
    3bf0:	69 2f       	mov	r22, r25
    3bf2:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuWriteChar>
	if ((pu8DataCpy - (int)pu8DataCpy) > 0.001)
	{

		LCD_enuWriteChar(u8LcdNumCpy, '.');

		for (loopcntr = 0; loopcntr < 4; loopcntr++)
    3bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf8:	8f 5f       	subi	r24, 0xFF	; 255
    3bfa:	8d 83       	std	Y+5, r24	; 0x05
    3bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfe:	84 30       	cpi	r24, 0x04	; 4
    3c00:	0c f4       	brge	.+2      	; 0x3c04 <LCD_enuWritenumber+0x2dc>
    3c02:	90 cf       	rjmp	.-224    	; 0x3b24 <LCD_enuWritenumber+0x1fc>
			pu8DataCpy = pu8DataCpy * 10;
			temp = (int)pu8DataCpy + '0';
			LCD_enuWriteChar(u8LcdNumCpy, temp);
		}
	}
}
    3c04:	c1 59       	subi	r28, 0x91	; 145
    3c06:	df 4f       	sbci	r29, 0xFF	; 255
    3c08:	0f b6       	in	r0, 0x3f	; 63
    3c0a:	f8 94       	cli
    3c0c:	de bf       	out	0x3e, r29	; 62
    3c0e:	0f be       	out	0x3f, r0	; 63
    3c10:	cd bf       	out	0x3d, r28	; 61
    3c12:	cf 91       	pop	r28
    3c14:	df 91       	pop	r29
    3c16:	1f 91       	pop	r17
    3c18:	0f 91       	pop	r16
    3c1a:	08 95       	ret

00003c1c <LCD_enuCreateCustChar>:

tenuErrorStatus LCD_enuCreateCustChar(uint8 u8LcdNumCpy, uint8 *pu8PatternCpy, uint8 u8LocationCpy)
{
    3c1c:	df 93       	push	r29
    3c1e:	cf 93       	push	r28
    3c20:	00 d0       	rcall	.+0      	; 0x3c22 <LCD_enuCreateCustChar+0x6>
    3c22:	00 d0       	rcall	.+0      	; 0x3c24 <LCD_enuCreateCustChar+0x8>
    3c24:	00 d0       	rcall	.+0      	; 0x3c26 <LCD_enuCreateCustChar+0xa>
    3c26:	cd b7       	in	r28, 0x3d	; 61
    3c28:	de b7       	in	r29, 0x3e	; 62
    3c2a:	8b 83       	std	Y+3, r24	; 0x03
    3c2c:	7d 83       	std	Y+5, r23	; 0x05
    3c2e:	6c 83       	std	Y+4, r22	; 0x04
    3c30:	4e 83       	std	Y+6, r20	; 0x06
	tenuErrorStatus enuErrorStateLoc = E_OK;
    3c32:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc;
	if (u8LcdNumCpy < LCD_MAX_NUM && u8LocationCpy < 9)
    3c34:	8b 81       	ldd	r24, Y+3	; 0x03
    3c36:	88 23       	and	r24, r24
    3c38:	41 f5       	brne	.+80     	; 0x3c8a <LCD_enuCreateCustChar+0x6e>
    3c3a:	8e 81       	ldd	r24, Y+6	; 0x06
    3c3c:	89 30       	cpi	r24, 0x09	; 9
    3c3e:	28 f5       	brcc	.+74     	; 0x3c8a <LCD_enuCreateCustChar+0x6e>
	{
		LCD_enuWriteCmd(u8LcdNumCpy, 0x40 + (u8LocationCpy * 8));
    3c40:	8e 81       	ldd	r24, Y+6	; 0x06
    3c42:	88 2f       	mov	r24, r24
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	08 96       	adiw	r24, 0x08	; 8
    3c48:	88 0f       	add	r24, r24
    3c4a:	99 1f       	adc	r25, r25
    3c4c:	88 0f       	add	r24, r24
    3c4e:	99 1f       	adc	r25, r25
    3c50:	88 0f       	add	r24, r24
    3c52:	99 1f       	adc	r25, r25
    3c54:	98 2f       	mov	r25, r24
    3c56:	8b 81       	ldd	r24, Y+3	; 0x03
    3c58:	69 2f       	mov	r22, r25
    3c5a:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>

		for (u8CntrLoc = 0; u8CntrLoc < 8; u8CntrLoc++)
    3c5e:	19 82       	std	Y+1, r1	; 0x01
    3c60:	10 c0       	rjmp	.+32     	; 0x3c82 <LCD_enuCreateCustChar+0x66>
		{
			LCD_enuWriteChar(u8LcdNumCpy, pu8PatternCpy[u8CntrLoc]);
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	28 2f       	mov	r18, r24
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	8c 81       	ldd	r24, Y+4	; 0x04
    3c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	e2 0f       	add	r30, r18
    3c70:	f3 1f       	adc	r31, r19
    3c72:	90 81       	ld	r25, Z
    3c74:	8b 81       	ldd	r24, Y+3	; 0x03
    3c76:	69 2f       	mov	r22, r25
    3c78:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuWriteChar>
	uint8 u8CntrLoc;
	if (u8LcdNumCpy < LCD_MAX_NUM && u8LocationCpy < 9)
	{
		LCD_enuWriteCmd(u8LcdNumCpy, 0x40 + (u8LocationCpy * 8));

		for (u8CntrLoc = 0; u8CntrLoc < 8; u8CntrLoc++)
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	8f 5f       	subi	r24, 0xFF	; 255
    3c80:	89 83       	std	Y+1, r24	; 0x01
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	88 30       	cpi	r24, 0x08	; 8
    3c86:	68 f3       	brcs	.-38     	; 0x3c62 <LCD_enuCreateCustChar+0x46>
    3c88:	02 c0       	rjmp	.+4      	; 0x3c8e <LCD_enuCreateCustChar+0x72>
			LCD_enuWriteChar(u8LcdNumCpy, pu8PatternCpy[u8CntrLoc]);
		}
	}
	else
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE;
    3c8a:	82 e0       	ldi	r24, 0x02	; 2
    3c8c:	8a 83       	std	Y+2, r24	; 0x02
	}

	return enuErrorStateLoc;
    3c8e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3c90:	26 96       	adiw	r28, 0x06	; 6
    3c92:	0f b6       	in	r0, 0x3f	; 63
    3c94:	f8 94       	cli
    3c96:	de bf       	out	0x3e, r29	; 62
    3c98:	0f be       	out	0x3f, r0	; 63
    3c9a:	cd bf       	out	0x3d, r28	; 61
    3c9c:	cf 91       	pop	r28
    3c9e:	df 91       	pop	r29
    3ca0:	08 95       	ret

00003ca2 <LCD_enuWriteData>:
tenuErrorStatus LCD_enuWriteData(uint8 u8LcdNumCpy, uint8 *pu8DataCpy, uint8 u8SizeCpy){
    3ca2:	df 93       	push	r29
    3ca4:	cf 93       	push	r28
    3ca6:	00 d0       	rcall	.+0      	; 0x3ca8 <LCD_enuWriteData+0x6>
    3ca8:	00 d0       	rcall	.+0      	; 0x3caa <LCD_enuWriteData+0x8>
    3caa:	00 d0       	rcall	.+0      	; 0x3cac <LCD_enuWriteData+0xa>
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
    3cb0:	8a 83       	std	Y+2, r24	; 0x02
    3cb2:	7c 83       	std	Y+4, r23	; 0x04
    3cb4:	6b 83       	std	Y+3, r22	; 0x03
    3cb6:	4d 83       	std	Y+5, r20	; 0x05
	uint8 i;
	for(i=0;i<u8SizeCpy;i++){
    3cb8:	19 82       	std	Y+1, r1	; 0x01
    3cba:	10 c0       	rjmp	.+32     	; 0x3cdc <LCD_enuWriteData+0x3a>
		LCD_enuWriteChar(u8LcdNumCpy,pu8DataCpy[i]);
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01
    3cbe:	28 2f       	mov	r18, r24
    3cc0:	30 e0       	ldi	r19, 0x00	; 0
    3cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc6:	fc 01       	movw	r30, r24
    3cc8:	e2 0f       	add	r30, r18
    3cca:	f3 1f       	adc	r31, r19
    3ccc:	90 81       	ld	r25, Z
    3cce:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd0:	69 2f       	mov	r22, r25
    3cd2:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuWriteChar>

	return enuErrorStateLoc;
}
tenuErrorStatus LCD_enuWriteData(uint8 u8LcdNumCpy, uint8 *pu8DataCpy, uint8 u8SizeCpy){
	uint8 i;
	for(i=0;i<u8SizeCpy;i++){
    3cd6:	89 81       	ldd	r24, Y+1	; 0x01
    3cd8:	8f 5f       	subi	r24, 0xFF	; 255
    3cda:	89 83       	std	Y+1, r24	; 0x01
    3cdc:	99 81       	ldd	r25, Y+1	; 0x01
    3cde:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce0:	98 17       	cp	r25, r24
    3ce2:	60 f3       	brcs	.-40     	; 0x3cbc <LCD_enuWriteData+0x1a>
		LCD_enuWriteChar(u8LcdNumCpy,pu8DataCpy[i]);
	}
}
    3ce4:	26 96       	adiw	r28, 0x06	; 6
    3ce6:	0f b6       	in	r0, 0x3f	; 63
    3ce8:	f8 94       	cli
    3cea:	de bf       	out	0x3e, r29	; 62
    3cec:	0f be       	out	0x3f, r0	; 63
    3cee:	cd bf       	out	0x3d, r28	; 61
    3cf0:	cf 91       	pop	r28
    3cf2:	df 91       	pop	r29
    3cf4:	08 95       	ret

00003cf6 <Door_void>:
void get_password(void);
void password_check(uint8* pass_rom , uint8* entered_password,uint8* result);
uint16 read_distance_ok=0 ,open_door=0;
uint8 password_rom[SIZE_PASSWORD];

void Door_void(void){
    3cf6:	0f 93       	push	r16
    3cf8:	1f 93       	push	r17
    3cfa:	df 93       	push	r29
    3cfc:	cf 93       	push	r28
    3cfe:	cd b7       	in	r28, 0x3d	; 61
    3d00:	de b7       	in	r29, 0x3e	; 62
    3d02:	c7 59       	subi	r28, 0x97	; 151
    3d04:	d0 40       	sbci	r29, 0x00	; 0
    3d06:	0f b6       	in	r0, 0x3f	; 63
    3d08:	f8 94       	cli
    3d0a:	de bf       	out	0x3e, r29	; 62
    3d0c:	0f be       	out	0x3f, r0	; 63
    3d0e:	cd bf       	out	0x3d, r28	; 61
EXTINT2_voidSetCallBack(Start_servo);
    3d10:	89 e1       	ldi	r24, 0x19	; 25
    3d12:	94 e2       	ldi	r25, 0x24	; 36
    3d14:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <EXTINT2_voidSetCallBack>
uint8 size=0,result=0;
    3d18:	fe 01       	movw	r30, r28
    3d1a:	e8 5b       	subi	r30, 0xB8	; 184
    3d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1e:	10 82       	st	Z, r1
    3d20:	fe 01       	movw	r30, r28
    3d22:	e7 5b       	subi	r30, 0xB7	; 183
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	10 82       	st	Z, r1
sint8  i=0;
    3d28:	fe 01       	movw	r30, r28
    3d2a:	e9 5b       	subi	r30, 0xB9	; 185
    3d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2e:	10 82       	st	Z, r1

uint8 entered_pass[SIZE_PASSWORD];
uint8 welcome_string[8]=" Welcome";
    3d30:	ce 01       	movw	r24, r28
    3d32:	82 5b       	subi	r24, 0xB2	; 178
    3d34:	9f 4f       	sbci	r25, 0xFF	; 255
    3d36:	cc 57       	subi	r28, 0x7C	; 124
    3d38:	df 4f       	sbci	r29, 0xFF	; 255
    3d3a:	99 83       	std	Y+1, r25	; 0x01
    3d3c:	88 83       	st	Y, r24
    3d3e:	c4 58       	subi	r28, 0x84	; 132
    3d40:	d0 40       	sbci	r29, 0x00	; 0
    3d42:	80 e6       	ldi	r24, 0x60	; 96
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	ca 57       	subi	r28, 0x7A	; 122
    3d48:	df 4f       	sbci	r29, 0xFF	; 255
    3d4a:	99 83       	std	Y+1, r25	; 0x01
    3d4c:	88 83       	st	Y, r24
    3d4e:	c6 58       	subi	r28, 0x86	; 134
    3d50:	d0 40       	sbci	r29, 0x00	; 0
    3d52:	98 e0       	ldi	r25, 0x08	; 8
    3d54:	c8 57       	subi	r28, 0x78	; 120
    3d56:	df 4f       	sbci	r29, 0xFF	; 255
    3d58:	98 83       	st	Y, r25
    3d5a:	c8 58       	subi	r28, 0x88	; 136
    3d5c:	d0 40       	sbci	r29, 0x00	; 0
    3d5e:	ca 57       	subi	r28, 0x7A	; 122
    3d60:	df 4f       	sbci	r29, 0xFF	; 255
    3d62:	e8 81       	ld	r30, Y
    3d64:	f9 81       	ldd	r31, Y+1	; 0x01
    3d66:	c6 58       	subi	r28, 0x86	; 134
    3d68:	d0 40       	sbci	r29, 0x00	; 0
    3d6a:	00 80       	ld	r0, Z
    3d6c:	ca 57       	subi	r28, 0x7A	; 122
    3d6e:	df 4f       	sbci	r29, 0xFF	; 255
    3d70:	88 81       	ld	r24, Y
    3d72:	99 81       	ldd	r25, Y+1	; 0x01
    3d74:	c6 58       	subi	r28, 0x86	; 134
    3d76:	d0 40       	sbci	r29, 0x00	; 0
    3d78:	01 96       	adiw	r24, 0x01	; 1
    3d7a:	ca 57       	subi	r28, 0x7A	; 122
    3d7c:	df 4f       	sbci	r29, 0xFF	; 255
    3d7e:	99 83       	std	Y+1, r25	; 0x01
    3d80:	88 83       	st	Y, r24
    3d82:	c6 58       	subi	r28, 0x86	; 134
    3d84:	d0 40       	sbci	r29, 0x00	; 0
    3d86:	cc 57       	subi	r28, 0x7C	; 124
    3d88:	df 4f       	sbci	r29, 0xFF	; 255
    3d8a:	e8 81       	ld	r30, Y
    3d8c:	f9 81       	ldd	r31, Y+1	; 0x01
    3d8e:	c4 58       	subi	r28, 0x84	; 132
    3d90:	d0 40       	sbci	r29, 0x00	; 0
    3d92:	00 82       	st	Z, r0
    3d94:	cc 57       	subi	r28, 0x7C	; 124
    3d96:	df 4f       	sbci	r29, 0xFF	; 255
    3d98:	88 81       	ld	r24, Y
    3d9a:	99 81       	ldd	r25, Y+1	; 0x01
    3d9c:	c4 58       	subi	r28, 0x84	; 132
    3d9e:	d0 40       	sbci	r29, 0x00	; 0
    3da0:	01 96       	adiw	r24, 0x01	; 1
    3da2:	cc 57       	subi	r28, 0x7C	; 124
    3da4:	df 4f       	sbci	r29, 0xFF	; 255
    3da6:	99 83       	std	Y+1, r25	; 0x01
    3da8:	88 83       	st	Y, r24
    3daa:	c4 58       	subi	r28, 0x84	; 132
    3dac:	d0 40       	sbci	r29, 0x00	; 0
    3dae:	c8 57       	subi	r28, 0x78	; 120
    3db0:	df 4f       	sbci	r29, 0xFF	; 255
    3db2:	98 81       	ld	r25, Y
    3db4:	c8 58       	subi	r28, 0x88	; 136
    3db6:	d0 40       	sbci	r29, 0x00	; 0
    3db8:	91 50       	subi	r25, 0x01	; 1
    3dba:	c8 57       	subi	r28, 0x78	; 120
    3dbc:	df 4f       	sbci	r29, 0xFF	; 255
    3dbe:	98 83       	st	Y, r25
    3dc0:	c8 58       	subi	r28, 0x88	; 136
    3dc2:	d0 40       	sbci	r29, 0x00	; 0
    3dc4:	c8 57       	subi	r28, 0x78	; 120
    3dc6:	df 4f       	sbci	r29, 0xFF	; 255
    3dc8:	e8 81       	ld	r30, Y
    3dca:	c8 58       	subi	r28, 0x88	; 136
    3dcc:	d0 40       	sbci	r29, 0x00	; 0
    3dce:	ee 23       	and	r30, r30
    3dd0:	31 f6       	brne	.-116    	; 0x3d5e <Door_void+0x68>
uint8 password_string[15]=" Enter password";
    3dd2:	ce 01       	movw	r24, r28
    3dd4:	8a 5a       	subi	r24, 0xAA	; 170
    3dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd8:	c7 57       	subi	r28, 0x77	; 119
    3dda:	df 4f       	sbci	r29, 0xFF	; 255
    3ddc:	99 83       	std	Y+1, r25	; 0x01
    3dde:	88 83       	st	Y, r24
    3de0:	c9 58       	subi	r28, 0x89	; 137
    3de2:	d0 40       	sbci	r29, 0x00	; 0
    3de4:	89 e6       	ldi	r24, 0x69	; 105
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	c5 57       	subi	r28, 0x75	; 117
    3dea:	df 4f       	sbci	r29, 0xFF	; 255
    3dec:	99 83       	std	Y+1, r25	; 0x01
    3dee:	88 83       	st	Y, r24
    3df0:	cb 58       	subi	r28, 0x8B	; 139
    3df2:	d0 40       	sbci	r29, 0x00	; 0
    3df4:	9f e0       	ldi	r25, 0x0F	; 15
    3df6:	c3 57       	subi	r28, 0x73	; 115
    3df8:	df 4f       	sbci	r29, 0xFF	; 255
    3dfa:	98 83       	st	Y, r25
    3dfc:	cd 58       	subi	r28, 0x8D	; 141
    3dfe:	d0 40       	sbci	r29, 0x00	; 0
    3e00:	c5 57       	subi	r28, 0x75	; 117
    3e02:	df 4f       	sbci	r29, 0xFF	; 255
    3e04:	e8 81       	ld	r30, Y
    3e06:	f9 81       	ldd	r31, Y+1	; 0x01
    3e08:	cb 58       	subi	r28, 0x8B	; 139
    3e0a:	d0 40       	sbci	r29, 0x00	; 0
    3e0c:	00 80       	ld	r0, Z
    3e0e:	c5 57       	subi	r28, 0x75	; 117
    3e10:	df 4f       	sbci	r29, 0xFF	; 255
    3e12:	88 81       	ld	r24, Y
    3e14:	99 81       	ldd	r25, Y+1	; 0x01
    3e16:	cb 58       	subi	r28, 0x8B	; 139
    3e18:	d0 40       	sbci	r29, 0x00	; 0
    3e1a:	01 96       	adiw	r24, 0x01	; 1
    3e1c:	c5 57       	subi	r28, 0x75	; 117
    3e1e:	df 4f       	sbci	r29, 0xFF	; 255
    3e20:	99 83       	std	Y+1, r25	; 0x01
    3e22:	88 83       	st	Y, r24
    3e24:	cb 58       	subi	r28, 0x8B	; 139
    3e26:	d0 40       	sbci	r29, 0x00	; 0
    3e28:	c7 57       	subi	r28, 0x77	; 119
    3e2a:	df 4f       	sbci	r29, 0xFF	; 255
    3e2c:	e8 81       	ld	r30, Y
    3e2e:	f9 81       	ldd	r31, Y+1	; 0x01
    3e30:	c9 58       	subi	r28, 0x89	; 137
    3e32:	d0 40       	sbci	r29, 0x00	; 0
    3e34:	00 82       	st	Z, r0
    3e36:	c7 57       	subi	r28, 0x77	; 119
    3e38:	df 4f       	sbci	r29, 0xFF	; 255
    3e3a:	88 81       	ld	r24, Y
    3e3c:	99 81       	ldd	r25, Y+1	; 0x01
    3e3e:	c9 58       	subi	r28, 0x89	; 137
    3e40:	d0 40       	sbci	r29, 0x00	; 0
    3e42:	01 96       	adiw	r24, 0x01	; 1
    3e44:	c7 57       	subi	r28, 0x77	; 119
    3e46:	df 4f       	sbci	r29, 0xFF	; 255
    3e48:	99 83       	std	Y+1, r25	; 0x01
    3e4a:	88 83       	st	Y, r24
    3e4c:	c9 58       	subi	r28, 0x89	; 137
    3e4e:	d0 40       	sbci	r29, 0x00	; 0
    3e50:	c3 57       	subi	r28, 0x73	; 115
    3e52:	df 4f       	sbci	r29, 0xFF	; 255
    3e54:	98 81       	ld	r25, Y
    3e56:	cd 58       	subi	r28, 0x8D	; 141
    3e58:	d0 40       	sbci	r29, 0x00	; 0
    3e5a:	91 50       	subi	r25, 0x01	; 1
    3e5c:	c3 57       	subi	r28, 0x73	; 115
    3e5e:	df 4f       	sbci	r29, 0xFF	; 255
    3e60:	98 83       	st	Y, r25
    3e62:	cd 58       	subi	r28, 0x8D	; 141
    3e64:	d0 40       	sbci	r29, 0x00	; 0
    3e66:	c3 57       	subi	r28, 0x73	; 115
    3e68:	df 4f       	sbci	r29, 0xFF	; 255
    3e6a:	e8 81       	ld	r30, Y
    3e6c:	cd 58       	subi	r28, 0x8D	; 141
    3e6e:	d0 40       	sbci	r29, 0x00	; 0
    3e70:	ee 23       	and	r30, r30
    3e72:	31 f6       	brne	.-116    	; 0x3e00 <Door_void+0x10a>
uint8 password_wrong[15]=" password wrong";
    3e74:	ce 01       	movw	r24, r28
    3e76:	8b 59       	subi	r24, 0x9B	; 155
    3e78:	9f 4f       	sbci	r25, 0xFF	; 255
    3e7a:	c2 57       	subi	r28, 0x72	; 114
    3e7c:	df 4f       	sbci	r29, 0xFF	; 255
    3e7e:	99 83       	std	Y+1, r25	; 0x01
    3e80:	88 83       	st	Y, r24
    3e82:	ce 58       	subi	r28, 0x8E	; 142
    3e84:	d0 40       	sbci	r29, 0x00	; 0
    3e86:	89 e7       	ldi	r24, 0x79	; 121
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	c0 57       	subi	r28, 0x70	; 112
    3e8c:	df 4f       	sbci	r29, 0xFF	; 255
    3e8e:	99 83       	std	Y+1, r25	; 0x01
    3e90:	88 83       	st	Y, r24
    3e92:	c0 59       	subi	r28, 0x90	; 144
    3e94:	d0 40       	sbci	r29, 0x00	; 0
    3e96:	9f e0       	ldi	r25, 0x0F	; 15
    3e98:	ce 56       	subi	r28, 0x6E	; 110
    3e9a:	df 4f       	sbci	r29, 0xFF	; 255
    3e9c:	98 83       	st	Y, r25
    3e9e:	c2 59       	subi	r28, 0x92	; 146
    3ea0:	d0 40       	sbci	r29, 0x00	; 0
    3ea2:	c0 57       	subi	r28, 0x70	; 112
    3ea4:	df 4f       	sbci	r29, 0xFF	; 255
    3ea6:	e8 81       	ld	r30, Y
    3ea8:	f9 81       	ldd	r31, Y+1	; 0x01
    3eaa:	c0 59       	subi	r28, 0x90	; 144
    3eac:	d0 40       	sbci	r29, 0x00	; 0
    3eae:	00 80       	ld	r0, Z
    3eb0:	c0 57       	subi	r28, 0x70	; 112
    3eb2:	df 4f       	sbci	r29, 0xFF	; 255
    3eb4:	88 81       	ld	r24, Y
    3eb6:	99 81       	ldd	r25, Y+1	; 0x01
    3eb8:	c0 59       	subi	r28, 0x90	; 144
    3eba:	d0 40       	sbci	r29, 0x00	; 0
    3ebc:	01 96       	adiw	r24, 0x01	; 1
    3ebe:	c0 57       	subi	r28, 0x70	; 112
    3ec0:	df 4f       	sbci	r29, 0xFF	; 255
    3ec2:	99 83       	std	Y+1, r25	; 0x01
    3ec4:	88 83       	st	Y, r24
    3ec6:	c0 59       	subi	r28, 0x90	; 144
    3ec8:	d0 40       	sbci	r29, 0x00	; 0
    3eca:	c2 57       	subi	r28, 0x72	; 114
    3ecc:	df 4f       	sbci	r29, 0xFF	; 255
    3ece:	e8 81       	ld	r30, Y
    3ed0:	f9 81       	ldd	r31, Y+1	; 0x01
    3ed2:	ce 58       	subi	r28, 0x8E	; 142
    3ed4:	d0 40       	sbci	r29, 0x00	; 0
    3ed6:	00 82       	st	Z, r0
    3ed8:	c2 57       	subi	r28, 0x72	; 114
    3eda:	df 4f       	sbci	r29, 0xFF	; 255
    3edc:	88 81       	ld	r24, Y
    3ede:	99 81       	ldd	r25, Y+1	; 0x01
    3ee0:	ce 58       	subi	r28, 0x8E	; 142
    3ee2:	d0 40       	sbci	r29, 0x00	; 0
    3ee4:	01 96       	adiw	r24, 0x01	; 1
    3ee6:	c2 57       	subi	r28, 0x72	; 114
    3ee8:	df 4f       	sbci	r29, 0xFF	; 255
    3eea:	99 83       	std	Y+1, r25	; 0x01
    3eec:	88 83       	st	Y, r24
    3eee:	ce 58       	subi	r28, 0x8E	; 142
    3ef0:	d0 40       	sbci	r29, 0x00	; 0
    3ef2:	ce 56       	subi	r28, 0x6E	; 110
    3ef4:	df 4f       	sbci	r29, 0xFF	; 255
    3ef6:	98 81       	ld	r25, Y
    3ef8:	c2 59       	subi	r28, 0x92	; 146
    3efa:	d0 40       	sbci	r29, 0x00	; 0
    3efc:	91 50       	subi	r25, 0x01	; 1
    3efe:	ce 56       	subi	r28, 0x6E	; 110
    3f00:	df 4f       	sbci	r29, 0xFF	; 255
    3f02:	98 83       	st	Y, r25
    3f04:	c2 59       	subi	r28, 0x92	; 146
    3f06:	d0 40       	sbci	r29, 0x00	; 0
    3f08:	ce 56       	subi	r28, 0x6E	; 110
    3f0a:	df 4f       	sbci	r29, 0xFF	; 255
    3f0c:	e8 81       	ld	r30, Y
    3f0e:	c2 59       	subi	r28, 0x92	; 146
    3f10:	d0 40       	sbci	r29, 0x00	; 0
    3f12:	ee 23       	and	r30, r30
    3f14:	31 f6       	brne	.-116    	; 0x3ea2 <Door_void+0x1ac>
uint8 door_open[16]=" Door is opening";
    3f16:	ce 01       	movw	r24, r28
    3f18:	8c 58       	subi	r24, 0x8C	; 140
    3f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f1c:	cd 56       	subi	r28, 0x6D	; 109
    3f1e:	df 4f       	sbci	r29, 0xFF	; 255
    3f20:	99 83       	std	Y+1, r25	; 0x01
    3f22:	88 83       	st	Y, r24
    3f24:	c3 59       	subi	r28, 0x93	; 147
    3f26:	d0 40       	sbci	r29, 0x00	; 0
    3f28:	89 e8       	ldi	r24, 0x89	; 137
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	cb 56       	subi	r28, 0x6B	; 107
    3f2e:	df 4f       	sbci	r29, 0xFF	; 255
    3f30:	99 83       	std	Y+1, r25	; 0x01
    3f32:	88 83       	st	Y, r24
    3f34:	c5 59       	subi	r28, 0x95	; 149
    3f36:	d0 40       	sbci	r29, 0x00	; 0
    3f38:	90 e1       	ldi	r25, 0x10	; 16
    3f3a:	c9 56       	subi	r28, 0x69	; 105
    3f3c:	df 4f       	sbci	r29, 0xFF	; 255
    3f3e:	98 83       	st	Y, r25
    3f40:	c7 59       	subi	r28, 0x97	; 151
    3f42:	d0 40       	sbci	r29, 0x00	; 0
    3f44:	cb 56       	subi	r28, 0x6B	; 107
    3f46:	df 4f       	sbci	r29, 0xFF	; 255
    3f48:	e8 81       	ld	r30, Y
    3f4a:	f9 81       	ldd	r31, Y+1	; 0x01
    3f4c:	c5 59       	subi	r28, 0x95	; 149
    3f4e:	d0 40       	sbci	r29, 0x00	; 0
    3f50:	00 80       	ld	r0, Z
    3f52:	cb 56       	subi	r28, 0x6B	; 107
    3f54:	df 4f       	sbci	r29, 0xFF	; 255
    3f56:	88 81       	ld	r24, Y
    3f58:	99 81       	ldd	r25, Y+1	; 0x01
    3f5a:	c5 59       	subi	r28, 0x95	; 149
    3f5c:	d0 40       	sbci	r29, 0x00	; 0
    3f5e:	01 96       	adiw	r24, 0x01	; 1
    3f60:	cb 56       	subi	r28, 0x6B	; 107
    3f62:	df 4f       	sbci	r29, 0xFF	; 255
    3f64:	99 83       	std	Y+1, r25	; 0x01
    3f66:	88 83       	st	Y, r24
    3f68:	c5 59       	subi	r28, 0x95	; 149
    3f6a:	d0 40       	sbci	r29, 0x00	; 0
    3f6c:	cd 56       	subi	r28, 0x6D	; 109
    3f6e:	df 4f       	sbci	r29, 0xFF	; 255
    3f70:	e8 81       	ld	r30, Y
    3f72:	f9 81       	ldd	r31, Y+1	; 0x01
    3f74:	c3 59       	subi	r28, 0x93	; 147
    3f76:	d0 40       	sbci	r29, 0x00	; 0
    3f78:	00 82       	st	Z, r0
    3f7a:	cd 56       	subi	r28, 0x6D	; 109
    3f7c:	df 4f       	sbci	r29, 0xFF	; 255
    3f7e:	88 81       	ld	r24, Y
    3f80:	99 81       	ldd	r25, Y+1	; 0x01
    3f82:	c3 59       	subi	r28, 0x93	; 147
    3f84:	d0 40       	sbci	r29, 0x00	; 0
    3f86:	01 96       	adiw	r24, 0x01	; 1
    3f88:	cd 56       	subi	r28, 0x6D	; 109
    3f8a:	df 4f       	sbci	r29, 0xFF	; 255
    3f8c:	99 83       	std	Y+1, r25	; 0x01
    3f8e:	88 83       	st	Y, r24
    3f90:	c3 59       	subi	r28, 0x93	; 147
    3f92:	d0 40       	sbci	r29, 0x00	; 0
    3f94:	c9 56       	subi	r28, 0x69	; 105
    3f96:	df 4f       	sbci	r29, 0xFF	; 255
    3f98:	98 81       	ld	r25, Y
    3f9a:	c7 59       	subi	r28, 0x97	; 151
    3f9c:	d0 40       	sbci	r29, 0x00	; 0
    3f9e:	91 50       	subi	r25, 0x01	; 1
    3fa0:	c9 56       	subi	r28, 0x69	; 105
    3fa2:	df 4f       	sbci	r29, 0xFF	; 255
    3fa4:	98 83       	st	Y, r25
    3fa6:	c7 59       	subi	r28, 0x97	; 151
    3fa8:	d0 40       	sbci	r29, 0x00	; 0
    3faa:	c9 56       	subi	r28, 0x69	; 105
    3fac:	df 4f       	sbci	r29, 0xFF	; 255
    3fae:	e8 81       	ld	r30, Y
    3fb0:	c7 59       	subi	r28, 0x97	; 151
    3fb2:	d0 40       	sbci	r29, 0x00	; 0
    3fb4:	ee 23       	and	r30, r30
    3fb6:	31 f6       	brne	.-116    	; 0x3f44 <Door_void+0x24e>
DIO_enuWritePin(DIO_u8PIN_10,DIO_u8LOW );
    3fb8:	8a e0       	ldi	r24, 0x0A	; 10
    3fba:	60 e0       	ldi	r22, 0x00	; 0
    3fbc:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
LCD_enuWriteData(LCD_u8NUM_0,welcome_string, 8);
    3fc0:	9e 01       	movw	r18, r28
    3fc2:	22 5b       	subi	r18, 0xB2	; 178
    3fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	b9 01       	movw	r22, r18
    3fca:	48 e0       	ldi	r20, 0x08	; 8
    3fcc:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <LCD_enuWriteData>
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	ed 5b       	subi	r30, 0xBD	; 189
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	80 e0       	ldi	r24, 0x00	; 0
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	aa ef       	ldi	r26, 0xFA	; 250
    3fdc:	b3 e4       	ldi	r27, 0x43	; 67
    3fde:	80 83       	st	Z, r24
    3fe0:	91 83       	std	Z+1, r25	; 0x01
    3fe2:	a2 83       	std	Z+2, r26	; 0x02
    3fe4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe6:	8e 01       	movw	r16, r28
    3fe8:	01 5c       	subi	r16, 0xC1	; 193
    3fea:	1f 4f       	sbci	r17, 0xFF	; 255
    3fec:	fe 01       	movw	r30, r28
    3fee:	ed 5b       	subi	r30, 0xBD	; 189
    3ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff2:	60 81       	ld	r22, Z
    3ff4:	71 81       	ldd	r23, Z+1	; 0x01
    3ff6:	82 81       	ldd	r24, Z+2	; 0x02
    3ff8:	93 81       	ldd	r25, Z+3	; 0x03
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	4a ef       	ldi	r20, 0xFA	; 250
    4000:	54 e4       	ldi	r21, 0x44	; 68
    4002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	f8 01       	movw	r30, r16
    400c:	80 83       	st	Z, r24
    400e:	91 83       	std	Z+1, r25	; 0x01
    4010:	a2 83       	std	Z+2, r26	; 0x02
    4012:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4014:	fe 01       	movw	r30, r28
    4016:	ff 96       	adiw	r30, 0x3f	; 63
    4018:	60 81       	ld	r22, Z
    401a:	71 81       	ldd	r23, Z+1	; 0x01
    401c:	82 81       	ldd	r24, Z+2	; 0x02
    401e:	93 81       	ldd	r25, Z+3	; 0x03
    4020:	20 e0       	ldi	r18, 0x00	; 0
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	40 e8       	ldi	r20, 0x80	; 128
    4026:	5f e3       	ldi	r21, 0x3F	; 63
    4028:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    402c:	88 23       	and	r24, r24
    402e:	2c f4       	brge	.+10     	; 0x403a <Door_void+0x344>
		__ticks = 1;
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	9e af       	std	Y+62, r25	; 0x3e
    4036:	8d af       	std	Y+61, r24	; 0x3d
    4038:	46 c0       	rjmp	.+140    	; 0x40c6 <Door_void+0x3d0>
	else if (__tmp > 65535)
    403a:	fe 01       	movw	r30, r28
    403c:	ff 96       	adiw	r30, 0x3f	; 63
    403e:	60 81       	ld	r22, Z
    4040:	71 81       	ldd	r23, Z+1	; 0x01
    4042:	82 81       	ldd	r24, Z+2	; 0x02
    4044:	93 81       	ldd	r25, Z+3	; 0x03
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	3f ef       	ldi	r19, 0xFF	; 255
    404a:	4f e7       	ldi	r20, 0x7F	; 127
    404c:	57 e4       	ldi	r21, 0x47	; 71
    404e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4052:	18 16       	cp	r1, r24
    4054:	64 f5       	brge	.+88     	; 0x40ae <Door_void+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4056:	fe 01       	movw	r30, r28
    4058:	ed 5b       	subi	r30, 0xBD	; 189
    405a:	ff 4f       	sbci	r31, 0xFF	; 255
    405c:	60 81       	ld	r22, Z
    405e:	71 81       	ldd	r23, Z+1	; 0x01
    4060:	82 81       	ldd	r24, Z+2	; 0x02
    4062:	93 81       	ldd	r25, Z+3	; 0x03
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	40 e2       	ldi	r20, 0x20	; 32
    406a:	51 e4       	ldi	r21, 0x41	; 65
    406c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4070:	dc 01       	movw	r26, r24
    4072:	cb 01       	movw	r24, r22
    4074:	bc 01       	movw	r22, r24
    4076:	cd 01       	movw	r24, r26
    4078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407c:	dc 01       	movw	r26, r24
    407e:	cb 01       	movw	r24, r22
    4080:	9e af       	std	Y+62, r25	; 0x3e
    4082:	8d af       	std	Y+61, r24	; 0x3d
    4084:	0f c0       	rjmp	.+30     	; 0x40a4 <Door_void+0x3ae>
    4086:	88 ec       	ldi	r24, 0xC8	; 200
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	9c af       	std	Y+60, r25	; 0x3c
    408c:	8b af       	std	Y+59, r24	; 0x3b
    408e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4090:	9c ad       	ldd	r25, Y+60	; 0x3c
    4092:	01 97       	sbiw	r24, 0x01	; 1
    4094:	f1 f7       	brne	.-4      	; 0x4092 <Door_void+0x39c>
    4096:	9c af       	std	Y+60, r25	; 0x3c
    4098:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    409a:	8d ad       	ldd	r24, Y+61	; 0x3d
    409c:	9e ad       	ldd	r25, Y+62	; 0x3e
    409e:	01 97       	sbiw	r24, 0x01	; 1
    40a0:	9e af       	std	Y+62, r25	; 0x3e
    40a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    40a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    40a8:	00 97       	sbiw	r24, 0x00	; 0
    40aa:	69 f7       	brne	.-38     	; 0x4086 <Door_void+0x390>
    40ac:	16 c0       	rjmp	.+44     	; 0x40da <Door_void+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ae:	fe 01       	movw	r30, r28
    40b0:	ff 96       	adiw	r30, 0x3f	; 63
    40b2:	60 81       	ld	r22, Z
    40b4:	71 81       	ldd	r23, Z+1	; 0x01
    40b6:	82 81       	ldd	r24, Z+2	; 0x02
    40b8:	93 81       	ldd	r25, Z+3	; 0x03
    40ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
    40c2:	9e af       	std	Y+62, r25	; 0x3e
    40c4:	8d af       	std	Y+61, r24	; 0x3d
    40c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    40c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    40ca:	9a af       	std	Y+58, r25	; 0x3a
    40cc:	89 af       	std	Y+57, r24	; 0x39
    40ce:	89 ad       	ldd	r24, Y+57	; 0x39
    40d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    40d2:	01 97       	sbiw	r24, 0x01	; 1
    40d4:	f1 f7       	brne	.-4      	; 0x40d2 <Door_void+0x3dc>
    40d6:	9a af       	std	Y+58, r25	; 0x3a
    40d8:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(500);
LCD_enuWriteCmd(LCD_u8NUM_0,LCD_u8CLEAR);
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	61 e0       	ldi	r22, 0x01	; 1
    40de:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
LCD_enuWriteData(LCD_u8NUM_0,password_string,15);
    40e2:	9e 01       	movw	r18, r28
    40e4:	2a 5a       	subi	r18, 0xAA	; 170
    40e6:	3f 4f       	sbci	r19, 0xFF	; 255
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	b9 01       	movw	r22, r18
    40ec:	4f e0       	ldi	r20, 0x0F	; 15
    40ee:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <LCD_enuWriteData>
LCD_enuWriteCmd(LCD_u8NUM_0, 0xC0);
    40f2:	80 e0       	ldi	r24, 0x00	; 0
    40f4:	60 ec       	ldi	r22, 0xC0	; 192
    40f6:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
    40fa:	26 c0       	rjmp	.+76     	; 0x4148 <Door_void+0x452>
while(i<SIZE_PASSWORD){
KEYPAD_enuGetPressedKey(KEYPAD_u8NUM_0,entered_pass+i ,&size );
    40fc:	fe 01       	movw	r30, r28
    40fe:	e9 5b       	subi	r30, 0xB9	; 185
    4100:	ff 4f       	sbci	r31, 0xFF	; 255
    4102:	80 81       	ld	r24, Z
    4104:	99 27       	eor	r25, r25
    4106:	87 fd       	sbrc	r24, 7
    4108:	90 95       	com	r25
    410a:	9e 01       	movw	r18, r28
    410c:	26 5b       	subi	r18, 0xB6	; 182
    410e:	3f 4f       	sbci	r19, 0xFF	; 255
    4110:	28 0f       	add	r18, r24
    4112:	39 1f       	adc	r19, r25
    4114:	ae 01       	movw	r20, r28
    4116:	48 5b       	subi	r20, 0xB8	; 184
    4118:	5f 4f       	sbci	r21, 0xFF	; 255
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	b9 01       	movw	r22, r18
    411e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <KEYPAD_enuGetPressedKey>
if(size!=0){
    4122:	fe 01       	movw	r30, r28
    4124:	e8 5b       	subi	r30, 0xB8	; 184
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	80 81       	ld	r24, Z
    412a:	88 23       	and	r24, r24
    412c:	69 f0       	breq	.+26     	; 0x4148 <Door_void+0x452>

	LCD_enuWriteChar (LCD_u8NUM_0  ,'*');
    412e:	80 e0       	ldi	r24, 0x00	; 0
    4130:	6a e2       	ldi	r22, 0x2A	; 42
    4132:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuWriteChar>
 i++;
    4136:	de 01       	movw	r26, r28
    4138:	a9 5b       	subi	r26, 0xB9	; 185
    413a:	bf 4f       	sbci	r27, 0xFF	; 255
    413c:	fe 01       	movw	r30, r28
    413e:	e9 5b       	subi	r30, 0xB9	; 185
    4140:	ff 4f       	sbci	r31, 0xFF	; 255
    4142:	80 81       	ld	r24, Z
    4144:	8f 5f       	subi	r24, 0xFF	; 255
    4146:	8c 93       	st	X, r24
LCD_enuWriteData(LCD_u8NUM_0,welcome_string, 8);
_delay_ms(500);
LCD_enuWriteCmd(LCD_u8NUM_0,LCD_u8CLEAR);
LCD_enuWriteData(LCD_u8NUM_0,password_string,15);
LCD_enuWriteCmd(LCD_u8NUM_0, 0xC0);
while(i<SIZE_PASSWORD){
    4148:	fe 01       	movw	r30, r28
    414a:	e9 5b       	subi	r30, 0xB9	; 185
    414c:	ff 4f       	sbci	r31, 0xFF	; 255
    414e:	80 81       	ld	r24, Z
    4150:	84 30       	cpi	r24, 0x04	; 4
    4152:	a4 f2       	brlt	.-88     	; 0x40fc <Door_void+0x406>
    4154:	80 e0       	ldi	r24, 0x00	; 0
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	aa ef       	ldi	r26, 0xFA	; 250
    415a:	b3 e4       	ldi	r27, 0x43	; 67
    415c:	8d ab       	std	Y+53, r24	; 0x35
    415e:	9e ab       	std	Y+54, r25	; 0x36
    4160:	af ab       	std	Y+55, r26	; 0x37
    4162:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4164:	6d a9       	ldd	r22, Y+53	; 0x35
    4166:	7e a9       	ldd	r23, Y+54	; 0x36
    4168:	8f a9       	ldd	r24, Y+55	; 0x37
    416a:	98 ad       	ldd	r25, Y+56	; 0x38
    416c:	20 e0       	ldi	r18, 0x00	; 0
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	4a ef       	ldi	r20, 0xFA	; 250
    4172:	54 e4       	ldi	r21, 0x44	; 68
    4174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4178:	dc 01       	movw	r26, r24
    417a:	cb 01       	movw	r24, r22
    417c:	89 ab       	std	Y+49, r24	; 0x31
    417e:	9a ab       	std	Y+50, r25	; 0x32
    4180:	ab ab       	std	Y+51, r26	; 0x33
    4182:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4184:	69 a9       	ldd	r22, Y+49	; 0x31
    4186:	7a a9       	ldd	r23, Y+50	; 0x32
    4188:	8b a9       	ldd	r24, Y+51	; 0x33
    418a:	9c a9       	ldd	r25, Y+52	; 0x34
    418c:	20 e0       	ldi	r18, 0x00	; 0
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	40 e8       	ldi	r20, 0x80	; 128
    4192:	5f e3       	ldi	r21, 0x3F	; 63
    4194:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4198:	88 23       	and	r24, r24
    419a:	2c f4       	brge	.+10     	; 0x41a6 <Door_void+0x4b0>
		__ticks = 1;
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	98 ab       	std	Y+48, r25	; 0x30
    41a2:	8f a7       	std	Y+47, r24	; 0x2f
    41a4:	3f c0       	rjmp	.+126    	; 0x4224 <Door_void+0x52e>
	else if (__tmp > 65535)
    41a6:	69 a9       	ldd	r22, Y+49	; 0x31
    41a8:	7a a9       	ldd	r23, Y+50	; 0x32
    41aa:	8b a9       	ldd	r24, Y+51	; 0x33
    41ac:	9c a9       	ldd	r25, Y+52	; 0x34
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	3f ef       	ldi	r19, 0xFF	; 255
    41b2:	4f e7       	ldi	r20, 0x7F	; 127
    41b4:	57 e4       	ldi	r21, 0x47	; 71
    41b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41ba:	18 16       	cp	r1, r24
    41bc:	4c f5       	brge	.+82     	; 0x4210 <Door_void+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41be:	6d a9       	ldd	r22, Y+53	; 0x35
    41c0:	7e a9       	ldd	r23, Y+54	; 0x36
    41c2:	8f a9       	ldd	r24, Y+55	; 0x37
    41c4:	98 ad       	ldd	r25, Y+56	; 0x38
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	40 e2       	ldi	r20, 0x20	; 32
    41cc:	51 e4       	ldi	r21, 0x41	; 65
    41ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d2:	dc 01       	movw	r26, r24
    41d4:	cb 01       	movw	r24, r22
    41d6:	bc 01       	movw	r22, r24
    41d8:	cd 01       	movw	r24, r26
    41da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	98 ab       	std	Y+48, r25	; 0x30
    41e4:	8f a7       	std	Y+47, r24	; 0x2f
    41e6:	0f c0       	rjmp	.+30     	; 0x4206 <Door_void+0x510>
    41e8:	88 ec       	ldi	r24, 0xC8	; 200
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	9e a7       	std	Y+46, r25	; 0x2e
    41ee:	8d a7       	std	Y+45, r24	; 0x2d
    41f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    41f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    41f4:	01 97       	sbiw	r24, 0x01	; 1
    41f6:	f1 f7       	brne	.-4      	; 0x41f4 <Door_void+0x4fe>
    41f8:	9e a7       	std	Y+46, r25	; 0x2e
    41fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    41fe:	98 a9       	ldd	r25, Y+48	; 0x30
    4200:	01 97       	sbiw	r24, 0x01	; 1
    4202:	98 ab       	std	Y+48, r25	; 0x30
    4204:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4206:	8f a5       	ldd	r24, Y+47	; 0x2f
    4208:	98 a9       	ldd	r25, Y+48	; 0x30
    420a:	00 97       	sbiw	r24, 0x00	; 0
    420c:	69 f7       	brne	.-38     	; 0x41e8 <Door_void+0x4f2>
    420e:	14 c0       	rjmp	.+40     	; 0x4238 <Door_void+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4210:	69 a9       	ldd	r22, Y+49	; 0x31
    4212:	7a a9       	ldd	r23, Y+50	; 0x32
    4214:	8b a9       	ldd	r24, Y+51	; 0x33
    4216:	9c a9       	ldd	r25, Y+52	; 0x34
    4218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421c:	dc 01       	movw	r26, r24
    421e:	cb 01       	movw	r24, r22
    4220:	98 ab       	std	Y+48, r25	; 0x30
    4222:	8f a7       	std	Y+47, r24	; 0x2f
    4224:	8f a5       	ldd	r24, Y+47	; 0x2f
    4226:	98 a9       	ldd	r25, Y+48	; 0x30
    4228:	9c a7       	std	Y+44, r25	; 0x2c
    422a:	8b a7       	std	Y+43, r24	; 0x2b
    422c:	8b a5       	ldd	r24, Y+43	; 0x2b
    422e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4230:	01 97       	sbiw	r24, 0x01	; 1
    4232:	f1 f7       	brne	.-4      	; 0x4230 <Door_void+0x53a>
    4234:	9c a7       	std	Y+44, r25	; 0x2c
    4236:	8b a7       	std	Y+43, r24	; 0x2b
 i++;
	}
}
_delay_ms(500);

 password_check(password_rom , entered_pass,& result);
    4238:	85 ef       	ldi	r24, 0xF5	; 245
    423a:	91 e0       	ldi	r25, 0x01	; 1
    423c:	9e 01       	movw	r18, r28
    423e:	26 5b       	subi	r18, 0xB6	; 182
    4240:	3f 4f       	sbci	r19, 0xFF	; 255
    4242:	ae 01       	movw	r20, r28
    4244:	47 5b       	subi	r20, 0xB7	; 183
    4246:	5f 4f       	sbci	r21, 0xFF	; 255
    4248:	b9 01       	movw	r22, r18
    424a:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <password_check>


if(result==0){
    424e:	fe 01       	movw	r30, r28
    4250:	e7 5b       	subi	r30, 0xB7	; 183
    4252:	ff 4f       	sbci	r31, 0xFF	; 255
    4254:	80 81       	ld	r24, Z
    4256:	88 23       	and	r24, r24
    4258:	09 f0       	breq	.+2      	; 0x425c <Door_void+0x566>
    425a:	85 c0       	rjmp	.+266    	; 0x4366 <Door_void+0x670>
	LCD_enuWriteCmd(LCD_u8NUM_0,LCD_u8CLEAR);
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	61 e0       	ldi	r22, 0x01	; 1
    4260:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
	LCD_enuWriteData(LCD_u8NUM_0,password_wrong, 15);
    4264:	9e 01       	movw	r18, r28
    4266:	2b 59       	subi	r18, 0x9B	; 155
    4268:	3f 4f       	sbci	r19, 0xFF	; 255
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	b9 01       	movw	r22, r18
    426e:	4f e0       	ldi	r20, 0x0F	; 15
    4270:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <LCD_enuWriteData>
    4274:	80 e0       	ldi	r24, 0x00	; 0
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	aa ef       	ldi	r26, 0xFA	; 250
    427a:	b3 e4       	ldi	r27, 0x43	; 67
    427c:	8f a3       	std	Y+39, r24	; 0x27
    427e:	98 a7       	std	Y+40, r25	; 0x28
    4280:	a9 a7       	std	Y+41, r26	; 0x29
    4282:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4284:	6f a1       	ldd	r22, Y+39	; 0x27
    4286:	78 a5       	ldd	r23, Y+40	; 0x28
    4288:	89 a5       	ldd	r24, Y+41	; 0x29
    428a:	9a a5       	ldd	r25, Y+42	; 0x2a
    428c:	20 e0       	ldi	r18, 0x00	; 0
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	4a ef       	ldi	r20, 0xFA	; 250
    4292:	54 e4       	ldi	r21, 0x44	; 68
    4294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4298:	dc 01       	movw	r26, r24
    429a:	cb 01       	movw	r24, r22
    429c:	8b a3       	std	Y+35, r24	; 0x23
    429e:	9c a3       	std	Y+36, r25	; 0x24
    42a0:	ad a3       	std	Y+37, r26	; 0x25
    42a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    42a4:	6b a1       	ldd	r22, Y+35	; 0x23
    42a6:	7c a1       	ldd	r23, Y+36	; 0x24
    42a8:	8d a1       	ldd	r24, Y+37	; 0x25
    42aa:	9e a1       	ldd	r25, Y+38	; 0x26
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	40 e8       	ldi	r20, 0x80	; 128
    42b2:	5f e3       	ldi	r21, 0x3F	; 63
    42b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42b8:	88 23       	and	r24, r24
    42ba:	2c f4       	brge	.+10     	; 0x42c6 <Door_void+0x5d0>
		__ticks = 1;
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	9a a3       	std	Y+34, r25	; 0x22
    42c2:	89 a3       	std	Y+33, r24	; 0x21
    42c4:	3f c0       	rjmp	.+126    	; 0x4344 <Door_void+0x64e>
	else if (__tmp > 65535)
    42c6:	6b a1       	ldd	r22, Y+35	; 0x23
    42c8:	7c a1       	ldd	r23, Y+36	; 0x24
    42ca:	8d a1       	ldd	r24, Y+37	; 0x25
    42cc:	9e a1       	ldd	r25, Y+38	; 0x26
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	3f ef       	ldi	r19, 0xFF	; 255
    42d2:	4f e7       	ldi	r20, 0x7F	; 127
    42d4:	57 e4       	ldi	r21, 0x47	; 71
    42d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42da:	18 16       	cp	r1, r24
    42dc:	4c f5       	brge	.+82     	; 0x4330 <Door_void+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42de:	6f a1       	ldd	r22, Y+39	; 0x27
    42e0:	78 a5       	ldd	r23, Y+40	; 0x28
    42e2:	89 a5       	ldd	r24, Y+41	; 0x29
    42e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    42e6:	20 e0       	ldi	r18, 0x00	; 0
    42e8:	30 e0       	ldi	r19, 0x00	; 0
    42ea:	40 e2       	ldi	r20, 0x20	; 32
    42ec:	51 e4       	ldi	r21, 0x41	; 65
    42ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f2:	dc 01       	movw	r26, r24
    42f4:	cb 01       	movw	r24, r22
    42f6:	bc 01       	movw	r22, r24
    42f8:	cd 01       	movw	r24, r26
    42fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42fe:	dc 01       	movw	r26, r24
    4300:	cb 01       	movw	r24, r22
    4302:	9a a3       	std	Y+34, r25	; 0x22
    4304:	89 a3       	std	Y+33, r24	; 0x21
    4306:	0f c0       	rjmp	.+30     	; 0x4326 <Door_void+0x630>
    4308:	88 ec       	ldi	r24, 0xC8	; 200
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	98 a3       	std	Y+32, r25	; 0x20
    430e:	8f 8f       	std	Y+31, r24	; 0x1f
    4310:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4312:	98 a1       	ldd	r25, Y+32	; 0x20
    4314:	01 97       	sbiw	r24, 0x01	; 1
    4316:	f1 f7       	brne	.-4      	; 0x4314 <Door_void+0x61e>
    4318:	98 a3       	std	Y+32, r25	; 0x20
    431a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    431c:	89 a1       	ldd	r24, Y+33	; 0x21
    431e:	9a a1       	ldd	r25, Y+34	; 0x22
    4320:	01 97       	sbiw	r24, 0x01	; 1
    4322:	9a a3       	std	Y+34, r25	; 0x22
    4324:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4326:	89 a1       	ldd	r24, Y+33	; 0x21
    4328:	9a a1       	ldd	r25, Y+34	; 0x22
    432a:	00 97       	sbiw	r24, 0x00	; 0
    432c:	69 f7       	brne	.-38     	; 0x4308 <Door_void+0x612>
    432e:	14 c0       	rjmp	.+40     	; 0x4358 <Door_void+0x662>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4330:	6b a1       	ldd	r22, Y+35	; 0x23
    4332:	7c a1       	ldd	r23, Y+36	; 0x24
    4334:	8d a1       	ldd	r24, Y+37	; 0x25
    4336:	9e a1       	ldd	r25, Y+38	; 0x26
    4338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    433c:	dc 01       	movw	r26, r24
    433e:	cb 01       	movw	r24, r22
    4340:	9a a3       	std	Y+34, r25	; 0x22
    4342:	89 a3       	std	Y+33, r24	; 0x21
    4344:	89 a1       	ldd	r24, Y+33	; 0x21
    4346:	9a a1       	ldd	r25, Y+34	; 0x22
    4348:	9e 8f       	std	Y+30, r25	; 0x1e
    434a:	8d 8f       	std	Y+29, r24	; 0x1d
    434c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    434e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4350:	01 97       	sbiw	r24, 0x01	; 1
    4352:	f1 f7       	brne	.-4      	; 0x4350 <Door_void+0x65a>
    4354:	9e 8f       	std	Y+30, r25	; 0x1e
    4356:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	LCD_enuWriteCmd(LCD_u8NUM_0,LCD_u8CLEAR);
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	61 e0       	ldi	r22, 0x01	; 1
    435c:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
	Door_void();
    4360:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <Door_void>
    4364:	fc c0       	rjmp	.+504    	; 0x455e <Door_void+0x868>

}
else{
	open_door=1;
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	90 93 ed 01 	sts	0x01ED, r25
    436e:	80 93 ec 01 	sts	0x01EC, r24
	LCD_enuWriteCmd(LCD_u8NUM_0,LCD_u8CLEAR);
    4372:	80 e0       	ldi	r24, 0x00	; 0
    4374:	61 e0       	ldi	r22, 0x01	; 1
    4376:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_enuWriteCmd>
	LCD_enuWriteData(LCD_u8NUM_0,door_open, 16);
    437a:	9e 01       	movw	r18, r28
    437c:	2c 58       	subi	r18, 0x8C	; 140
    437e:	3f 4f       	sbci	r19, 0xFF	; 255
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	b9 01       	movw	r22, r18
    4384:	40 e1       	ldi	r20, 0x10	; 16
    4386:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <LCD_enuWriteData>
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	aa ef       	ldi	r26, 0xFA	; 250
    4390:	b3 e4       	ldi	r27, 0x43	; 67
    4392:	89 8f       	std	Y+25, r24	; 0x19
    4394:	9a 8f       	std	Y+26, r25	; 0x1a
    4396:	ab 8f       	std	Y+27, r26	; 0x1b
    4398:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    439a:	69 8d       	ldd	r22, Y+25	; 0x19
    439c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    439e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	4a ef       	ldi	r20, 0xFA	; 250
    43a8:	54 e4       	ldi	r21, 0x44	; 68
    43aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	8d 8b       	std	Y+21, r24	; 0x15
    43b4:	9e 8b       	std	Y+22, r25	; 0x16
    43b6:	af 8b       	std	Y+23, r26	; 0x17
    43b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43ba:	6d 89       	ldd	r22, Y+21	; 0x15
    43bc:	7e 89       	ldd	r23, Y+22	; 0x16
    43be:	8f 89       	ldd	r24, Y+23	; 0x17
    43c0:	98 8d       	ldd	r25, Y+24	; 0x18
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	40 e8       	ldi	r20, 0x80	; 128
    43c8:	5f e3       	ldi	r21, 0x3F	; 63
    43ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43ce:	88 23       	and	r24, r24
    43d0:	2c f4       	brge	.+10     	; 0x43dc <Door_void+0x6e6>
		__ticks = 1;
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	9c 8b       	std	Y+20, r25	; 0x14
    43d8:	8b 8b       	std	Y+19, r24	; 0x13
    43da:	3f c0       	rjmp	.+126    	; 0x445a <Door_void+0x764>
	else if (__tmp > 65535)
    43dc:	6d 89       	ldd	r22, Y+21	; 0x15
    43de:	7e 89       	ldd	r23, Y+22	; 0x16
    43e0:	8f 89       	ldd	r24, Y+23	; 0x17
    43e2:	98 8d       	ldd	r25, Y+24	; 0x18
    43e4:	20 e0       	ldi	r18, 0x00	; 0
    43e6:	3f ef       	ldi	r19, 0xFF	; 255
    43e8:	4f e7       	ldi	r20, 0x7F	; 127
    43ea:	57 e4       	ldi	r21, 0x47	; 71
    43ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43f0:	18 16       	cp	r1, r24
    43f2:	4c f5       	brge	.+82     	; 0x4446 <Door_void+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43f4:	69 8d       	ldd	r22, Y+25	; 0x19
    43f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	40 e2       	ldi	r20, 0x20	; 32
    4402:	51 e4       	ldi	r21, 0x41	; 65
    4404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4408:	dc 01       	movw	r26, r24
    440a:	cb 01       	movw	r24, r22
    440c:	bc 01       	movw	r22, r24
    440e:	cd 01       	movw	r24, r26
    4410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	9c 8b       	std	Y+20, r25	; 0x14
    441a:	8b 8b       	std	Y+19, r24	; 0x13
    441c:	0f c0       	rjmp	.+30     	; 0x443c <Door_void+0x746>
    441e:	88 ec       	ldi	r24, 0xC8	; 200
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	9a 8b       	std	Y+18, r25	; 0x12
    4424:	89 8b       	std	Y+17, r24	; 0x11
    4426:	89 89       	ldd	r24, Y+17	; 0x11
    4428:	9a 89       	ldd	r25, Y+18	; 0x12
    442a:	01 97       	sbiw	r24, 0x01	; 1
    442c:	f1 f7       	brne	.-4      	; 0x442a <Door_void+0x734>
    442e:	9a 8b       	std	Y+18, r25	; 0x12
    4430:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4432:	8b 89       	ldd	r24, Y+19	; 0x13
    4434:	9c 89       	ldd	r25, Y+20	; 0x14
    4436:	01 97       	sbiw	r24, 0x01	; 1
    4438:	9c 8b       	std	Y+20, r25	; 0x14
    443a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    443c:	8b 89       	ldd	r24, Y+19	; 0x13
    443e:	9c 89       	ldd	r25, Y+20	; 0x14
    4440:	00 97       	sbiw	r24, 0x00	; 0
    4442:	69 f7       	brne	.-38     	; 0x441e <Door_void+0x728>
    4444:	14 c0       	rjmp	.+40     	; 0x446e <Door_void+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4446:	6d 89       	ldd	r22, Y+21	; 0x15
    4448:	7e 89       	ldd	r23, Y+22	; 0x16
    444a:	8f 89       	ldd	r24, Y+23	; 0x17
    444c:	98 8d       	ldd	r25, Y+24	; 0x18
    444e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4452:	dc 01       	movw	r26, r24
    4454:	cb 01       	movw	r24, r22
    4456:	9c 8b       	std	Y+20, r25	; 0x14
    4458:	8b 8b       	std	Y+19, r24	; 0x13
    445a:	8b 89       	ldd	r24, Y+19	; 0x13
    445c:	9c 89       	ldd	r25, Y+20	; 0x14
    445e:	98 8b       	std	Y+16, r25	; 0x10
    4460:	8f 87       	std	Y+15, r24	; 0x0f
    4462:	8f 85       	ldd	r24, Y+15	; 0x0f
    4464:	98 89       	ldd	r25, Y+16	; 0x10
    4466:	01 97       	sbiw	r24, 0x01	; 1
    4468:	f1 f7       	brne	.-4      	; 0x4466 <Door_void+0x770>
    446a:	98 8b       	std	Y+16, r25	; 0x10
    446c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	Start_servo();
    446e:	0e 94 19 24 	call	0x4832	; 0x4832 <Start_servo>
    4472:	80 e0       	ldi	r24, 0x00	; 0
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	aa ef       	ldi	r26, 0xFA	; 250
    4478:	b3 e4       	ldi	r27, 0x43	; 67
    447a:	8b 87       	std	Y+11, r24	; 0x0b
    447c:	9c 87       	std	Y+12, r25	; 0x0c
    447e:	ad 87       	std	Y+13, r26	; 0x0d
    4480:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4482:	6b 85       	ldd	r22, Y+11	; 0x0b
    4484:	7c 85       	ldd	r23, Y+12	; 0x0c
    4486:	8d 85       	ldd	r24, Y+13	; 0x0d
    4488:	9e 85       	ldd	r25, Y+14	; 0x0e
    448a:	20 e0       	ldi	r18, 0x00	; 0
    448c:	30 e0       	ldi	r19, 0x00	; 0
    448e:	4a ef       	ldi	r20, 0xFA	; 250
    4490:	54 e4       	ldi	r21, 0x44	; 68
    4492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	8f 83       	std	Y+7, r24	; 0x07
    449c:	98 87       	std	Y+8, r25	; 0x08
    449e:	a9 87       	std	Y+9, r26	; 0x09
    44a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44a2:	6f 81       	ldd	r22, Y+7	; 0x07
    44a4:	78 85       	ldd	r23, Y+8	; 0x08
    44a6:	89 85       	ldd	r24, Y+9	; 0x09
    44a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    44aa:	20 e0       	ldi	r18, 0x00	; 0
    44ac:	30 e0       	ldi	r19, 0x00	; 0
    44ae:	40 e8       	ldi	r20, 0x80	; 128
    44b0:	5f e3       	ldi	r21, 0x3F	; 63
    44b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44b6:	88 23       	and	r24, r24
    44b8:	2c f4       	brge	.+10     	; 0x44c4 <Door_void+0x7ce>
		__ticks = 1;
    44ba:	81 e0       	ldi	r24, 0x01	; 1
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	9e 83       	std	Y+6, r25	; 0x06
    44c0:	8d 83       	std	Y+5, r24	; 0x05
    44c2:	3f c0       	rjmp	.+126    	; 0x4542 <Door_void+0x84c>
	else if (__tmp > 65535)
    44c4:	6f 81       	ldd	r22, Y+7	; 0x07
    44c6:	78 85       	ldd	r23, Y+8	; 0x08
    44c8:	89 85       	ldd	r24, Y+9	; 0x09
    44ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    44cc:	20 e0       	ldi	r18, 0x00	; 0
    44ce:	3f ef       	ldi	r19, 0xFF	; 255
    44d0:	4f e7       	ldi	r20, 0x7F	; 127
    44d2:	57 e4       	ldi	r21, 0x47	; 71
    44d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44d8:	18 16       	cp	r1, r24
    44da:	4c f5       	brge	.+82     	; 0x452e <Door_void+0x838>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    44de:	7c 85       	ldd	r23, Y+12	; 0x0c
    44e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    44e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    44e4:	20 e0       	ldi	r18, 0x00	; 0
    44e6:	30 e0       	ldi	r19, 0x00	; 0
    44e8:	40 e2       	ldi	r20, 0x20	; 32
    44ea:	51 e4       	ldi	r21, 0x41	; 65
    44ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f0:	dc 01       	movw	r26, r24
    44f2:	cb 01       	movw	r24, r22
    44f4:	bc 01       	movw	r22, r24
    44f6:	cd 01       	movw	r24, r26
    44f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44fc:	dc 01       	movw	r26, r24
    44fe:	cb 01       	movw	r24, r22
    4500:	9e 83       	std	Y+6, r25	; 0x06
    4502:	8d 83       	std	Y+5, r24	; 0x05
    4504:	0f c0       	rjmp	.+30     	; 0x4524 <Door_void+0x82e>
    4506:	88 ec       	ldi	r24, 0xC8	; 200
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	9c 83       	std	Y+4, r25	; 0x04
    450c:	8b 83       	std	Y+3, r24	; 0x03
    450e:	8b 81       	ldd	r24, Y+3	; 0x03
    4510:	9c 81       	ldd	r25, Y+4	; 0x04
    4512:	01 97       	sbiw	r24, 0x01	; 1
    4514:	f1 f7       	brne	.-4      	; 0x4512 <Door_void+0x81c>
    4516:	9c 83       	std	Y+4, r25	; 0x04
    4518:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    451a:	8d 81       	ldd	r24, Y+5	; 0x05
    451c:	9e 81       	ldd	r25, Y+6	; 0x06
    451e:	01 97       	sbiw	r24, 0x01	; 1
    4520:	9e 83       	std	Y+6, r25	; 0x06
    4522:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4524:	8d 81       	ldd	r24, Y+5	; 0x05
    4526:	9e 81       	ldd	r25, Y+6	; 0x06
    4528:	00 97       	sbiw	r24, 0x00	; 0
    452a:	69 f7       	brne	.-38     	; 0x4506 <Door_void+0x810>
    452c:	14 c0       	rjmp	.+40     	; 0x4556 <Door_void+0x860>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    452e:	6f 81       	ldd	r22, Y+7	; 0x07
    4530:	78 85       	ldd	r23, Y+8	; 0x08
    4532:	89 85       	ldd	r24, Y+9	; 0x09
    4534:	9a 85       	ldd	r25, Y+10	; 0x0a
    4536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    453a:	dc 01       	movw	r26, r24
    453c:	cb 01       	movw	r24, r22
    453e:	9e 83       	std	Y+6, r25	; 0x06
    4540:	8d 83       	std	Y+5, r24	; 0x05
    4542:	8d 81       	ldd	r24, Y+5	; 0x05
    4544:	9e 81       	ldd	r25, Y+6	; 0x06
    4546:	9a 83       	std	Y+2, r25	; 0x02
    4548:	89 83       	std	Y+1, r24	; 0x01
    454a:	89 81       	ldd	r24, Y+1	; 0x01
    454c:	9a 81       	ldd	r25, Y+2	; 0x02
    454e:	01 97       	sbiw	r24, 0x01	; 1
    4550:	f1 f7       	brne	.-4      	; 0x454e <Door_void+0x858>
    4552:	9a 83       	std	Y+2, r25	; 0x02
    4554:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	uart_void_write ('1');
    4556:	81 e3       	ldi	r24, 0x31	; 49
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <uart_void_write>
}

}
    455e:	c9 56       	subi	r28, 0x69	; 105
    4560:	df 4f       	sbci	r29, 0xFF	; 255
    4562:	0f b6       	in	r0, 0x3f	; 63
    4564:	f8 94       	cli
    4566:	de bf       	out	0x3e, r29	; 62
    4568:	0f be       	out	0x3f, r0	; 63
    456a:	cd bf       	out	0x3d, r28	; 61
    456c:	cf 91       	pop	r28
    456e:	df 91       	pop	r29
    4570:	1f 91       	pop	r17
    4572:	0f 91       	pop	r16
    4574:	08 95       	ret

00004576 <get_password>:


void get_password(void){
    4576:	0f 93       	push	r16
    4578:	1f 93       	push	r17
    457a:	df 93       	push	r29
    457c:	cf 93       	push	r28
    457e:	cd b7       	in	r28, 0x3d	; 61
    4580:	de b7       	in	r29, 0x3e	; 62
    4582:	6d 97       	sbiw	r28, 0x1d	; 29
    4584:	0f b6       	in	r0, 0x3f	; 63
    4586:	f8 94       	cli
    4588:	de bf       	out	0x3e, r29	; 62
    458a:	0f be       	out	0x3f, r0	; 63
    458c:	cd bf       	out	0x3d, r28	; 61

uint8 i;
GIE_voidDisable();
    458e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <GIE_voidDisable>
TWI_init_master();
    4592:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <TWI_init_master>

for(i=0;i<SIZE_PASSWORD;i++){
    4596:	1d 8e       	std	Y+29, r1	; 0x1d
    4598:	fe c0       	rjmp	.+508    	; 0x4796 <get_password+0x220>
	EEPROM_Write(0xA6,i,passward[i]);
    459a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    459c:	88 2f       	mov	r24, r24
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	fc 01       	movw	r30, r24
    45a2:	ea 53       	subi	r30, 0x3A	; 58
    45a4:	fe 4f       	sbci	r31, 0xFE	; 254
    45a6:	90 81       	ld	r25, Z
    45a8:	86 ea       	ldi	r24, 0xA6	; 166
    45aa:	6d 8d       	ldd	r22, Y+29	; 0x1d
    45ac:	49 2f       	mov	r20, r25
    45ae:	0e 94 26 0b 	call	0x164c	; 0x164c <EEPROM_Write>
    45b2:	80 e0       	ldi	r24, 0x00	; 0
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	a8 ec       	ldi	r26, 0xC8	; 200
    45b8:	b2 e4       	ldi	r27, 0x42	; 66
    45ba:	89 8f       	std	Y+25, r24	; 0x19
    45bc:	9a 8f       	std	Y+26, r25	; 0x1a
    45be:	ab 8f       	std	Y+27, r26	; 0x1b
    45c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c2:	69 8d       	ldd	r22, Y+25	; 0x19
    45c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45ca:	20 e0       	ldi	r18, 0x00	; 0
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	4a ef       	ldi	r20, 0xFA	; 250
    45d0:	54 e4       	ldi	r21, 0x44	; 68
    45d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d6:	dc 01       	movw	r26, r24
    45d8:	cb 01       	movw	r24, r22
    45da:	8d 8b       	std	Y+21, r24	; 0x15
    45dc:	9e 8b       	std	Y+22, r25	; 0x16
    45de:	af 8b       	std	Y+23, r26	; 0x17
    45e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45e2:	6d 89       	ldd	r22, Y+21	; 0x15
    45e4:	7e 89       	ldd	r23, Y+22	; 0x16
    45e6:	8f 89       	ldd	r24, Y+23	; 0x17
    45e8:	98 8d       	ldd	r25, Y+24	; 0x18
    45ea:	20 e0       	ldi	r18, 0x00	; 0
    45ec:	30 e0       	ldi	r19, 0x00	; 0
    45ee:	40 e8       	ldi	r20, 0x80	; 128
    45f0:	5f e3       	ldi	r21, 0x3F	; 63
    45f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45f6:	88 23       	and	r24, r24
    45f8:	2c f4       	brge	.+10     	; 0x4604 <get_password+0x8e>
		__ticks = 1;
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	9c 8b       	std	Y+20, r25	; 0x14
    4600:	8b 8b       	std	Y+19, r24	; 0x13
    4602:	3f c0       	rjmp	.+126    	; 0x4682 <get_password+0x10c>
	else if (__tmp > 65535)
    4604:	6d 89       	ldd	r22, Y+21	; 0x15
    4606:	7e 89       	ldd	r23, Y+22	; 0x16
    4608:	8f 89       	ldd	r24, Y+23	; 0x17
    460a:	98 8d       	ldd	r25, Y+24	; 0x18
    460c:	20 e0       	ldi	r18, 0x00	; 0
    460e:	3f ef       	ldi	r19, 0xFF	; 255
    4610:	4f e7       	ldi	r20, 0x7F	; 127
    4612:	57 e4       	ldi	r21, 0x47	; 71
    4614:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4618:	18 16       	cp	r1, r24
    461a:	4c f5       	brge	.+82     	; 0x466e <get_password+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    461c:	69 8d       	ldd	r22, Y+25	; 0x19
    461e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4620:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4622:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	40 e2       	ldi	r20, 0x20	; 32
    462a:	51 e4       	ldi	r21, 0x41	; 65
    462c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	bc 01       	movw	r22, r24
    4636:	cd 01       	movw	r24, r26
    4638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463c:	dc 01       	movw	r26, r24
    463e:	cb 01       	movw	r24, r22
    4640:	9c 8b       	std	Y+20, r25	; 0x14
    4642:	8b 8b       	std	Y+19, r24	; 0x13
    4644:	0f c0       	rjmp	.+30     	; 0x4664 <get_password+0xee>
    4646:	88 ec       	ldi	r24, 0xC8	; 200
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	9a 8b       	std	Y+18, r25	; 0x12
    464c:	89 8b       	std	Y+17, r24	; 0x11
    464e:	89 89       	ldd	r24, Y+17	; 0x11
    4650:	9a 89       	ldd	r25, Y+18	; 0x12
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	f1 f7       	brne	.-4      	; 0x4652 <get_password+0xdc>
    4656:	9a 8b       	std	Y+18, r25	; 0x12
    4658:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465a:	8b 89       	ldd	r24, Y+19	; 0x13
    465c:	9c 89       	ldd	r25, Y+20	; 0x14
    465e:	01 97       	sbiw	r24, 0x01	; 1
    4660:	9c 8b       	std	Y+20, r25	; 0x14
    4662:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4664:	8b 89       	ldd	r24, Y+19	; 0x13
    4666:	9c 89       	ldd	r25, Y+20	; 0x14
    4668:	00 97       	sbiw	r24, 0x00	; 0
    466a:	69 f7       	brne	.-38     	; 0x4646 <get_password+0xd0>
    466c:	14 c0       	rjmp	.+40     	; 0x4696 <get_password+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    466e:	6d 89       	ldd	r22, Y+21	; 0x15
    4670:	7e 89       	ldd	r23, Y+22	; 0x16
    4672:	8f 89       	ldd	r24, Y+23	; 0x17
    4674:	98 8d       	ldd	r25, Y+24	; 0x18
    4676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    467a:	dc 01       	movw	r26, r24
    467c:	cb 01       	movw	r24, r22
    467e:	9c 8b       	std	Y+20, r25	; 0x14
    4680:	8b 8b       	std	Y+19, r24	; 0x13
    4682:	8b 89       	ldd	r24, Y+19	; 0x13
    4684:	9c 89       	ldd	r25, Y+20	; 0x14
    4686:	98 8b       	std	Y+16, r25	; 0x10
    4688:	8f 87       	std	Y+15, r24	; 0x0f
    468a:	8f 85       	ldd	r24, Y+15	; 0x0f
    468c:	98 89       	ldd	r25, Y+16	; 0x10
    468e:	01 97       	sbiw	r24, 0x01	; 1
    4690:	f1 f7       	brne	.-4      	; 0x468e <get_password+0x118>
    4692:	98 8b       	std	Y+16, r25	; 0x10
    4694:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	password_rom[i]=EEPROM_Read(0xA6,i);
    4696:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4698:	08 2f       	mov	r16, r24
    469a:	10 e0       	ldi	r17, 0x00	; 0
    469c:	86 ea       	ldi	r24, 0xA6	; 166
    469e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    46a0:	0e 94 42 0b 	call	0x1684	; 0x1684 <EEPROM_Read>
    46a4:	f8 01       	movw	r30, r16
    46a6:	eb 50       	subi	r30, 0x0B	; 11
    46a8:	fe 4f       	sbci	r31, 0xFE	; 254
    46aa:	80 83       	st	Z, r24
    46ac:	80 e0       	ldi	r24, 0x00	; 0
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	a8 ec       	ldi	r26, 0xC8	; 200
    46b2:	b2 e4       	ldi	r27, 0x42	; 66
    46b4:	8b 87       	std	Y+11, r24	; 0x0b
    46b6:	9c 87       	std	Y+12, r25	; 0x0c
    46b8:	ad 87       	std	Y+13, r26	; 0x0d
    46ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    46be:	7c 85       	ldd	r23, Y+12	; 0x0c
    46c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    46c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    46c4:	20 e0       	ldi	r18, 0x00	; 0
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	4a ef       	ldi	r20, 0xFA	; 250
    46ca:	54 e4       	ldi	r21, 0x44	; 68
    46cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d0:	dc 01       	movw	r26, r24
    46d2:	cb 01       	movw	r24, r22
    46d4:	8f 83       	std	Y+7, r24	; 0x07
    46d6:	98 87       	std	Y+8, r25	; 0x08
    46d8:	a9 87       	std	Y+9, r26	; 0x09
    46da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46dc:	6f 81       	ldd	r22, Y+7	; 0x07
    46de:	78 85       	ldd	r23, Y+8	; 0x08
    46e0:	89 85       	ldd	r24, Y+9	; 0x09
    46e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46e4:	20 e0       	ldi	r18, 0x00	; 0
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	40 e8       	ldi	r20, 0x80	; 128
    46ea:	5f e3       	ldi	r21, 0x3F	; 63
    46ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46f0:	88 23       	and	r24, r24
    46f2:	2c f4       	brge	.+10     	; 0x46fe <get_password+0x188>
		__ticks = 1;
    46f4:	81 e0       	ldi	r24, 0x01	; 1
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	9e 83       	std	Y+6, r25	; 0x06
    46fa:	8d 83       	std	Y+5, r24	; 0x05
    46fc:	3f c0       	rjmp	.+126    	; 0x477c <get_password+0x206>
	else if (__tmp > 65535)
    46fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4700:	78 85       	ldd	r23, Y+8	; 0x08
    4702:	89 85       	ldd	r24, Y+9	; 0x09
    4704:	9a 85       	ldd	r25, Y+10	; 0x0a
    4706:	20 e0       	ldi	r18, 0x00	; 0
    4708:	3f ef       	ldi	r19, 0xFF	; 255
    470a:	4f e7       	ldi	r20, 0x7F	; 127
    470c:	57 e4       	ldi	r21, 0x47	; 71
    470e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4712:	18 16       	cp	r1, r24
    4714:	4c f5       	brge	.+82     	; 0x4768 <get_password+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4716:	6b 85       	ldd	r22, Y+11	; 0x0b
    4718:	7c 85       	ldd	r23, Y+12	; 0x0c
    471a:	8d 85       	ldd	r24, Y+13	; 0x0d
    471c:	9e 85       	ldd	r25, Y+14	; 0x0e
    471e:	20 e0       	ldi	r18, 0x00	; 0
    4720:	30 e0       	ldi	r19, 0x00	; 0
    4722:	40 e2       	ldi	r20, 0x20	; 32
    4724:	51 e4       	ldi	r21, 0x41	; 65
    4726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    472a:	dc 01       	movw	r26, r24
    472c:	cb 01       	movw	r24, r22
    472e:	bc 01       	movw	r22, r24
    4730:	cd 01       	movw	r24, r26
    4732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	9e 83       	std	Y+6, r25	; 0x06
    473c:	8d 83       	std	Y+5, r24	; 0x05
    473e:	0f c0       	rjmp	.+30     	; 0x475e <get_password+0x1e8>
    4740:	88 ec       	ldi	r24, 0xC8	; 200
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	9c 83       	std	Y+4, r25	; 0x04
    4746:	8b 83       	std	Y+3, r24	; 0x03
    4748:	8b 81       	ldd	r24, Y+3	; 0x03
    474a:	9c 81       	ldd	r25, Y+4	; 0x04
    474c:	01 97       	sbiw	r24, 0x01	; 1
    474e:	f1 f7       	brne	.-4      	; 0x474c <get_password+0x1d6>
    4750:	9c 83       	std	Y+4, r25	; 0x04
    4752:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4754:	8d 81       	ldd	r24, Y+5	; 0x05
    4756:	9e 81       	ldd	r25, Y+6	; 0x06
    4758:	01 97       	sbiw	r24, 0x01	; 1
    475a:	9e 83       	std	Y+6, r25	; 0x06
    475c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    475e:	8d 81       	ldd	r24, Y+5	; 0x05
    4760:	9e 81       	ldd	r25, Y+6	; 0x06
    4762:	00 97       	sbiw	r24, 0x00	; 0
    4764:	69 f7       	brne	.-38     	; 0x4740 <get_password+0x1ca>
    4766:	14 c0       	rjmp	.+40     	; 0x4790 <get_password+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4768:	6f 81       	ldd	r22, Y+7	; 0x07
    476a:	78 85       	ldd	r23, Y+8	; 0x08
    476c:	89 85       	ldd	r24, Y+9	; 0x09
    476e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4774:	dc 01       	movw	r26, r24
    4776:	cb 01       	movw	r24, r22
    4778:	9e 83       	std	Y+6, r25	; 0x06
    477a:	8d 83       	std	Y+5, r24	; 0x05
    477c:	8d 81       	ldd	r24, Y+5	; 0x05
    477e:	9e 81       	ldd	r25, Y+6	; 0x06
    4780:	9a 83       	std	Y+2, r25	; 0x02
    4782:	89 83       	std	Y+1, r24	; 0x01
    4784:	89 81       	ldd	r24, Y+1	; 0x01
    4786:	9a 81       	ldd	r25, Y+2	; 0x02
    4788:	01 97       	sbiw	r24, 0x01	; 1
    478a:	f1 f7       	brne	.-4      	; 0x4788 <get_password+0x212>
    478c:	9a 83       	std	Y+2, r25	; 0x02
    478e:	89 83       	std	Y+1, r24	; 0x01

uint8 i;
GIE_voidDisable();
TWI_init_master();

for(i=0;i<SIZE_PASSWORD;i++){
    4790:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4792:	8f 5f       	subi	r24, 0xFF	; 255
    4794:	8d 8f       	std	Y+29, r24	; 0x1d
    4796:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4798:	84 30       	cpi	r24, 0x04	; 4
    479a:	08 f4       	brcc	.+2      	; 0x479e <get_password+0x228>
    479c:	fe ce       	rjmp	.-516    	; 0x459a <get_password+0x24>
	EEPROM_Write(0xA6,i,passward[i]);
	_delay_ms(100);
	password_rom[i]=EEPROM_Read(0xA6,i);
	_delay_ms(100);
	 }
GIE_voidEnable();
    479e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <GIE_voidEnable>
}
    47a2:	6d 96       	adiw	r28, 0x1d	; 29
    47a4:	0f b6       	in	r0, 0x3f	; 63
    47a6:	f8 94       	cli
    47a8:	de bf       	out	0x3e, r29	; 62
    47aa:	0f be       	out	0x3f, r0	; 63
    47ac:	cd bf       	out	0x3d, r28	; 61
    47ae:	cf 91       	pop	r28
    47b0:	df 91       	pop	r29
    47b2:	1f 91       	pop	r17
    47b4:	0f 91       	pop	r16
    47b6:	08 95       	ret

000047b8 <password_check>:
void password_check(uint8* pass_rom , uint8* entered_password,uint8* result){
    47b8:	df 93       	push	r29
    47ba:	cf 93       	push	r28
    47bc:	cd b7       	in	r28, 0x3d	; 61
    47be:	de b7       	in	r29, 0x3e	; 62
    47c0:	27 97       	sbiw	r28, 0x07	; 7
    47c2:	0f b6       	in	r0, 0x3f	; 63
    47c4:	f8 94       	cli
    47c6:	de bf       	out	0x3e, r29	; 62
    47c8:	0f be       	out	0x3f, r0	; 63
    47ca:	cd bf       	out	0x3d, r28	; 61
    47cc:	9b 83       	std	Y+3, r25	; 0x03
    47ce:	8a 83       	std	Y+2, r24	; 0x02
    47d0:	7d 83       	std	Y+5, r23	; 0x05
    47d2:	6c 83       	std	Y+4, r22	; 0x04
    47d4:	5f 83       	std	Y+7, r21	; 0x07
    47d6:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	for(i=0;i<SIZE_PASSWORD;i++){
    47d8:	19 82       	std	Y+1, r1	; 0x01
    47da:	1f c0       	rjmp	.+62     	; 0x481a <password_check+0x62>
		if(pass_rom[i]!=entered_password[i]){
    47dc:	89 81       	ldd	r24, Y+1	; 0x01
    47de:	28 2f       	mov	r18, r24
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	8a 81       	ldd	r24, Y+2	; 0x02
    47e4:	9b 81       	ldd	r25, Y+3	; 0x03
    47e6:	fc 01       	movw	r30, r24
    47e8:	e2 0f       	add	r30, r18
    47ea:	f3 1f       	adc	r31, r19
    47ec:	40 81       	ld	r20, Z
    47ee:	89 81       	ldd	r24, Y+1	; 0x01
    47f0:	28 2f       	mov	r18, r24
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	8c 81       	ldd	r24, Y+4	; 0x04
    47f6:	9d 81       	ldd	r25, Y+5	; 0x05
    47f8:	fc 01       	movw	r30, r24
    47fa:	e2 0f       	add	r30, r18
    47fc:	f3 1f       	adc	r31, r19
    47fe:	80 81       	ld	r24, Z
    4800:	48 17       	cp	r20, r24
    4802:	21 f0       	breq	.+8      	; 0x480c <password_check+0x54>
			*result=0;
    4804:	ee 81       	ldd	r30, Y+6	; 0x06
    4806:	ff 81       	ldd	r31, Y+7	; 0x07
    4808:	10 82       	st	Z, r1
    480a:	0a c0       	rjmp	.+20     	; 0x4820 <password_check+0x68>
			break;
		}

			*result=1;
    480c:	ee 81       	ldd	r30, Y+6	; 0x06
    480e:	ff 81       	ldd	r31, Y+7	; 0x07
    4810:	81 e0       	ldi	r24, 0x01	; 1
    4812:	80 83       	st	Z, r24
	 }
GIE_voidEnable();
}
void password_check(uint8* pass_rom , uint8* entered_password,uint8* result){
	uint8 i;
	for(i=0;i<SIZE_PASSWORD;i++){
    4814:	89 81       	ldd	r24, Y+1	; 0x01
    4816:	8f 5f       	subi	r24, 0xFF	; 255
    4818:	89 83       	std	Y+1, r24	; 0x01
    481a:	89 81       	ldd	r24, Y+1	; 0x01
    481c:	84 30       	cpi	r24, 0x04	; 4
    481e:	f0 f2       	brcs	.-68     	; 0x47dc <password_check+0x24>
		}

			*result=1;
	}

}
    4820:	27 96       	adiw	r28, 0x07	; 7
    4822:	0f b6       	in	r0, 0x3f	; 63
    4824:	f8 94       	cli
    4826:	de bf       	out	0x3e, r29	; 62
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	cd bf       	out	0x3d, r28	; 61
    482c:	cf 91       	pop	r28
    482e:	df 91       	pop	r29
    4830:	08 95       	ret

00004832 <Start_servo>:
 void Start_servo (void){
    4832:	df 93       	push	r29
    4834:	cf 93       	push	r28
    4836:	cd b7       	in	r28, 0x3d	; 61
    4838:	de b7       	in	r29, 0x3e	; 62
    483a:	aa 97       	sbiw	r28, 0x2a	; 42
    483c:	0f b6       	in	r0, 0x3f	; 63
    483e:	f8 94       	cli
    4840:	de bf       	out	0x3e, r29	; 62
    4842:	0f be       	out	0x3f, r0	; 63
    4844:	cd bf       	out	0x3d, r28	; 61

	SERVO_voidMove(SERVO_u8NUM_0,SERVO_MOVE_TO_0);
    4846:	80 e0       	ldi	r24, 0x00	; 0
    4848:	40 e0       	ldi	r20, 0x00	; 0
    484a:	50 e0       	ldi	r21, 0x00	; 0
    484c:	60 e0       	ldi	r22, 0x00	; 0
    484e:	70 e0       	ldi	r23, 0x00	; 0
    4850:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <SERVO_voidMove>
    4854:	80 e0       	ldi	r24, 0x00	; 0
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	aa e7       	ldi	r26, 0x7A	; 122
    485a:	b4 e4       	ldi	r27, 0x44	; 68
    485c:	8f a3       	std	Y+39, r24	; 0x27
    485e:	98 a7       	std	Y+40, r25	; 0x28
    4860:	a9 a7       	std	Y+41, r26	; 0x29
    4862:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4864:	6f a1       	ldd	r22, Y+39	; 0x27
    4866:	78 a5       	ldd	r23, Y+40	; 0x28
    4868:	89 a5       	ldd	r24, Y+41	; 0x29
    486a:	9a a5       	ldd	r25, Y+42	; 0x2a
    486c:	20 e0       	ldi	r18, 0x00	; 0
    486e:	30 e0       	ldi	r19, 0x00	; 0
    4870:	4a ef       	ldi	r20, 0xFA	; 250
    4872:	54 e4       	ldi	r21, 0x44	; 68
    4874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4878:	dc 01       	movw	r26, r24
    487a:	cb 01       	movw	r24, r22
    487c:	8b a3       	std	Y+35, r24	; 0x23
    487e:	9c a3       	std	Y+36, r25	; 0x24
    4880:	ad a3       	std	Y+37, r26	; 0x25
    4882:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4884:	6b a1       	ldd	r22, Y+35	; 0x23
    4886:	7c a1       	ldd	r23, Y+36	; 0x24
    4888:	8d a1       	ldd	r24, Y+37	; 0x25
    488a:	9e a1       	ldd	r25, Y+38	; 0x26
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	40 e8       	ldi	r20, 0x80	; 128
    4892:	5f e3       	ldi	r21, 0x3F	; 63
    4894:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4898:	88 23       	and	r24, r24
    489a:	2c f4       	brge	.+10     	; 0x48a6 <Start_servo+0x74>
		__ticks = 1;
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	9a a3       	std	Y+34, r25	; 0x22
    48a2:	89 a3       	std	Y+33, r24	; 0x21
    48a4:	3f c0       	rjmp	.+126    	; 0x4924 <Start_servo+0xf2>
	else if (__tmp > 65535)
    48a6:	6b a1       	ldd	r22, Y+35	; 0x23
    48a8:	7c a1       	ldd	r23, Y+36	; 0x24
    48aa:	8d a1       	ldd	r24, Y+37	; 0x25
    48ac:	9e a1       	ldd	r25, Y+38	; 0x26
    48ae:	20 e0       	ldi	r18, 0x00	; 0
    48b0:	3f ef       	ldi	r19, 0xFF	; 255
    48b2:	4f e7       	ldi	r20, 0x7F	; 127
    48b4:	57 e4       	ldi	r21, 0x47	; 71
    48b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48ba:	18 16       	cp	r1, r24
    48bc:	4c f5       	brge	.+82     	; 0x4910 <Start_servo+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48be:	6f a1       	ldd	r22, Y+39	; 0x27
    48c0:	78 a5       	ldd	r23, Y+40	; 0x28
    48c2:	89 a5       	ldd	r24, Y+41	; 0x29
    48c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    48c6:	20 e0       	ldi	r18, 0x00	; 0
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	40 e2       	ldi	r20, 0x20	; 32
    48cc:	51 e4       	ldi	r21, 0x41	; 65
    48ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d2:	dc 01       	movw	r26, r24
    48d4:	cb 01       	movw	r24, r22
    48d6:	bc 01       	movw	r22, r24
    48d8:	cd 01       	movw	r24, r26
    48da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48de:	dc 01       	movw	r26, r24
    48e0:	cb 01       	movw	r24, r22
    48e2:	9a a3       	std	Y+34, r25	; 0x22
    48e4:	89 a3       	std	Y+33, r24	; 0x21
    48e6:	0f c0       	rjmp	.+30     	; 0x4906 <Start_servo+0xd4>
    48e8:	88 ec       	ldi	r24, 0xC8	; 200
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	98 a3       	std	Y+32, r25	; 0x20
    48ee:	8f 8f       	std	Y+31, r24	; 0x1f
    48f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48f2:	98 a1       	ldd	r25, Y+32	; 0x20
    48f4:	01 97       	sbiw	r24, 0x01	; 1
    48f6:	f1 f7       	brne	.-4      	; 0x48f4 <Start_servo+0xc2>
    48f8:	98 a3       	std	Y+32, r25	; 0x20
    48fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48fc:	89 a1       	ldd	r24, Y+33	; 0x21
    48fe:	9a a1       	ldd	r25, Y+34	; 0x22
    4900:	01 97       	sbiw	r24, 0x01	; 1
    4902:	9a a3       	std	Y+34, r25	; 0x22
    4904:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4906:	89 a1       	ldd	r24, Y+33	; 0x21
    4908:	9a a1       	ldd	r25, Y+34	; 0x22
    490a:	00 97       	sbiw	r24, 0x00	; 0
    490c:	69 f7       	brne	.-38     	; 0x48e8 <Start_servo+0xb6>
    490e:	14 c0       	rjmp	.+40     	; 0x4938 <Start_servo+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4910:	6b a1       	ldd	r22, Y+35	; 0x23
    4912:	7c a1       	ldd	r23, Y+36	; 0x24
    4914:	8d a1       	ldd	r24, Y+37	; 0x25
    4916:	9e a1       	ldd	r25, Y+38	; 0x26
    4918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    491c:	dc 01       	movw	r26, r24
    491e:	cb 01       	movw	r24, r22
    4920:	9a a3       	std	Y+34, r25	; 0x22
    4922:	89 a3       	std	Y+33, r24	; 0x21
    4924:	89 a1       	ldd	r24, Y+33	; 0x21
    4926:	9a a1       	ldd	r25, Y+34	; 0x22
    4928:	9e 8f       	std	Y+30, r25	; 0x1e
    492a:	8d 8f       	std	Y+29, r24	; 0x1d
    492c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    492e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4930:	01 97       	sbiw	r24, 0x01	; 1
    4932:	f1 f7       	brne	.-4      	; 0x4930 <Start_servo+0xfe>
    4934:	9e 8f       	std	Y+30, r25	; 0x1e
    4936:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			SERVO_voidMove(SERVO_u8NUM_0,SERVO_MOVE_TO_90);
    4938:	80 e0       	ldi	r24, 0x00	; 0
    493a:	40 e0       	ldi	r20, 0x00	; 0
    493c:	50 e0       	ldi	r21, 0x00	; 0
    493e:	60 ef       	ldi	r22, 0xF0	; 240
    4940:	70 e4       	ldi	r23, 0x40	; 64
    4942:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <SERVO_voidMove>
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	aa e7       	ldi	r26, 0x7A	; 122
    494c:	b4 e4       	ldi	r27, 0x44	; 68
    494e:	89 8f       	std	Y+25, r24	; 0x19
    4950:	9a 8f       	std	Y+26, r25	; 0x1a
    4952:	ab 8f       	std	Y+27, r26	; 0x1b
    4954:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4956:	69 8d       	ldd	r22, Y+25	; 0x19
    4958:	7a 8d       	ldd	r23, Y+26	; 0x1a
    495a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    495c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    495e:	20 e0       	ldi	r18, 0x00	; 0
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	4a ef       	ldi	r20, 0xFA	; 250
    4964:	54 e4       	ldi	r21, 0x44	; 68
    4966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    496a:	dc 01       	movw	r26, r24
    496c:	cb 01       	movw	r24, r22
    496e:	8d 8b       	std	Y+21, r24	; 0x15
    4970:	9e 8b       	std	Y+22, r25	; 0x16
    4972:	af 8b       	std	Y+23, r26	; 0x17
    4974:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4976:	6d 89       	ldd	r22, Y+21	; 0x15
    4978:	7e 89       	ldd	r23, Y+22	; 0x16
    497a:	8f 89       	ldd	r24, Y+23	; 0x17
    497c:	98 8d       	ldd	r25, Y+24	; 0x18
    497e:	20 e0       	ldi	r18, 0x00	; 0
    4980:	30 e0       	ldi	r19, 0x00	; 0
    4982:	40 e8       	ldi	r20, 0x80	; 128
    4984:	5f e3       	ldi	r21, 0x3F	; 63
    4986:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    498a:	88 23       	and	r24, r24
    498c:	2c f4       	brge	.+10     	; 0x4998 <Start_servo+0x166>
		__ticks = 1;
    498e:	81 e0       	ldi	r24, 0x01	; 1
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	9c 8b       	std	Y+20, r25	; 0x14
    4994:	8b 8b       	std	Y+19, r24	; 0x13
    4996:	3f c0       	rjmp	.+126    	; 0x4a16 <Start_servo+0x1e4>
	else if (__tmp > 65535)
    4998:	6d 89       	ldd	r22, Y+21	; 0x15
    499a:	7e 89       	ldd	r23, Y+22	; 0x16
    499c:	8f 89       	ldd	r24, Y+23	; 0x17
    499e:	98 8d       	ldd	r25, Y+24	; 0x18
    49a0:	20 e0       	ldi	r18, 0x00	; 0
    49a2:	3f ef       	ldi	r19, 0xFF	; 255
    49a4:	4f e7       	ldi	r20, 0x7F	; 127
    49a6:	57 e4       	ldi	r21, 0x47	; 71
    49a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49ac:	18 16       	cp	r1, r24
    49ae:	4c f5       	brge	.+82     	; 0x4a02 <Start_servo+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49b0:	69 8d       	ldd	r22, Y+25	; 0x19
    49b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49b8:	20 e0       	ldi	r18, 0x00	; 0
    49ba:	30 e0       	ldi	r19, 0x00	; 0
    49bc:	40 e2       	ldi	r20, 0x20	; 32
    49be:	51 e4       	ldi	r21, 0x41	; 65
    49c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49c4:	dc 01       	movw	r26, r24
    49c6:	cb 01       	movw	r24, r22
    49c8:	bc 01       	movw	r22, r24
    49ca:	cd 01       	movw	r24, r26
    49cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d0:	dc 01       	movw	r26, r24
    49d2:	cb 01       	movw	r24, r22
    49d4:	9c 8b       	std	Y+20, r25	; 0x14
    49d6:	8b 8b       	std	Y+19, r24	; 0x13
    49d8:	0f c0       	rjmp	.+30     	; 0x49f8 <Start_servo+0x1c6>
    49da:	88 ec       	ldi	r24, 0xC8	; 200
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	9a 8b       	std	Y+18, r25	; 0x12
    49e0:	89 8b       	std	Y+17, r24	; 0x11
    49e2:	89 89       	ldd	r24, Y+17	; 0x11
    49e4:	9a 89       	ldd	r25, Y+18	; 0x12
    49e6:	01 97       	sbiw	r24, 0x01	; 1
    49e8:	f1 f7       	brne	.-4      	; 0x49e6 <Start_servo+0x1b4>
    49ea:	9a 8b       	std	Y+18, r25	; 0x12
    49ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49ee:	8b 89       	ldd	r24, Y+19	; 0x13
    49f0:	9c 89       	ldd	r25, Y+20	; 0x14
    49f2:	01 97       	sbiw	r24, 0x01	; 1
    49f4:	9c 8b       	std	Y+20, r25	; 0x14
    49f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49f8:	8b 89       	ldd	r24, Y+19	; 0x13
    49fa:	9c 89       	ldd	r25, Y+20	; 0x14
    49fc:	00 97       	sbiw	r24, 0x00	; 0
    49fe:	69 f7       	brne	.-38     	; 0x49da <Start_servo+0x1a8>
    4a00:	14 c0       	rjmp	.+40     	; 0x4a2a <Start_servo+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a02:	6d 89       	ldd	r22, Y+21	; 0x15
    4a04:	7e 89       	ldd	r23, Y+22	; 0x16
    4a06:	8f 89       	ldd	r24, Y+23	; 0x17
    4a08:	98 8d       	ldd	r25, Y+24	; 0x18
    4a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a0e:	dc 01       	movw	r26, r24
    4a10:	cb 01       	movw	r24, r22
    4a12:	9c 8b       	std	Y+20, r25	; 0x14
    4a14:	8b 8b       	std	Y+19, r24	; 0x13
    4a16:	8b 89       	ldd	r24, Y+19	; 0x13
    4a18:	9c 89       	ldd	r25, Y+20	; 0x14
    4a1a:	98 8b       	std	Y+16, r25	; 0x10
    4a1c:	8f 87       	std	Y+15, r24	; 0x0f
    4a1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a20:	98 89       	ldd	r25, Y+16	; 0x10
    4a22:	01 97       	sbiw	r24, 0x01	; 1
    4a24:	f1 f7       	brne	.-4      	; 0x4a22 <Start_servo+0x1f0>
    4a26:	98 8b       	std	Y+16, r25	; 0x10
    4a28:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			SERVO_voidMove(SERVO_u8NUM_0,SERVO_MOVE_TO_180);
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	40 e0       	ldi	r20, 0x00	; 0
    4a2e:	50 e0       	ldi	r21, 0x00	; 0
    4a30:	60 e2       	ldi	r22, 0x20	; 32
    4a32:	71 e4       	ldi	r23, 0x41	; 65
    4a34:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <SERVO_voidMove>
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	aa e7       	ldi	r26, 0x7A	; 122
    4a3e:	b4 e4       	ldi	r27, 0x44	; 68
    4a40:	8b 87       	std	Y+11, r24	; 0x0b
    4a42:	9c 87       	std	Y+12, r25	; 0x0c
    4a44:	ad 87       	std	Y+13, r26	; 0x0d
    4a46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	4a ef       	ldi	r20, 0xFA	; 250
    4a56:	54 e4       	ldi	r21, 0x44	; 68
    4a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a5c:	dc 01       	movw	r26, r24
    4a5e:	cb 01       	movw	r24, r22
    4a60:	8f 83       	std	Y+7, r24	; 0x07
    4a62:	98 87       	std	Y+8, r25	; 0x08
    4a64:	a9 87       	std	Y+9, r26	; 0x09
    4a66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a68:	6f 81       	ldd	r22, Y+7	; 0x07
    4a6a:	78 85       	ldd	r23, Y+8	; 0x08
    4a6c:	89 85       	ldd	r24, Y+9	; 0x09
    4a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	40 e8       	ldi	r20, 0x80	; 128
    4a76:	5f e3       	ldi	r21, 0x3F	; 63
    4a78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a7c:	88 23       	and	r24, r24
    4a7e:	2c f4       	brge	.+10     	; 0x4a8a <Start_servo+0x258>
		__ticks = 1;
    4a80:	81 e0       	ldi	r24, 0x01	; 1
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	9e 83       	std	Y+6, r25	; 0x06
    4a86:	8d 83       	std	Y+5, r24	; 0x05
    4a88:	3f c0       	rjmp	.+126    	; 0x4b08 <Start_servo+0x2d6>
	else if (__tmp > 65535)
    4a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    4a8c:	78 85       	ldd	r23, Y+8	; 0x08
    4a8e:	89 85       	ldd	r24, Y+9	; 0x09
    4a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	3f ef       	ldi	r19, 0xFF	; 255
    4a96:	4f e7       	ldi	r20, 0x7F	; 127
    4a98:	57 e4       	ldi	r21, 0x47	; 71
    4a9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a9e:	18 16       	cp	r1, r24
    4aa0:	4c f5       	brge	.+82     	; 0x4af4 <Start_servo+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4aaa:	20 e0       	ldi	r18, 0x00	; 0
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	40 e2       	ldi	r20, 0x20	; 32
    4ab0:	51 e4       	ldi	r21, 0x41	; 65
    4ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	bc 01       	movw	r22, r24
    4abc:	cd 01       	movw	r24, r26
    4abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac2:	dc 01       	movw	r26, r24
    4ac4:	cb 01       	movw	r24, r22
    4ac6:	9e 83       	std	Y+6, r25	; 0x06
    4ac8:	8d 83       	std	Y+5, r24	; 0x05
    4aca:	0f c0       	rjmp	.+30     	; 0x4aea <Start_servo+0x2b8>
    4acc:	88 ec       	ldi	r24, 0xC8	; 200
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	9c 83       	std	Y+4, r25	; 0x04
    4ad2:	8b 83       	std	Y+3, r24	; 0x03
    4ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ad8:	01 97       	sbiw	r24, 0x01	; 1
    4ada:	f1 f7       	brne	.-4      	; 0x4ad8 <Start_servo+0x2a6>
    4adc:	9c 83       	std	Y+4, r25	; 0x04
    4ade:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae4:	01 97       	sbiw	r24, 0x01	; 1
    4ae6:	9e 83       	std	Y+6, r25	; 0x06
    4ae8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aea:	8d 81       	ldd	r24, Y+5	; 0x05
    4aec:	9e 81       	ldd	r25, Y+6	; 0x06
    4aee:	00 97       	sbiw	r24, 0x00	; 0
    4af0:	69 f7       	brne	.-38     	; 0x4acc <Start_servo+0x29a>
    4af2:	14 c0       	rjmp	.+40     	; 0x4b1c <Start_servo+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4af4:	6f 81       	ldd	r22, Y+7	; 0x07
    4af6:	78 85       	ldd	r23, Y+8	; 0x08
    4af8:	89 85       	ldd	r24, Y+9	; 0x09
    4afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    4afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b00:	dc 01       	movw	r26, r24
    4b02:	cb 01       	movw	r24, r22
    4b04:	9e 83       	std	Y+6, r25	; 0x06
    4b06:	8d 83       	std	Y+5, r24	; 0x05
    4b08:	8d 81       	ldd	r24, Y+5	; 0x05
    4b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b0c:	9a 83       	std	Y+2, r25	; 0x02
    4b0e:	89 83       	std	Y+1, r24	; 0x01
    4b10:	89 81       	ldd	r24, Y+1	; 0x01
    4b12:	9a 81       	ldd	r25, Y+2	; 0x02
    4b14:	01 97       	sbiw	r24, 0x01	; 1
    4b16:	f1 f7       	brne	.-4      	; 0x4b14 <Start_servo+0x2e2>
    4b18:	9a 83       	std	Y+2, r25	; 0x02
    4b1a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
}
    4b1c:	aa 96       	adiw	r28, 0x2a	; 42
    4b1e:	0f b6       	in	r0, 0x3f	; 63
    4b20:	f8 94       	cli
    4b22:	de bf       	out	0x3e, r29	; 62
    4b24:	0f be       	out	0x3f, r0	; 63
    4b26:	cd bf       	out	0x3d, r28	; 61
    4b28:	cf 91       	pop	r28
    4b2a:	df 91       	pop	r29
    4b2c:	08 95       	ret

00004b2e <start_void>:
void start_void(void){
    4b2e:	df 93       	push	r29
    4b30:	cf 93       	push	r28
    4b32:	cd b7       	in	r28, 0x3d	; 61
    4b34:	de b7       	in	r29, 0x3e	; 62
	get_password();
    4b36:	0e 94 bb 22 	call	0x4576	; 0x4576 <get_password>
    4b3a:	04 c0       	rjmp	.+8      	; 0x4b44 <start_void+0x16>
	while(read_distance_ok !='1'){
		uart_void_read (&read_distance_ok);
    4b3c:	8a ee       	ldi	r24, 0xEA	; 234
    4b3e:	91 e0       	ldi	r25, 0x01	; 1
    4b40:	0e 94 76 2e 	call	0x5cec	; 0x5cec <uart_void_read>
			SERVO_voidMove(SERVO_u8NUM_0,SERVO_MOVE_TO_180);
			_delay_ms(1000);
}
void start_void(void){
	get_password();
	while(read_distance_ok !='1'){
    4b44:	80 91 ea 01 	lds	r24, 0x01EA
    4b48:	90 91 eb 01 	lds	r25, 0x01EB
    4b4c:	81 33       	cpi	r24, 0x31	; 49
    4b4e:	91 05       	cpc	r25, r1
    4b50:	a9 f7       	brne	.-22     	; 0x4b3c <start_void+0xe>
		uart_void_read (&read_distance_ok);
	}
	 Door_void();
    4b52:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <Door_void>
}
    4b56:	cf 91       	pop	r28
    4b58:	df 91       	pop	r29
    4b5a:	08 95       	ret

00004b5c <TWI_repeated_start>:

#include "Master_TWI.h"
#include "Master_TWI_priv.h"

void TWI_repeated_start(void)
{
    4b5c:	df 93       	push	r29
    4b5e:	cf 93       	push	r28
    4b60:	cd b7       	in	r28, 0x3d	; 61
    4b62:	de b7       	in	r29, 0x3e	; 62
// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    4b64:	e6 e5       	ldi	r30, 0x56	; 86
    4b66:	f0 e0       	ldi	r31, 0x00	; 0
    4b68:	84 ea       	ldi	r24, 0xA4	; 164
    4b6a:	80 83       	st	Z, r24
while(!(TWCR & (1<<TWINT))); // wait till restart condition is transmitted
    4b6c:	e6 e5       	ldi	r30, 0x56	; 86
    4b6e:	f0 e0       	ldi	r31, 0x00	; 0
    4b70:	80 81       	ld	r24, Z
    4b72:	88 23       	and	r24, r24
    4b74:	dc f7       	brge	.-10     	; 0x4b6c <TWI_repeated_start+0x10>
while((TWSR & 0xF8)!= 0x10); // Check for the acknoledgement
    4b76:	e1 e2       	ldi	r30, 0x21	; 33
    4b78:	f0 e0       	ldi	r31, 0x00	; 0
    4b7a:	80 81       	ld	r24, Z
    4b7c:	88 2f       	mov	r24, r24
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	88 7f       	andi	r24, 0xF8	; 248
    4b82:	90 70       	andi	r25, 0x00	; 0
    4b84:	80 31       	cpi	r24, 0x10	; 16
    4b86:	91 05       	cpc	r25, r1
    4b88:	b1 f7       	brne	.-20     	; 0x4b76 <TWI_repeated_start+0x1a>
}
    4b8a:	cf 91       	pop	r28
    4b8c:	df 91       	pop	r29
    4b8e:	08 95       	ret

00004b90 <TWI_init_master>:
void TWI_init_master(void) // Function to initialize master
{
    4b90:	df 93       	push	r29
    4b92:	cf 93       	push	r28
    4b94:	cd b7       	in	r28, 0x3d	; 61
    4b96:	de b7       	in	r29, 0x3e	; 62

    TWBR=0xCF;    // Bit rate
    4b98:	e0 e2       	ldi	r30, 0x20	; 32
    4b9a:	f0 e0       	ldi	r31, 0x00	; 0
    4b9c:	8f ec       	ldi	r24, 0xCF	; 207
    4b9e:	80 83       	st	Z, r24
   TWSR=0x00;    // Setting prescalar bits
    4ba0:	e1 e2       	ldi	r30, 0x21	; 33
    4ba2:	f0 e0       	ldi	r31, 0x00	; 0
    4ba4:	10 82       	st	Z, r1
    // SCL freq= F_CPU/(16+2(TWBR).4^TWPS)
}
    4ba6:	cf 91       	pop	r28
    4ba8:	df 91       	pop	r29
    4baa:	08 95       	ret

00004bac <TWI_start>:

void TWI_start(void)
{
    4bac:	df 93       	push	r29
    4bae:	cf 93       	push	r28
    4bb0:	cd b7       	in	r28, 0x3d	; 61
    4bb2:	de b7       	in	r29, 0x3e	; 62
    // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
    TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    4bb4:	e6 e5       	ldi	r30, 0x56	; 86
    4bb6:	f0 e0       	ldi	r31, 0x00	; 0
    4bb8:	84 ea       	ldi	r24, 0xA4	; 164
    4bba:	80 83       	st	Z, r24
    while(!(TWCR & (1<<TWINT))); // Wait till start condition is transmitted
    4bbc:	e6 e5       	ldi	r30, 0x56	; 86
    4bbe:	f0 e0       	ldi	r31, 0x00	; 0
    4bc0:	80 81       	ld	r24, Z
    4bc2:	88 23       	and	r24, r24
    4bc4:	dc f7       	brge	.-10     	; 0x4bbc <TWI_start+0x10>
    while((TWSR & 0xF8)!= 0x08); // Check for the acknowledgement
    4bc6:	e1 e2       	ldi	r30, 0x21	; 33
    4bc8:	f0 e0       	ldi	r31, 0x00	; 0
    4bca:	80 81       	ld	r24, Z
    4bcc:	88 2f       	mov	r24, r24
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	88 7f       	andi	r24, 0xF8	; 248
    4bd2:	90 70       	andi	r25, 0x00	; 0
    4bd4:	88 30       	cpi	r24, 0x08	; 8
    4bd6:	91 05       	cpc	r25, r1
    4bd8:	b1 f7       	brne	.-20     	; 0x4bc6 <TWI_start+0x1a>
}
    4bda:	cf 91       	pop	r28
    4bdc:	df 91       	pop	r29
    4bde:	08 95       	ret

00004be0 <TWI_read_address>:
void TWI_read_address(unsigned char data)
{
    4be0:	df 93       	push	r29
    4be2:	cf 93       	push	r28
    4be4:	0f 92       	push	r0
    4be6:	cd b7       	in	r28, 0x3d	; 61
    4be8:	de b7       	in	r29, 0x3e	; 62
    4bea:	89 83       	std	Y+1, r24	; 0x01
    TWDR=data;    // Address and read instruction
    4bec:	e3 e2       	ldi	r30, 0x23	; 35
    4bee:	f0 e0       	ldi	r31, 0x00	; 0
    4bf0:	89 81       	ldd	r24, Y+1	; 0x01
    4bf2:	80 83       	st	Z, r24
    TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    4bf4:	e6 e5       	ldi	r30, 0x56	; 86
    4bf6:	f0 e0       	ldi	r31, 0x00	; 0
    4bf8:	84 e8       	ldi	r24, 0x84	; 132
    4bfa:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
    4bfc:	e6 e5       	ldi	r30, 0x56	; 86
    4bfe:	f0 e0       	ldi	r31, 0x00	; 0
    4c00:	80 81       	ld	r24, Z
    4c02:	88 23       	and	r24, r24
    4c04:	dc f7       	brge	.-10     	; 0x4bfc <TWI_read_address+0x1c>
  //  while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
}
    4c06:	0f 90       	pop	r0
    4c08:	cf 91       	pop	r28
    4c0a:	df 91       	pop	r29
    4c0c:	08 95       	ret

00004c0e <TWI_write_data>:
void TWI_write_data(unsigned char data)
{
    4c0e:	df 93       	push	r29
    4c10:	cf 93       	push	r28
    4c12:	0f 92       	push	r0
    4c14:	cd b7       	in	r28, 0x3d	; 61
    4c16:	de b7       	in	r29, 0x3e	; 62
    4c18:	89 83       	std	Y+1, r24	; 0x01
    TWDR=data;    // put data in TWDR
    4c1a:	e3 e2       	ldi	r30, 0x23	; 35
    4c1c:	f0 e0       	ldi	r31, 0x00	; 0
    4c1e:	89 81       	ldd	r24, Y+1	; 0x01
    4c20:	80 83       	st	Z, r24
    TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    4c22:	e6 e5       	ldi	r30, 0x56	; 86
    4c24:	f0 e0       	ldi	r31, 0x00	; 0
    4c26:	84 e8       	ldi	r24, 0x84	; 132
    4c28:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    4c2a:	e6 e5       	ldi	r30, 0x56	; 86
    4c2c:	f0 e0       	ldi	r31, 0x00	; 0
    4c2e:	80 81       	ld	r24, Z
    4c30:	88 23       	and	r24, r24
    4c32:	dc f7       	brge	.-10     	; 0x4c2a <TWI_write_data+0x1c>
    //while((TWSR & 0xF8) != 0x28); // Check for the acknoledgement
}
    4c34:	0f 90       	pop	r0
    4c36:	cf 91       	pop	r28
    4c38:	df 91       	pop	r29
    4c3a:	08 95       	ret

00004c3c <TWI_stop>:
void TWI_stop(void)
{
    4c3c:	df 93       	push	r29
    4c3e:	cf 93       	push	r28
    4c40:	cd b7       	in	r28, 0x3d	; 61
    4c42:	de b7       	in	r29, 0x3e	; 62
    // Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
    TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    4c44:	e6 e5       	ldi	r30, 0x56	; 86
    4c46:	f0 e0       	ldi	r31, 0x00	; 0
    4c48:	84 e9       	ldi	r24, 0x94	; 148
    4c4a:	80 83       	st	Z, r24
  //  while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
}
    4c4c:	cf 91       	pop	r28
    4c4e:	df 91       	pop	r29
    4c50:	08 95       	ret

00004c52 <TWI_read_data>:
uint8 TWI_read_data(void)
{
    4c52:	df 93       	push	r29
    4c54:	cf 93       	push	r28
    4c56:	cd b7       	in	r28, 0x3d	; 61
    4c58:	de b7       	in	r29, 0x3e	; 62
    TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    4c5a:	e6 e5       	ldi	r30, 0x56	; 86
    4c5c:	f0 e0       	ldi	r31, 0x00	; 0
    4c5e:	84 e8       	ldi	r24, 0x84	; 132
    4c60:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    4c62:	e6 e5       	ldi	r30, 0x56	; 86
    4c64:	f0 e0       	ldi	r31, 0x00	; 0
    4c66:	80 81       	ld	r24, Z
    4c68:	88 23       	and	r24, r24
    4c6a:	dc f7       	brge	.-10     	; 0x4c62 <TWI_read_data+0x10>
    //while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
  return TWDR;
    4c6c:	e3 e2       	ldi	r30, 0x23	; 35
    4c6e:	f0 e0       	ldi	r31, 0x00	; 0
    4c70:	80 81       	ld	r24, Z

}
    4c72:	cf 91       	pop	r28
    4c74:	df 91       	pop	r29
    4c76:	08 95       	ret

00004c78 <TWI_write_address>:
void TWI_write_address(unsigned char data)
{
    4c78:	df 93       	push	r29
    4c7a:	cf 93       	push	r28
    4c7c:	0f 92       	push	r0
    4c7e:	cd b7       	in	r28, 0x3d	; 61
    4c80:	de b7       	in	r29, 0x3e	; 62
    4c82:	89 83       	std	Y+1, r24	; 0x01
TWDR=data; // Address and write instruction
    4c84:	e3 e2       	ldi	r30, 0x23	; 35
    4c86:	f0 e0       	ldi	r31, 0x00	; 0
    4c88:	89 81       	ldd	r24, Y+1	; 0x01
    4c8a:	80 83       	st	Z, r24
TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    4c8c:	e6 e5       	ldi	r30, 0x56	; 86
    4c8e:	f0 e0       	ldi	r31, 0x00	; 0
    4c90:	84 e8       	ldi	r24, 0x84	; 132
    4c92:	80 83       	st	Z, r24
while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    4c94:	e6 e5       	ldi	r30, 0x56	; 86
    4c96:	f0 e0       	ldi	r31, 0x00	; 0
    4c98:	80 81       	ld	r24, Z
    4c9a:	88 23       	and	r24, r24
    4c9c:	dc f7       	brge	.-10     	; 0x4c94 <TWI_write_address+0x1c>
//while((TWSR & 0xF8)!= 0x18);  // Check for the acknoledgement
}
    4c9e:	0f 90       	pop	r0
    4ca0:	cf 91       	pop	r28
    4ca2:	df 91       	pop	r29
    4ca4:	08 95       	ret

00004ca6 <Pwm_tenu_Intial>:
#include "pwm_priv.h"
pf pf_delay_intial[NUM_OF_TIMERS]={TIM0_voidInit,TIM2_voidInit};
tpfu32 pfu32_ms_delay[NUM_OF_TIMERS]={TIM0_voidDelay_ms,TIM2_voidDelay_ms};
uint32 u32_time_on_ms;
uint32 u32_time_off_ms;
tenuErrorStatus Pwm_tenu_Intial (uint8 u8_num_of_pwm_cpy){
    4ca6:	df 93       	push	r29
    4ca8:	cf 93       	push	r28
    4caa:	00 d0       	rcall	.+0      	; 0x4cac <Pwm_tenu_Intial+0x6>
    4cac:	cd b7       	in	r28, 0x3d	; 61
    4cae:	de b7       	in	r29, 0x3e	; 62
    4cb0:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus tes_check_error_loc =E_OK;
    4cb2:	19 82       	std	Y+1, r1	; 0x01
	if (u8_num_of_pwm_cpy<U8_MAX_NUM_OF_PWM){
    4cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb6:	88 23       	and	r24, r24
    4cb8:	e1 f4       	brne	.+56     	; 0x4cf2 <Pwm_tenu_Intial+0x4c>
		pf_delay_intial[pwm_cfg[u8_num_of_pwm_cpy].u8_timer_num_loc]();
    4cba:	8a 81       	ldd	r24, Y+2	; 0x02
    4cbc:	88 2f       	mov	r24, r24
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	88 0f       	add	r24, r24
    4cc2:	99 1f       	adc	r25, r25
    4cc4:	9c 01       	movw	r18, r24
    4cc6:	22 0f       	add	r18, r18
    4cc8:	33 1f       	adc	r19, r19
    4cca:	22 0f       	add	r18, r18
    4ccc:	33 1f       	adc	r19, r19
    4cce:	82 0f       	add	r24, r18
    4cd0:	93 1f       	adc	r25, r19
    4cd2:	fc 01       	movw	r30, r24
    4cd4:	e6 52       	subi	r30, 0x26	; 38
    4cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    4cd8:	80 81       	ld	r24, Z
    4cda:	88 2f       	mov	r24, r24
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	88 0f       	add	r24, r24
    4ce0:	99 1f       	adc	r25, r25
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	e6 53       	subi	r30, 0x36	; 54
    4ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ce8:	01 90       	ld	r0, Z+
    4cea:	f0 81       	ld	r31, Z
    4cec:	e0 2d       	mov	r30, r0
    4cee:	09 95       	icall
    4cf0:	02 c0       	rjmp	.+4      	; 0x4cf6 <Pwm_tenu_Intial+0x50>
	}
	else{
		tes_check_error_loc =E_NOK_PARAM_OUT_OF_RANGE;
    4cf2:	82 e0       	ldi	r24, 0x02	; 2
    4cf4:	89 83       	std	Y+1, r24	; 0x01
	}
	return tes_check_error_loc;
    4cf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    4cf8:	0f 90       	pop	r0
    4cfa:	0f 90       	pop	r0
    4cfc:	cf 91       	pop	r28
    4cfe:	df 91       	pop	r29
    4d00:	08 95       	ret

00004d02 <Pwm_tenu_Set_freq_duty>:
tenuErrorStatus Pwm_tenu_Set_freq_duty (uint8 u8_num_of_pwm_cpy ){
    4d02:	df 93       	push	r29
    4d04:	cf 93       	push	r28
    4d06:	cd b7       	in	r28, 0x3d	; 61
    4d08:	de b7       	in	r29, 0x3e	; 62
    4d0a:	2e 97       	sbiw	r28, 0x0e	; 14
    4d0c:	0f b6       	in	r0, 0x3f	; 63
    4d0e:	f8 94       	cli
    4d10:	de bf       	out	0x3e, r29	; 62
    4d12:	0f be       	out	0x3f, r0	; 63
    4d14:	cd bf       	out	0x3d, r28	; 61
    4d16:	8e 87       	std	Y+14, r24	; 0x0e
	tenuErrorStatus tes_check_error_loc =E_OK;
    4d18:	1d 86       	std	Y+13, r1	; 0x0d
	if (u8_num_of_pwm_cpy<U8_MAX_NUM_OF_PWM){
    4d1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d1c:	88 23       	and	r24, r24
    4d1e:	09 f0       	breq	.+2      	; 0x4d22 <Pwm_tenu_Set_freq_duty+0x20>
    4d20:	86 c0       	rjmp	.+268    	; 0x4e2e <Pwm_tenu_Set_freq_duty+0x12c>
	float32 f32_total_time_loc =1/(pwm_cfg[u8_num_of_pwm_cpy].f32_freq_loc);
    4d22:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d24:	28 2f       	mov	r18, r24
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	c9 01       	movw	r24, r18
    4d2a:	88 0f       	add	r24, r24
    4d2c:	99 1f       	adc	r25, r25
    4d2e:	88 0f       	add	r24, r24
    4d30:	99 1f       	adc	r25, r25
    4d32:	82 0f       	add	r24, r18
    4d34:	93 1f       	adc	r25, r19
    4d36:	01 96       	adiw	r24, 0x01	; 1
    4d38:	88 0f       	add	r24, r24
    4d3a:	99 1f       	adc	r25, r25
    4d3c:	fc 01       	movw	r30, r24
    4d3e:	e6 52       	subi	r30, 0x26	; 38
    4d40:	fe 4f       	sbci	r31, 0xFE	; 254
    4d42:	20 81       	ld	r18, Z
    4d44:	31 81       	ldd	r19, Z+1	; 0x01
    4d46:	42 81       	ldd	r20, Z+2	; 0x02
    4d48:	53 81       	ldd	r21, Z+3	; 0x03
    4d4a:	60 e0       	ldi	r22, 0x00	; 0
    4d4c:	70 e0       	ldi	r23, 0x00	; 0
    4d4e:	80 e8       	ldi	r24, 0x80	; 128
    4d50:	9f e3       	ldi	r25, 0x3F	; 63
    4d52:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4d56:	dc 01       	movw	r26, r24
    4d58:	cb 01       	movw	r24, r22
    4d5a:	89 87       	std	Y+9, r24	; 0x09
    4d5c:	9a 87       	std	Y+10, r25	; 0x0a
    4d5e:	ab 87       	std	Y+11, r26	; 0x0b
    4d60:	bc 87       	std	Y+12, r27	; 0x0c
	float32 f32_time_on_loc=f32_total_time_loc*pwm_cfg[u8_num_of_pwm_cpy].f32_duty_loc;
    4d62:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d64:	88 2f       	mov	r24, r24
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	88 0f       	add	r24, r24
    4d6a:	99 1f       	adc	r25, r25
    4d6c:	9c 01       	movw	r18, r24
    4d6e:	22 0f       	add	r18, r18
    4d70:	33 1f       	adc	r19, r19
    4d72:	22 0f       	add	r18, r18
    4d74:	33 1f       	adc	r19, r19
    4d76:	82 0f       	add	r24, r18
    4d78:	93 1f       	adc	r25, r19
    4d7a:	fc 01       	movw	r30, r24
    4d7c:	e0 52       	subi	r30, 0x20	; 32
    4d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d80:	80 81       	ld	r24, Z
    4d82:	91 81       	ldd	r25, Z+1	; 0x01
    4d84:	a2 81       	ldd	r26, Z+2	; 0x02
    4d86:	b3 81       	ldd	r27, Z+3	; 0x03
    4d88:	bc 01       	movw	r22, r24
    4d8a:	cd 01       	movw	r24, r26
    4d8c:	29 85       	ldd	r18, Y+9	; 0x09
    4d8e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4d90:	4b 85       	ldd	r20, Y+11	; 0x0b
    4d92:	5c 85       	ldd	r21, Y+12	; 0x0c
    4d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d98:	dc 01       	movw	r26, r24
    4d9a:	cb 01       	movw	r24, r22
    4d9c:	8d 83       	std	Y+5, r24	; 0x05
    4d9e:	9e 83       	std	Y+6, r25	; 0x06
    4da0:	af 83       	std	Y+7, r26	; 0x07
    4da2:	b8 87       	std	Y+8, r27	; 0x08
	float32 f32_time_off_loc=f32_total_time_loc-f32_time_on_loc;
    4da4:	69 85       	ldd	r22, Y+9	; 0x09
    4da6:	7a 85       	ldd	r23, Y+10	; 0x0a
    4da8:	8b 85       	ldd	r24, Y+11	; 0x0b
    4daa:	9c 85       	ldd	r25, Y+12	; 0x0c
    4dac:	2d 81       	ldd	r18, Y+5	; 0x05
    4dae:	3e 81       	ldd	r19, Y+6	; 0x06
    4db0:	4f 81       	ldd	r20, Y+7	; 0x07
    4db2:	58 85       	ldd	r21, Y+8	; 0x08
    4db4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4db8:	dc 01       	movw	r26, r24
    4dba:	cb 01       	movw	r24, r22
    4dbc:	89 83       	std	Y+1, r24	; 0x01
    4dbe:	9a 83       	std	Y+2, r25	; 0x02
    4dc0:	ab 83       	std	Y+3, r26	; 0x03
    4dc2:	bc 83       	std	Y+4, r27	; 0x04
	u32_time_on_ms=(uint32)(f32_time_on_loc*1000);
    4dc4:	6d 81       	ldd	r22, Y+5	; 0x05
    4dc6:	7e 81       	ldd	r23, Y+6	; 0x06
    4dc8:	8f 81       	ldd	r24, Y+7	; 0x07
    4dca:	98 85       	ldd	r25, Y+8	; 0x08
    4dcc:	20 e0       	ldi	r18, 0x00	; 0
    4dce:	30 e0       	ldi	r19, 0x00	; 0
    4dd0:	4a e7       	ldi	r20, 0x7A	; 122
    4dd2:	54 e4       	ldi	r21, 0x44	; 68
    4dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dd8:	dc 01       	movw	r26, r24
    4dda:	cb 01       	movw	r24, r22
    4ddc:	bc 01       	movw	r22, r24
    4dde:	cd 01       	movw	r24, r26
    4de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4de4:	dc 01       	movw	r26, r24
    4de6:	cb 01       	movw	r24, r22
    4de8:	80 93 f9 01 	sts	0x01F9, r24
    4dec:	90 93 fa 01 	sts	0x01FA, r25
    4df0:	a0 93 fb 01 	sts	0x01FB, r26
    4df4:	b0 93 fc 01 	sts	0x01FC, r27
	u32_time_off_ms=(uint32)(f32_time_off_loc*1000);
    4df8:	69 81       	ldd	r22, Y+1	; 0x01
    4dfa:	7a 81       	ldd	r23, Y+2	; 0x02
    4dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    4dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    4e00:	20 e0       	ldi	r18, 0x00	; 0
    4e02:	30 e0       	ldi	r19, 0x00	; 0
    4e04:	4a e7       	ldi	r20, 0x7A	; 122
    4e06:	54 e4       	ldi	r21, 0x44	; 68
    4e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e0c:	dc 01       	movw	r26, r24
    4e0e:	cb 01       	movw	r24, r22
    4e10:	bc 01       	movw	r22, r24
    4e12:	cd 01       	movw	r24, r26
    4e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e18:	dc 01       	movw	r26, r24
    4e1a:	cb 01       	movw	r24, r22
    4e1c:	80 93 fd 01 	sts	0x01FD, r24
    4e20:	90 93 fe 01 	sts	0x01FE, r25
    4e24:	a0 93 ff 01 	sts	0x01FF, r26
    4e28:	b0 93 00 02 	sts	0x0200, r27
    4e2c:	02 c0       	rjmp	.+4      	; 0x4e32 <Pwm_tenu_Set_freq_duty+0x130>
	}
	else{
		tes_check_error_loc =E_NOK_PARAM_OUT_OF_RANGE;
    4e2e:	82 e0       	ldi	r24, 0x02	; 2
    4e30:	8d 87       	std	Y+13, r24	; 0x0d
	}
	return tes_check_error_loc;
    4e32:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    4e34:	2e 96       	adiw	r28, 0x0e	; 14
    4e36:	0f b6       	in	r0, 0x3f	; 63
    4e38:	f8 94       	cli
    4e3a:	de bf       	out	0x3e, r29	; 62
    4e3c:	0f be       	out	0x3f, r0	; 63
    4e3e:	cd bf       	out	0x3d, r28	; 61
    4e40:	cf 91       	pop	r28
    4e42:	df 91       	pop	r29
    4e44:	08 95       	ret

00004e46 <Pwm_Void_Start>:
void Pwm_Void_Start(uint8 u8_num_of_pwm_cpy){
    4e46:	df 93       	push	r29
    4e48:	cf 93       	push	r28
    4e4a:	0f 92       	push	r0
    4e4c:	cd b7       	in	r28, 0x3d	; 61
    4e4e:	de b7       	in	r29, 0x3e	; 62
    4e50:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuWritePin(pwm_cfg[u8_num_of_pwm_cpy].u8_outpin_num_loc , DIO_u8HIGH);
    4e52:	89 81       	ldd	r24, Y+1	; 0x01
    4e54:	88 2f       	mov	r24, r24
    4e56:	90 e0       	ldi	r25, 0x00	; 0
    4e58:	88 0f       	add	r24, r24
    4e5a:	99 1f       	adc	r25, r25
    4e5c:	9c 01       	movw	r18, r24
    4e5e:	22 0f       	add	r18, r18
    4e60:	33 1f       	adc	r19, r19
    4e62:	22 0f       	add	r18, r18
    4e64:	33 1f       	adc	r19, r19
    4e66:	82 0f       	add	r24, r18
    4e68:	93 1f       	adc	r25, r19
    4e6a:	fc 01       	movw	r30, r24
    4e6c:	e5 52       	subi	r30, 0x25	; 37
    4e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e70:	80 81       	ld	r24, Z
    4e72:	61 e0       	ldi	r22, 0x01	; 1
    4e74:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
	pfu32_ms_delay[pwm_cfg[u8_num_of_pwm_cpy].u8_timer_num_loc](u32_time_on_ms);
    4e78:	89 81       	ldd	r24, Y+1	; 0x01
    4e7a:	88 2f       	mov	r24, r24
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	88 0f       	add	r24, r24
    4e80:	99 1f       	adc	r25, r25
    4e82:	9c 01       	movw	r18, r24
    4e84:	22 0f       	add	r18, r18
    4e86:	33 1f       	adc	r19, r19
    4e88:	22 0f       	add	r18, r18
    4e8a:	33 1f       	adc	r19, r19
    4e8c:	82 0f       	add	r24, r18
    4e8e:	93 1f       	adc	r25, r19
    4e90:	fc 01       	movw	r30, r24
    4e92:	e6 52       	subi	r30, 0x26	; 38
    4e94:	fe 4f       	sbci	r31, 0xFE	; 254
    4e96:	80 81       	ld	r24, Z
    4e98:	88 2f       	mov	r24, r24
    4e9a:	90 e0       	ldi	r25, 0x00	; 0
    4e9c:	88 0f       	add	r24, r24
    4e9e:	99 1f       	adc	r25, r25
    4ea0:	fc 01       	movw	r30, r24
    4ea2:	e2 53       	subi	r30, 0x32	; 50
    4ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ea6:	01 90       	ld	r0, Z+
    4ea8:	f0 81       	ld	r31, Z
    4eaa:	e0 2d       	mov	r30, r0
    4eac:	80 91 f9 01 	lds	r24, 0x01F9
    4eb0:	90 91 fa 01 	lds	r25, 0x01FA
    4eb4:	a0 91 fb 01 	lds	r26, 0x01FB
    4eb8:	b0 91 fc 01 	lds	r27, 0x01FC
    4ebc:	bc 01       	movw	r22, r24
    4ebe:	cd 01       	movw	r24, r26
    4ec0:	09 95       	icall
	DIO_enuWritePin(pwm_cfg[u8_num_of_pwm_cpy].u8_outpin_num_loc , DIO_u8LOW);
    4ec2:	89 81       	ldd	r24, Y+1	; 0x01
    4ec4:	88 2f       	mov	r24, r24
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	88 0f       	add	r24, r24
    4eca:	99 1f       	adc	r25, r25
    4ecc:	9c 01       	movw	r18, r24
    4ece:	22 0f       	add	r18, r18
    4ed0:	33 1f       	adc	r19, r19
    4ed2:	22 0f       	add	r18, r18
    4ed4:	33 1f       	adc	r19, r19
    4ed6:	82 0f       	add	r24, r18
    4ed8:	93 1f       	adc	r25, r19
    4eda:	fc 01       	movw	r30, r24
    4edc:	e5 52       	subi	r30, 0x25	; 37
    4ede:	fe 4f       	sbci	r31, 0xFE	; 254
    4ee0:	80 81       	ld	r24, Z
    4ee2:	60 e0       	ldi	r22, 0x00	; 0
    4ee4:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
	pfu32_ms_delay[pwm_cfg[u8_num_of_pwm_cpy].u8_timer_num_loc](u32_time_off_ms);
    4ee8:	89 81       	ldd	r24, Y+1	; 0x01
    4eea:	88 2f       	mov	r24, r24
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	88 0f       	add	r24, r24
    4ef0:	99 1f       	adc	r25, r25
    4ef2:	9c 01       	movw	r18, r24
    4ef4:	22 0f       	add	r18, r18
    4ef6:	33 1f       	adc	r19, r19
    4ef8:	22 0f       	add	r18, r18
    4efa:	33 1f       	adc	r19, r19
    4efc:	82 0f       	add	r24, r18
    4efe:	93 1f       	adc	r25, r19
    4f00:	fc 01       	movw	r30, r24
    4f02:	e6 52       	subi	r30, 0x26	; 38
    4f04:	fe 4f       	sbci	r31, 0xFE	; 254
    4f06:	80 81       	ld	r24, Z
    4f08:	88 2f       	mov	r24, r24
    4f0a:	90 e0       	ldi	r25, 0x00	; 0
    4f0c:	88 0f       	add	r24, r24
    4f0e:	99 1f       	adc	r25, r25
    4f10:	fc 01       	movw	r30, r24
    4f12:	e2 53       	subi	r30, 0x32	; 50
    4f14:	fe 4f       	sbci	r31, 0xFE	; 254
    4f16:	01 90       	ld	r0, Z+
    4f18:	f0 81       	ld	r31, Z
    4f1a:	e0 2d       	mov	r30, r0
    4f1c:	80 91 fd 01 	lds	r24, 0x01FD
    4f20:	90 91 fe 01 	lds	r25, 0x01FE
    4f24:	a0 91 ff 01 	lds	r26, 0x01FF
    4f28:	b0 91 00 02 	lds	r27, 0x0200
    4f2c:	bc 01       	movw	r22, r24
    4f2e:	cd 01       	movw	r24, r26
    4f30:	09 95       	icall
}
    4f32:	0f 90       	pop	r0
    4f34:	cf 91       	pop	r28
    4f36:	df 91       	pop	r29
    4f38:	08 95       	ret

00004f3a <Pwm_Void_End>:
void Pwm_Void_End(uint8 u8_num_of_pwm_cpy){
    4f3a:	df 93       	push	r29
    4f3c:	cf 93       	push	r28
    4f3e:	0f 92       	push	r0
    4f40:	cd b7       	in	r28, 0x3d	; 61
    4f42:	de b7       	in	r29, 0x3e	; 62
    4f44:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuWritePin(pwm_cfg[u8_num_of_pwm_cpy].u8_outpin_num_loc , DIO_u8LOW);
    4f46:	89 81       	ldd	r24, Y+1	; 0x01
    4f48:	88 2f       	mov	r24, r24
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	88 0f       	add	r24, r24
    4f4e:	99 1f       	adc	r25, r25
    4f50:	9c 01       	movw	r18, r24
    4f52:	22 0f       	add	r18, r18
    4f54:	33 1f       	adc	r19, r19
    4f56:	22 0f       	add	r18, r18
    4f58:	33 1f       	adc	r19, r19
    4f5a:	82 0f       	add	r24, r18
    4f5c:	93 1f       	adc	r25, r19
    4f5e:	fc 01       	movw	r30, r24
    4f60:	e5 52       	subi	r30, 0x25	; 37
    4f62:	fe 4f       	sbci	r31, 0xFE	; 254
    4f64:	80 81       	ld	r24, Z
    4f66:	60 e0       	ldi	r22, 0x00	; 0
    4f68:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_enuWritePin>
	
}
    4f6c:	0f 90       	pop	r0
    4f6e:	cf 91       	pop	r28
    4f70:	df 91       	pop	r29
    4f72:	08 95       	ret

00004f74 <TIM0_voidInit>:
pf TIM0_pfOvfCallback =TIM0_Void_dummy ;

uint8 u8_used ,factor;
uint32 counter, delay,TimerCounter;
void TIM0_voidInit(void)
{
    4f74:	df 93       	push	r29
    4f76:	cf 93       	push	r28
    4f78:	cd b7       	in	r28, 0x3d	; 61
    4f7a:	de b7       	in	r29, 0x3e	; 62
#if   TIM0_MODE == TIM0_NORMAL_MODE
	CLR_BIT(TCCR0 , 6);
    4f7c:	a3 e5       	ldi	r26, 0x53	; 83
    4f7e:	b0 e0       	ldi	r27, 0x00	; 0
    4f80:	e3 e5       	ldi	r30, 0x53	; 83
    4f82:	f0 e0       	ldi	r31, 0x00	; 0
    4f84:	80 81       	ld	r24, Z
    4f86:	8f 7b       	andi	r24, 0xBF	; 191
    4f88:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , 3);
    4f8a:	a3 e5       	ldi	r26, 0x53	; 83
    4f8c:	b0 e0       	ldi	r27, 0x00	; 0
    4f8e:	e3 e5       	ldi	r30, 0x53	; 83
    4f90:	f0 e0       	ldi	r31, 0x00	; 0
    4f92:	80 81       	ld	r24, Z
    4f94:	87 7f       	andi	r24, 0xF7	; 247
    4f96:	8c 93       	st	X, r24
#else
	SET_BIT(TCCR0 , 6);
	SET_BIT(TCCR0 , 3);
#endif

	TCCR0 &= (0xF8);/* clear reg 0b1111 1000 */
    4f98:	a3 e5       	ldi	r26, 0x53	; 83
    4f9a:	b0 e0       	ldi	r27, 0x00	; 0
    4f9c:	e3 e5       	ldi	r30, 0x53	; 83
    4f9e:	f0 e0       	ldi	r31, 0x00	; 0
    4fa0:	80 81       	ld	r24, Z
    4fa2:	88 7f       	andi	r24, 0xF8	; 248
    4fa4:	8c 93       	st	X, r24
	TCCR0 |=((0x07)& TIM0_PRESCALLER_8) ; /* write in reg */
    4fa6:	a3 e5       	ldi	r26, 0x53	; 83
    4fa8:	b0 e0       	ldi	r27, 0x00	; 0
    4faa:	e3 e5       	ldi	r30, 0x53	; 83
    4fac:	f0 e0       	ldi	r31, 0x00	; 0
    4fae:	80 81       	ld	r24, Z
    4fb0:	82 60       	ori	r24, 0x02	; 2
    4fb2:	8c 93       	st	X, r24
	TCNT0 = 0;
    4fb4:	e2 e5       	ldi	r30, 0x52	; 82
    4fb6:	f0 e0       	ldi	r31, 0x00	; 0
    4fb8:	10 82       	st	Z, r1
	OCR0  = 0;
    4fba:	ec e5       	ldi	r30, 0x5C	; 92
    4fbc:	f0 e0       	ldi	r31, 0x00	; 0
    4fbe:	10 82       	st	Z, r1
	/* Disable Interrupt  OVF CM */
	CLR_BIT(TIMSK , 0) ;
    4fc0:	a9 e5       	ldi	r26, 0x59	; 89
    4fc2:	b0 e0       	ldi	r27, 0x00	; 0
    4fc4:	e9 e5       	ldi	r30, 0x59	; 89
    4fc6:	f0 e0       	ldi	r31, 0x00	; 0
    4fc8:	80 81       	ld	r24, Z
    4fca:	8e 7f       	andi	r24, 0xFE	; 254
    4fcc:	8c 93       	st	X, r24
	CLR_BIT(TIMSK , 1) ;
    4fce:	a9 e5       	ldi	r26, 0x59	; 89
    4fd0:	b0 e0       	ldi	r27, 0x00	; 0
    4fd2:	e9 e5       	ldi	r30, 0x59	; 89
    4fd4:	f0 e0       	ldi	r31, 0x00	; 0
    4fd6:	80 81       	ld	r24, Z
    4fd8:	8d 7f       	andi	r24, 0xFD	; 253
    4fda:	8c 93       	st	X, r24
	/* Clear IF flags OVF CM */
	SET_BIT(TIFR  , 0) ;
    4fdc:	a8 e5       	ldi	r26, 0x58	; 88
    4fde:	b0 e0       	ldi	r27, 0x00	; 0
    4fe0:	e8 e5       	ldi	r30, 0x58	; 88
    4fe2:	f0 e0       	ldi	r31, 0x00	; 0
    4fe4:	80 81       	ld	r24, Z
    4fe6:	81 60       	ori	r24, 0x01	; 1
    4fe8:	8c 93       	st	X, r24
	SET_BIT(TIFR  , 1) ;
    4fea:	a8 e5       	ldi	r26, 0x58	; 88
    4fec:	b0 e0       	ldi	r27, 0x00	; 0
    4fee:	e8 e5       	ldi	r30, 0x58	; 88
    4ff0:	f0 e0       	ldi	r31, 0x00	; 0
    4ff2:	80 81       	ld	r24, Z
    4ff4:	82 60       	ori	r24, 0x02	; 2
    4ff6:	8c 93       	st	X, r24

}
    4ff8:	cf 91       	pop	r28
    4ffa:	df 91       	pop	r29
    4ffc:	08 95       	ret

00004ffe <TIM0_voidSetPreloadValue>:
void TIM0_voidSetPreloadValue (uint8 u8PreloadValueCpy)
{
    4ffe:	df 93       	push	r29
    5000:	cf 93       	push	r28
    5002:	0f 92       	push	r0
    5004:	cd b7       	in	r28, 0x3d	; 61
    5006:	de b7       	in	r29, 0x3e	; 62
    5008:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8PreloadValueCpy;
    500a:	e2 e5       	ldi	r30, 0x52	; 82
    500c:	f0 e0       	ldi	r31, 0x00	; 0
    500e:	89 81       	ldd	r24, Y+1	; 0x01
    5010:	80 83       	st	Z, r24
}
    5012:	0f 90       	pop	r0
    5014:	cf 91       	pop	r28
    5016:	df 91       	pop	r29
    5018:	08 95       	ret

0000501a <TIM0_voidSetOutputCompareValue>:
void TIM0_voidSetOutputCompareValue (uint8 u8LoadValueCpy)
{
    501a:	df 93       	push	r29
    501c:	cf 93       	push	r28
    501e:	0f 92       	push	r0
    5020:	cd b7       	in	r28, 0x3d	; 61
    5022:	de b7       	in	r29, 0x3e	; 62
    5024:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8LoadValueCpy; 
    5026:	ec e5       	ldi	r30, 0x5C	; 92
    5028:	f0 e0       	ldi	r31, 0x00	; 0
    502a:	89 81       	ldd	r24, Y+1	; 0x01
    502c:	80 83       	st	Z, r24
}
    502e:	0f 90       	pop	r0
    5030:	cf 91       	pop	r28
    5032:	df 91       	pop	r29
    5034:	08 95       	ret

00005036 <TIM0_voidEnableOVFIntterrupt>:
void TIM0_voidEnableOVFIntterrupt(void)
{
    5036:	df 93       	push	r29
    5038:	cf 93       	push	r28
    503a:	cd b7       	in	r28, 0x3d	; 61
    503c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 0) ;
    503e:	a9 e5       	ldi	r26, 0x59	; 89
    5040:	b0 e0       	ldi	r27, 0x00	; 0
    5042:	e9 e5       	ldi	r30, 0x59	; 89
    5044:	f0 e0       	ldi	r31, 0x00	; 0
    5046:	80 81       	ld	r24, Z
    5048:	81 60       	ori	r24, 0x01	; 1
    504a:	8c 93       	st	X, r24
}
    504c:	cf 91       	pop	r28
    504e:	df 91       	pop	r29
    5050:	08 95       	ret

00005052 <TIM0_voidDisableOVFIntterrupt>:
void TIM0_voidDisableOVFIntterrupt(void)
{
    5052:	df 93       	push	r29
    5054:	cf 93       	push	r28
    5056:	cd b7       	in	r28, 0x3d	; 61
    5058:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 0) ;
    505a:	a9 e5       	ldi	r26, 0x59	; 89
    505c:	b0 e0       	ldi	r27, 0x00	; 0
    505e:	e9 e5       	ldi	r30, 0x59	; 89
    5060:	f0 e0       	ldi	r31, 0x00	; 0
    5062:	80 81       	ld	r24, Z
    5064:	8e 7f       	andi	r24, 0xFE	; 254
    5066:	8c 93       	st	X, r24
}
    5068:	cf 91       	pop	r28
    506a:	df 91       	pop	r29
    506c:	08 95       	ret

0000506e <TIM0_voidEnableCTCIntterrupt>:
void TIM0_voidEnableCTCIntterrupt(void)
{
    506e:	df 93       	push	r29
    5070:	cf 93       	push	r28
    5072:	cd b7       	in	r28, 0x3d	; 61
    5074:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 1) ;
    5076:	a9 e5       	ldi	r26, 0x59	; 89
    5078:	b0 e0       	ldi	r27, 0x00	; 0
    507a:	e9 e5       	ldi	r30, 0x59	; 89
    507c:	f0 e0       	ldi	r31, 0x00	; 0
    507e:	80 81       	ld	r24, Z
    5080:	82 60       	ori	r24, 0x02	; 2
    5082:	8c 93       	st	X, r24
}
    5084:	cf 91       	pop	r28
    5086:	df 91       	pop	r29
    5088:	08 95       	ret

0000508a <TIM0_voidDisableCTCIntterrupt>:
void TIM0_voidDisableCTCIntterrupt(void)
{
    508a:	df 93       	push	r29
    508c:	cf 93       	push	r28
    508e:	cd b7       	in	r28, 0x3d	; 61
    5090:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK , 1) ;
    5092:	a9 e5       	ldi	r26, 0x59	; 89
    5094:	b0 e0       	ldi	r27, 0x00	; 0
    5096:	e9 e5       	ldi	r30, 0x59	; 89
    5098:	f0 e0       	ldi	r31, 0x00	; 0
    509a:	80 81       	ld	r24, Z
    509c:	8d 7f       	andi	r24, 0xFD	; 253
    509e:	8c 93       	st	X, r24
}
    50a0:	cf 91       	pop	r28
    50a2:	df 91       	pop	r29
    50a4:	08 95       	ret

000050a6 <TIM0_voidSetOvfCallback>:
void TIM0_voidSetOvfCallback(pf pfOvfCallbackCpy)
{
    50a6:	df 93       	push	r29
    50a8:	cf 93       	push	r28
    50aa:	00 d0       	rcall	.+0      	; 0x50ac <TIM0_voidSetOvfCallback+0x6>
    50ac:	cd b7       	in	r28, 0x3d	; 61
    50ae:	de b7       	in	r29, 0x3e	; 62
    50b0:	9a 83       	std	Y+2, r25	; 0x02
    50b2:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfOvfCallback = pfOvfCallbackCpy ;
    50b4:	89 81       	ldd	r24, Y+1	; 0x01
    50b6:	9a 81       	ldd	r25, Y+2	; 0x02
    50b8:	90 93 d5 01 	sts	0x01D5, r25
    50bc:	80 93 d4 01 	sts	0x01D4, r24

}
    50c0:	0f 90       	pop	r0
    50c2:	0f 90       	pop	r0
    50c4:	cf 91       	pop	r28
    50c6:	df 91       	pop	r29
    50c8:	08 95       	ret

000050ca <TIM0_voidSetCtcCallback>:
void TIM0_voidSetCtcCallback(pf pfCtcCallbackCpy)
{  
    50ca:	df 93       	push	r29
    50cc:	cf 93       	push	r28
    50ce:	00 d0       	rcall	.+0      	; 0x50d0 <TIM0_voidSetCtcCallback+0x6>
    50d0:	cd b7       	in	r28, 0x3d	; 61
    50d2:	de b7       	in	r29, 0x3e	; 62
    50d4:	9a 83       	std	Y+2, r25	; 0x02
    50d6:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfCtcCallback = pfCtcCallbackCpy;
    50d8:	89 81       	ldd	r24, Y+1	; 0x01
    50da:	9a 81       	ldd	r25, Y+2	; 0x02
    50dc:	90 93 d3 01 	sts	0x01D3, r25
    50e0:	80 93 d2 01 	sts	0x01D2, r24

}
    50e4:	0f 90       	pop	r0
    50e6:	0f 90       	pop	r0
    50e8:	cf 91       	pop	r28
    50ea:	df 91       	pop	r29
    50ec:	08 95       	ret

000050ee <__vector_11>:
/*OVF ISR*/
void __vector_11 (void) __attribute__((signal ,used));
void __vector_11 (void)
{  
    50ee:	1f 92       	push	r1
    50f0:	0f 92       	push	r0
    50f2:	0f b6       	in	r0, 0x3f	; 63
    50f4:	0f 92       	push	r0
    50f6:	11 24       	eor	r1, r1
    50f8:	2f 93       	push	r18
    50fa:	3f 93       	push	r19
    50fc:	4f 93       	push	r20
    50fe:	5f 93       	push	r21
    5100:	6f 93       	push	r22
    5102:	7f 93       	push	r23
    5104:	8f 93       	push	r24
    5106:	9f 93       	push	r25
    5108:	af 93       	push	r26
    510a:	bf 93       	push	r27
    510c:	ef 93       	push	r30
    510e:	ff 93       	push	r31
    5110:	df 93       	push	r29
    5112:	cf 93       	push	r28
    5114:	cd b7       	in	r28, 0x3d	; 61
    5116:	de b7       	in	r29, 0x3e	; 62
	if ( TIM0__u8_get_detect_up() ) {
    5118:	0e 94 91 29 	call	0x5322	; 0x5322 <TIM0__u8_get_detect_up>
    511c:	88 23       	and	r24, r24
    511e:	99 f0       	breq	.+38     	; 0x5146 <__vector_11+0x58>
		// voltage rise was detected previously
		TimerCounter++; // count the number of overflows
    5120:	80 91 09 02 	lds	r24, 0x0209
    5124:	90 91 0a 02 	lds	r25, 0x020A
    5128:	a0 91 0b 02 	lds	r26, 0x020B
    512c:	b0 91 0c 02 	lds	r27, 0x020C
    5130:	01 96       	adiw	r24, 0x01	; 1
    5132:	a1 1d       	adc	r26, r1
    5134:	b1 1d       	adc	r27, r1
    5136:	80 93 09 02 	sts	0x0209, r24
    513a:	90 93 0a 02 	sts	0x020A, r25
    513e:	a0 93 0b 02 	sts	0x020B, r26
    5142:	b0 93 0c 02 	sts	0x020C, r27

		}
	if(u8_used){
    5146:	80 91 0e 02 	lds	r24, 0x020E
    514a:	88 23       	and	r24, r24
    514c:	a1 f0       	breq	.+40     	; 0x5176 <__vector_11+0x88>
		counter++;
    514e:	80 91 01 02 	lds	r24, 0x0201
    5152:	90 91 02 02 	lds	r25, 0x0202
    5156:	a0 91 03 02 	lds	r26, 0x0203
    515a:	b0 91 04 02 	lds	r27, 0x0204
    515e:	01 96       	adiw	r24, 0x01	; 1
    5160:	a1 1d       	adc	r26, r1
    5162:	b1 1d       	adc	r27, r1
    5164:	80 93 01 02 	sts	0x0201, r24
    5168:	90 93 02 02 	sts	0x0202, r25
    516c:	a0 93 03 02 	sts	0x0203, r26
    5170:	b0 93 04 02 	sts	0x0204, r27
    5174:	05 c0       	rjmp	.+10     	; 0x5180 <__vector_11+0x92>
	}
	else{

	TIM0_pfOvfCallback();}
    5176:	e0 91 d4 01 	lds	r30, 0x01D4
    517a:	f0 91 d5 01 	lds	r31, 0x01D5
    517e:	09 95       	icall

}
    5180:	cf 91       	pop	r28
    5182:	df 91       	pop	r29
    5184:	ff 91       	pop	r31
    5186:	ef 91       	pop	r30
    5188:	bf 91       	pop	r27
    518a:	af 91       	pop	r26
    518c:	9f 91       	pop	r25
    518e:	8f 91       	pop	r24
    5190:	7f 91       	pop	r23
    5192:	6f 91       	pop	r22
    5194:	5f 91       	pop	r21
    5196:	4f 91       	pop	r20
    5198:	3f 91       	pop	r19
    519a:	2f 91       	pop	r18
    519c:	0f 90       	pop	r0
    519e:	0f be       	out	0x3f, r0	; 63
    51a0:	0f 90       	pop	r0
    51a2:	1f 90       	pop	r1
    51a4:	18 95       	reti

000051a6 <__vector_10>:
/*CM ISR*/
void __vector_10 (void) __attribute__((signal ,used));
void __vector_10 (void)
{
    51a6:	1f 92       	push	r1
    51a8:	0f 92       	push	r0
    51aa:	0f b6       	in	r0, 0x3f	; 63
    51ac:	0f 92       	push	r0
    51ae:	11 24       	eor	r1, r1
    51b0:	2f 93       	push	r18
    51b2:	3f 93       	push	r19
    51b4:	4f 93       	push	r20
    51b6:	5f 93       	push	r21
    51b8:	6f 93       	push	r22
    51ba:	7f 93       	push	r23
    51bc:	8f 93       	push	r24
    51be:	9f 93       	push	r25
    51c0:	af 93       	push	r26
    51c2:	bf 93       	push	r27
    51c4:	ef 93       	push	r30
    51c6:	ff 93       	push	r31
    51c8:	df 93       	push	r29
    51ca:	cf 93       	push	r28
    51cc:	cd b7       	in	r28, 0x3d	; 61
    51ce:	de b7       	in	r29, 0x3e	; 62
		TIM0_pfCtcCallback();
    51d0:	e0 91 d2 01 	lds	r30, 0x01D2
    51d4:	f0 91 d3 01 	lds	r31, 0x01D3
    51d8:	09 95       	icall

}
    51da:	cf 91       	pop	r28
    51dc:	df 91       	pop	r29
    51de:	ff 91       	pop	r31
    51e0:	ef 91       	pop	r30
    51e2:	bf 91       	pop	r27
    51e4:	af 91       	pop	r26
    51e6:	9f 91       	pop	r25
    51e8:	8f 91       	pop	r24
    51ea:	7f 91       	pop	r23
    51ec:	6f 91       	pop	r22
    51ee:	5f 91       	pop	r21
    51f0:	4f 91       	pop	r20
    51f2:	3f 91       	pop	r19
    51f4:	2f 91       	pop	r18
    51f6:	0f 90       	pop	r0
    51f8:	0f be       	out	0x3f, r0	; 63
    51fa:	0f 90       	pop	r0
    51fc:	1f 90       	pop	r1
    51fe:	18 95       	reti

00005200 <TIM0_voidDelay_ms>:
void TIM0_voidDelay_ms(uint32 u32DalayTimeCpy)
{
    5200:	df 93       	push	r29
    5202:	cf 93       	push	r28
    5204:	00 d0       	rcall	.+0      	; 0x5206 <TIM0_voidDelay_ms+0x6>
    5206:	00 d0       	rcall	.+0      	; 0x5208 <TIM0_voidDelay_ms+0x8>
    5208:	cd b7       	in	r28, 0x3d	; 61
    520a:	de b7       	in	r29, 0x3e	; 62
    520c:	69 83       	std	Y+1, r22	; 0x01
    520e:	7a 83       	std	Y+2, r23	; 0x02
    5210:	8b 83       	std	Y+3, r24	; 0x03
    5212:	9c 83       	std	Y+4, r25	; 0x04
u8_used=1;
    5214:	81 e0       	ldi	r24, 0x01	; 1
    5216:	80 93 0e 02 	sts	0x020E, r24
TIM0_voidEnableOVFIntterrupt();
    521a:	0e 94 1b 28 	call	0x5036	; 0x5036 <TIM0_voidEnableOVFIntterrupt>
while(counter!=3);
    521e:	80 91 01 02 	lds	r24, 0x0201
    5222:	90 91 02 02 	lds	r25, 0x0202
    5226:	a0 91 03 02 	lds	r26, 0x0203
    522a:	b0 91 04 02 	lds	r27, 0x0204
    522e:	83 30       	cpi	r24, 0x03	; 3
    5230:	91 05       	cpc	r25, r1
    5232:	a1 05       	cpc	r26, r1
    5234:	b1 05       	cpc	r27, r1
    5236:	99 f7       	brne	.-26     	; 0x521e <TIM0_voidDelay_ms+0x1e>
while(TIM0_u16GetCntrValue()!=232);
    5238:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <TIM0_u16GetCntrValue>
    523c:	88 3e       	cpi	r24, 0xE8	; 232
    523e:	91 05       	cpc	r25, r1
    5240:	d9 f7       	brne	.-10     	; 0x5238 <TIM0_voidDelay_ms+0x38>
counter=0;
    5242:	10 92 01 02 	sts	0x0201, r1
    5246:	10 92 02 02 	sts	0x0202, r1
    524a:	10 92 03 02 	sts	0x0203, r1
    524e:	10 92 04 02 	sts	0x0204, r1
TIM0_voidDisableOVFIntterrupt();
    5252:	0e 94 29 28 	call	0x5052	; 0x5052 <TIM0_voidDisableOVFIntterrupt>


}
    5256:	0f 90       	pop	r0
    5258:	0f 90       	pop	r0
    525a:	0f 90       	pop	r0
    525c:	0f 90       	pop	r0
    525e:	cf 91       	pop	r28
    5260:	df 91       	pop	r29
    5262:	08 95       	ret

00005264 <TIM0_voidDelay_Init>:
void TIM0_voidDelay_Init(void){
    5264:	df 93       	push	r29
    5266:	cf 93       	push	r28
    5268:	cd b7       	in	r28, 0x3d	; 61
    526a:	de b7       	in	r29, 0x3e	; 62
#if   TIM0_MODE == TIM0_NORMAL_MODE
	CLR_BIT(TCCR0 , 6);
    526c:	a3 e5       	ldi	r26, 0x53	; 83
    526e:	b0 e0       	ldi	r27, 0x00	; 0
    5270:	e3 e5       	ldi	r30, 0x53	; 83
    5272:	f0 e0       	ldi	r31, 0x00	; 0
    5274:	80 81       	ld	r24, Z
    5276:	8f 7b       	andi	r24, 0xBF	; 191
    5278:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , 3);
    527a:	a3 e5       	ldi	r26, 0x53	; 83
    527c:	b0 e0       	ldi	r27, 0x00	; 0
    527e:	e3 e5       	ldi	r30, 0x53	; 83
    5280:	f0 e0       	ldi	r31, 0x00	; 0
    5282:	80 81       	ld	r24, Z
    5284:	87 7f       	andi	r24, 0xF7	; 247
    5286:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , 3);
#else
	SET_BIT(TCCR0 , 6);
	SET_BIT(TCCR0 , 3);
#endif
	TCCR0 &= (0xF8);/* clear reg 0b1111 1000 */
    5288:	a3 e5       	ldi	r26, 0x53	; 83
    528a:	b0 e0       	ldi	r27, 0x00	; 0
    528c:	e3 e5       	ldi	r30, 0x53	; 83
    528e:	f0 e0       	ldi	r31, 0x00	; 0
    5290:	80 81       	ld	r24, Z
    5292:	88 7f       	andi	r24, 0xF8	; 248
    5294:	8c 93       	st	X, r24
	TCCR0  |=((0x07)& TIM0_NO_PRESCALLER ) ; /* write in reg */
    5296:	a3 e5       	ldi	r26, 0x53	; 83
    5298:	b0 e0       	ldi	r27, 0x00	; 0
    529a:	e3 e5       	ldi	r30, 0x53	; 83
    529c:	f0 e0       	ldi	r31, 0x00	; 0
    529e:	80 81       	ld	r24, Z
    52a0:	81 60       	ori	r24, 0x01	; 1
    52a2:	8c 93       	st	X, r24
	TCNT0=0x00;
    52a4:	e2 e5       	ldi	r30, 0x52	; 82
    52a6:	f0 e0       	ldi	r31, 0x00	; 0
    52a8:	10 82       	st	Z, r1
	OCR0  = 0;
    52aa:	ec e5       	ldi	r30, 0x5C	; 92
    52ac:	f0 e0       	ldi	r31, 0x00	; 0
    52ae:	10 82       	st	Z, r1

}
    52b0:	cf 91       	pop	r28
    52b2:	df 91       	pop	r29
    52b4:	08 95       	ret

000052b6 <TIM0_voidSet_TimerCounter>:

void TIM0_voidSet_TimerCounter(void){
    52b6:	df 93       	push	r29
    52b8:	cf 93       	push	r28
    52ba:	cd b7       	in	r28, 0x3d	; 61
    52bc:	de b7       	in	r29, 0x3e	; 62
	TimerCounter=0;
    52be:	10 92 09 02 	sts	0x0209, r1
    52c2:	10 92 0a 02 	sts	0x020A, r1
    52c6:	10 92 0b 02 	sts	0x020B, r1
    52ca:	10 92 0c 02 	sts	0x020C, r1
}
    52ce:	cf 91       	pop	r28
    52d0:	df 91       	pop	r29
    52d2:	08 95       	ret

000052d4 <TIM0_u32get_TimerCounter>:
uint32 TIM0_u32get_TimerCounter(void){
    52d4:	df 93       	push	r29
    52d6:	cf 93       	push	r28
    52d8:	cd b7       	in	r28, 0x3d	; 61
    52da:	de b7       	in	r29, 0x3e	; 62
	return TimerCounter;
    52dc:	80 91 09 02 	lds	r24, 0x0209
    52e0:	90 91 0a 02 	lds	r25, 0x020A
    52e4:	a0 91 0b 02 	lds	r26, 0x020B
    52e8:	b0 91 0c 02 	lds	r27, 0x020C
}
    52ec:	bc 01       	movw	r22, r24
    52ee:	cd 01       	movw	r24, r26
    52f0:	cf 91       	pop	r28
    52f2:	df 91       	pop	r29
    52f4:	08 95       	ret

000052f6 <TIM0_u16GetCntrValue>:
uint16 TIM0_u16GetCntrValue(void ){
    52f6:	df 93       	push	r29
    52f8:	cf 93       	push	r28
    52fa:	cd b7       	in	r28, 0x3d	; 61
    52fc:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    52fe:	e2 e5       	ldi	r30, 0x52	; 82
    5300:	f0 e0       	ldi	r31, 0x00	; 0
    5302:	80 81       	ld	r24, Z
    5304:	88 2f       	mov	r24, r24
    5306:	90 e0       	ldi	r25, 0x00	; 0
}
    5308:	cf 91       	pop	r28
    530a:	df 91       	pop	r29
    530c:	08 95       	ret

0000530e <TIM0_voidsetCntrValue>:
void TIM0_voidsetCntrValue(void ){
    530e:	df 93       	push	r29
    5310:	cf 93       	push	r28
    5312:	cd b7       	in	r28, 0x3d	; 61
    5314:	de b7       	in	r29, 0x3e	; 62
	 TCNT0=0 ;
    5316:	e2 e5       	ldi	r30, 0x52	; 82
    5318:	f0 e0       	ldi	r31, 0x00	; 0
    531a:	10 82       	st	Z, r1
}
    531c:	cf 91       	pop	r28
    531e:	df 91       	pop	r29
    5320:	08 95       	ret

00005322 <TIM0__u8_get_detect_up>:
uint8  TIM0__u8_get_detect_up(void){
    5322:	df 93       	push	r29
    5324:	cf 93       	push	r28
    5326:	cd b7       	in	r28, 0x3d	; 61
    5328:	de b7       	in	r29, 0x3e	; 62
	return u8_up_flag;
    532a:	80 91 ee 01 	lds	r24, 0x01EE

}
    532e:	cf 91       	pop	r28
    5330:	df 91       	pop	r29
    5332:	08 95       	ret

00005334 <TIM0_void_set_up>:
void TIM0_void_set_up(void){
    5334:	df 93       	push	r29
    5336:	cf 93       	push	r28
    5338:	cd b7       	in	r28, 0x3d	; 61
    533a:	de b7       	in	r29, 0x3e	; 62
	u8_up_flag=1;
    533c:	81 e0       	ldi	r24, 0x01	; 1
    533e:	80 93 ee 01 	sts	0x01EE, r24

}
    5342:	cf 91       	pop	r28
    5344:	df 91       	pop	r29
    5346:	08 95       	ret

00005348 <TIM0_void_reset_up>:
void TIM0_void_reset_up(void){
    5348:	df 93       	push	r29
    534a:	cf 93       	push	r28
    534c:	cd b7       	in	r28, 0x3d	; 61
    534e:	de b7       	in	r29, 0x3e	; 62
	u8_up_flag=0;
    5350:	10 92 ee 01 	sts	0x01EE, r1

}
    5354:	cf 91       	pop	r28
    5356:	df 91       	pop	r29
    5358:	08 95       	ret

0000535a <TIM0_Void_dummy>:
void TIM0_Void_dummy(void){}
    535a:	df 93       	push	r29
    535c:	cf 93       	push	r28
    535e:	cd b7       	in	r28, 0x3d	; 61
    5360:	de b7       	in	r29, 0x3e	; 62
    5362:	cf 91       	pop	r28
    5364:	df 91       	pop	r29
    5366:	08 95       	ret

00005368 <TIM1_voidInit>:
pf TIM1_pfCtcBCallback;
pf TIM1_pfOvfCallback;
pf TIM1_pfICUCallBack;

void TIM1_voidInit(void)
{
    5368:	df 93       	push	r29
    536a:	cf 93       	push	r28
    536c:	cd b7       	in	r28, 0x3d	; 61
    536e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A, WGM11);
	SET_BIT(TCCR1B, WGM12);
	SET_BIT(TCCR1B, WGM13);

#elif TIM1_MODE == TIM1_FPWM_ICR_MODE
	CLR_BIT(TCCR1A, WGM10);
    5370:	af e4       	ldi	r26, 0x4F	; 79
    5372:	b0 e0       	ldi	r27, 0x00	; 0
    5374:	ef e4       	ldi	r30, 0x4F	; 79
    5376:	f0 e0       	ldi	r31, 0x00	; 0
    5378:	80 81       	ld	r24, Z
    537a:	8e 7f       	andi	r24, 0xFE	; 254
    537c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    537e:	af e4       	ldi	r26, 0x4F	; 79
    5380:	b0 e0       	ldi	r27, 0x00	; 0
    5382:	ef e4       	ldi	r30, 0x4F	; 79
    5384:	f0 e0       	ldi	r31, 0x00	; 0
    5386:	80 81       	ld	r24, Z
    5388:	82 60       	ori	r24, 0x02	; 2
    538a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    538c:	ae e4       	ldi	r26, 0x4E	; 78
    538e:	b0 e0       	ldi	r27, 0x00	; 0
    5390:	ee e4       	ldi	r30, 0x4E	; 78
    5392:	f0 e0       	ldi	r31, 0x00	; 0
    5394:	80 81       	ld	r24, Z
    5396:	88 60       	ori	r24, 0x08	; 8
    5398:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    539a:	ae e4       	ldi	r26, 0x4E	; 78
    539c:	b0 e0       	ldi	r27, 0x00	; 0
    539e:	ee e4       	ldi	r30, 0x4E	; 78
    53a0:	f0 e0       	ldi	r31, 0x00	; 0
    53a2:	80 81       	ld	r24, Z
    53a4:	80 61       	ori	r24, 0x10	; 16
    53a6:	8c 93       	st	X, r24
	ICR1 = 2499; // setting top to be 2499
    53a8:	e6 e4       	ldi	r30, 0x46	; 70
    53aa:	f0 e0       	ldi	r31, 0x00	; 0
    53ac:	83 ec       	ldi	r24, 0xC3	; 195
    53ae:	99 e0       	ldi	r25, 0x09	; 9
    53b0:	91 83       	std	Z+1, r25	; 0x01
    53b2:	80 83       	st	Z, r24
	// non inverting mode :
	SET_BIT(TCCR1A, COM1A1); // for OC1A
    53b4:	af e4       	ldi	r26, 0x4F	; 79
    53b6:	b0 e0       	ldi	r27, 0x00	; 0
    53b8:	ef e4       	ldi	r30, 0x4F	; 79
    53ba:	f0 e0       	ldi	r31, 0x00	; 0
    53bc:	80 81       	ld	r24, Z
    53be:	80 68       	ori	r24, 0x80	; 128
    53c0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1B1); // for OC2A
    53c2:	af e4       	ldi	r26, 0x4F	; 79
    53c4:	b0 e0       	ldi	r27, 0x00	; 0
    53c6:	ef e4       	ldi	r30, 0x4F	; 79
    53c8:	f0 e0       	ldi	r31, 0x00	; 0
    53ca:	80 81       	ld	r24, Z
    53cc:	80 62       	ori	r24, 0x20	; 32
    53ce:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
	SET_BIT(TCCR1B, WGM12);
	SET_BIT(TCCR1B, WGM13);
#endif

	TCCR1B &= (0xF8);					  /* clear reg 0b1111 1000 */
    53d0:	ae e4       	ldi	r26, 0x4E	; 78
    53d2:	b0 e0       	ldi	r27, 0x00	; 0
    53d4:	ee e4       	ldi	r30, 0x4E	; 78
    53d6:	f0 e0       	ldi	r31, 0x00	; 0
    53d8:	80 81       	ld	r24, Z
    53da:	88 7f       	andi	r24, 0xF8	; 248
    53dc:	8c 93       	st	X, r24
	TCCR1B |= ((0x07) & TIM1_PRESCALLER); /* write in reg to set prescaler*/
    53de:	ae e4       	ldi	r26, 0x4E	; 78
    53e0:	b0 e0       	ldi	r27, 0x00	; 0
    53e2:	ee e4       	ldi	r30, 0x4E	; 78
    53e4:	f0 e0       	ldi	r31, 0x00	; 0
    53e6:	80 81       	ld	r24, Z
    53e8:	83 60       	ori	r24, 0x03	; 3
    53ea:	8c 93       	st	X, r24

	TCNT1 = 0;
    53ec:	ec e4       	ldi	r30, 0x4C	; 76
    53ee:	f0 e0       	ldi	r31, 0x00	; 0
    53f0:	11 82       	std	Z+1, r1	; 0x01
    53f2:	10 82       	st	Z, r1
	OCR1A = 0;
    53f4:	ea e4       	ldi	r30, 0x4A	; 74
    53f6:	f0 e0       	ldi	r31, 0x00	; 0
    53f8:	11 82       	std	Z+1, r1	; 0x01
    53fa:	10 82       	st	Z, r1
	OCR1B = 0;
    53fc:	e8 e4       	ldi	r30, 0x48	; 72
    53fe:	f0 e0       	ldi	r31, 0x00	; 0
    5400:	11 82       	std	Z+1, r1	; 0x01
    5402:	10 82       	st	Z, r1
	/*Disable input capture interrupt*/
	CLR_BIT(TIMSK, TICIE1);
    5404:	a9 e5       	ldi	r26, 0x59	; 89
    5406:	b0 e0       	ldi	r27, 0x00	; 0
    5408:	e9 e5       	ldi	r30, 0x59	; 89
    540a:	f0 e0       	ldi	r31, 0x00	; 0
    540c:	80 81       	ld	r24, Z
    540e:	8f 7d       	andi	r24, 0xDF	; 223
    5410:	8c 93       	st	X, r24

	/*disable output compare match interrupt*/
	CLR_BIT(TIMSK, OCIE1A);
    5412:	a9 e5       	ldi	r26, 0x59	; 89
    5414:	b0 e0       	ldi	r27, 0x00	; 0
    5416:	e9 e5       	ldi	r30, 0x59	; 89
    5418:	f0 e0       	ldi	r31, 0x00	; 0
    541a:	80 81       	ld	r24, Z
    541c:	8f 7e       	andi	r24, 0xEF	; 239
    541e:	8c 93       	st	X, r24
	CLR_BIT(TIMSK, OCIE1B);
    5420:	a9 e5       	ldi	r26, 0x59	; 89
    5422:	b0 e0       	ldi	r27, 0x00	; 0
    5424:	e9 e5       	ldi	r30, 0x59	; 89
    5426:	f0 e0       	ldi	r31, 0x00	; 0
    5428:	80 81       	ld	r24, Z
    542a:	87 7f       	andi	r24, 0xF7	; 247
    542c:	8c 93       	st	X, r24

	/*disable ovf interupt*/
	CLR_BIT(TIMSK, TOIE1);
    542e:	a9 e5       	ldi	r26, 0x59	; 89
    5430:	b0 e0       	ldi	r27, 0x00	; 0
    5432:	e9 e5       	ldi	r30, 0x59	; 89
    5434:	f0 e0       	ldi	r31, 0x00	; 0
    5436:	80 81       	ld	r24, Z
    5438:	8b 7f       	andi	r24, 0xFB	; 251
    543a:	8c 93       	st	X, r24

	//	set Compare output mode
}
    543c:	cf 91       	pop	r28
    543e:	df 91       	pop	r29
    5440:	08 95       	ret

00005442 <TIM1_voidSetPreloadValue>:
void TIM1_voidSetPreloadValue(uint16 u8PreloadValueCpy)
{
    5442:	df 93       	push	r29
    5444:	cf 93       	push	r28
    5446:	00 d0       	rcall	.+0      	; 0x5448 <TIM1_voidSetPreloadValue+0x6>
    5448:	cd b7       	in	r28, 0x3d	; 61
    544a:	de b7       	in	r29, 0x3e	; 62
    544c:	9a 83       	std	Y+2, r25	; 0x02
    544e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = u8PreloadValueCpy;
    5450:	ec e4       	ldi	r30, 0x4C	; 76
    5452:	f0 e0       	ldi	r31, 0x00	; 0
    5454:	89 81       	ldd	r24, Y+1	; 0x01
    5456:	9a 81       	ldd	r25, Y+2	; 0x02
    5458:	91 83       	std	Z+1, r25	; 0x01
    545a:	80 83       	st	Z, r24
}
    545c:	0f 90       	pop	r0
    545e:	0f 90       	pop	r0
    5460:	cf 91       	pop	r28
    5462:	df 91       	pop	r29
    5464:	08 95       	ret

00005466 <TIM1_voidSetOutputCompareAValue>:
void TIM1_voidSetOutputCompareAValue(uint16 u8LoadValueCpy)
{
    5466:	df 93       	push	r29
    5468:	cf 93       	push	r28
    546a:	00 d0       	rcall	.+0      	; 0x546c <TIM1_voidSetOutputCompareAValue+0x6>
    546c:	cd b7       	in	r28, 0x3d	; 61
    546e:	de b7       	in	r29, 0x3e	; 62
    5470:	9a 83       	std	Y+2, r25	; 0x02
    5472:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = u8LoadValueCpy;
    5474:	ea e4       	ldi	r30, 0x4A	; 74
    5476:	f0 e0       	ldi	r31, 0x00	; 0
    5478:	89 81       	ldd	r24, Y+1	; 0x01
    547a:	9a 81       	ldd	r25, Y+2	; 0x02
    547c:	91 83       	std	Z+1, r25	; 0x01
    547e:	80 83       	st	Z, r24
}
    5480:	0f 90       	pop	r0
    5482:	0f 90       	pop	r0
    5484:	cf 91       	pop	r28
    5486:	df 91       	pop	r29
    5488:	08 95       	ret

0000548a <TIM1_voidSetOutputCompareBValue>:

void TIM1_voidSetOutputCompareBValue(uint16 u8LoadValueCpy)
{
    548a:	df 93       	push	r29
    548c:	cf 93       	push	r28
    548e:	00 d0       	rcall	.+0      	; 0x5490 <TIM1_voidSetOutputCompareBValue+0x6>
    5490:	cd b7       	in	r28, 0x3d	; 61
    5492:	de b7       	in	r29, 0x3e	; 62
    5494:	9a 83       	std	Y+2, r25	; 0x02
    5496:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = u8LoadValueCpy;
    5498:	e8 e4       	ldi	r30, 0x48	; 72
    549a:	f0 e0       	ldi	r31, 0x00	; 0
    549c:	89 81       	ldd	r24, Y+1	; 0x01
    549e:	9a 81       	ldd	r25, Y+2	; 0x02
    54a0:	91 83       	std	Z+1, r25	; 0x01
    54a2:	80 83       	st	Z, r24
}
    54a4:	0f 90       	pop	r0
    54a6:	0f 90       	pop	r0
    54a8:	cf 91       	pop	r28
    54aa:	df 91       	pop	r29
    54ac:	08 95       	ret

000054ae <TIM1_voidEnableOVFIntterrupt>:

void TIM1_voidEnableOVFIntterrupt(void)
{
    54ae:	df 93       	push	r29
    54b0:	cf 93       	push	r28
    54b2:	cd b7       	in	r28, 0x3d	; 61
    54b4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TOIE1);
    54b6:	a9 e5       	ldi	r26, 0x59	; 89
    54b8:	b0 e0       	ldi	r27, 0x00	; 0
    54ba:	e9 e5       	ldi	r30, 0x59	; 89
    54bc:	f0 e0       	ldi	r31, 0x00	; 0
    54be:	80 81       	ld	r24, Z
    54c0:	84 60       	ori	r24, 0x04	; 4
    54c2:	8c 93       	st	X, r24
}
    54c4:	cf 91       	pop	r28
    54c6:	df 91       	pop	r29
    54c8:	08 95       	ret

000054ca <TIM1_voidDisableOVFIntterrupt>:

void TIM1_voidDisableOVFIntterrupt(void)
{
    54ca:	df 93       	push	r29
    54cc:	cf 93       	push	r28
    54ce:	cd b7       	in	r28, 0x3d	; 61
    54d0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TOIE1);
    54d2:	a9 e5       	ldi	r26, 0x59	; 89
    54d4:	b0 e0       	ldi	r27, 0x00	; 0
    54d6:	e9 e5       	ldi	r30, 0x59	; 89
    54d8:	f0 e0       	ldi	r31, 0x00	; 0
    54da:	80 81       	ld	r24, Z
    54dc:	8b 7f       	andi	r24, 0xFB	; 251
    54de:	8c 93       	st	X, r24
}
    54e0:	cf 91       	pop	r28
    54e2:	df 91       	pop	r29
    54e4:	08 95       	ret

000054e6 <TIM1_voidEnableCTCAIntterrupt>:
void TIM1_voidEnableCTCAIntterrupt(void)
{
    54e6:	df 93       	push	r29
    54e8:	cf 93       	push	r28
    54ea:	cd b7       	in	r28, 0x3d	; 61
    54ec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1A);
    54ee:	a9 e5       	ldi	r26, 0x59	; 89
    54f0:	b0 e0       	ldi	r27, 0x00	; 0
    54f2:	e9 e5       	ldi	r30, 0x59	; 89
    54f4:	f0 e0       	ldi	r31, 0x00	; 0
    54f6:	80 81       	ld	r24, Z
    54f8:	80 61       	ori	r24, 0x10	; 16
    54fa:	8c 93       	st	X, r24
}
    54fc:	cf 91       	pop	r28
    54fe:	df 91       	pop	r29
    5500:	08 95       	ret

00005502 <TIM1_voidDisableCTCAIntterrupt>:
void TIM1_voidDisableCTCAIntterrupt(void)
{
    5502:	df 93       	push	r29
    5504:	cf 93       	push	r28
    5506:	cd b7       	in	r28, 0x3d	; 61
    5508:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK, OCIE1A);
    550a:	a9 e5       	ldi	r26, 0x59	; 89
    550c:	b0 e0       	ldi	r27, 0x00	; 0
    550e:	e9 e5       	ldi	r30, 0x59	; 89
    5510:	f0 e0       	ldi	r31, 0x00	; 0
    5512:	80 81       	ld	r24, Z
    5514:	8f 7e       	andi	r24, 0xEF	; 239
    5516:	8c 93       	st	X, r24
}
    5518:	cf 91       	pop	r28
    551a:	df 91       	pop	r29
    551c:	08 95       	ret

0000551e <TIM1_voidEnableCTCBIntterrupt>:
void TIM1_voidEnableCTCBIntterrupt(void)
{
    551e:	df 93       	push	r29
    5520:	cf 93       	push	r28
    5522:	cd b7       	in	r28, 0x3d	; 61
    5524:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1B);
    5526:	a9 e5       	ldi	r26, 0x59	; 89
    5528:	b0 e0       	ldi	r27, 0x00	; 0
    552a:	e9 e5       	ldi	r30, 0x59	; 89
    552c:	f0 e0       	ldi	r31, 0x00	; 0
    552e:	80 81       	ld	r24, Z
    5530:	88 60       	ori	r24, 0x08	; 8
    5532:	8c 93       	st	X, r24
}
    5534:	cf 91       	pop	r28
    5536:	df 91       	pop	r29
    5538:	08 95       	ret

0000553a <TIM1_voidDisableCTCBIntterrupt>:
void TIM1_voidDisableCTCBIntterrupt(void)
{
    553a:	df 93       	push	r29
    553c:	cf 93       	push	r28
    553e:	cd b7       	in	r28, 0x3d	; 61
    5540:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK, OCIE1B);
    5542:	a9 e5       	ldi	r26, 0x59	; 89
    5544:	b0 e0       	ldi	r27, 0x00	; 0
    5546:	e9 e5       	ldi	r30, 0x59	; 89
    5548:	f0 e0       	ldi	r31, 0x00	; 0
    554a:	80 81       	ld	r24, Z
    554c:	87 7f       	andi	r24, 0xF7	; 247
    554e:	8c 93       	st	X, r24
}
    5550:	cf 91       	pop	r28
    5552:	df 91       	pop	r29
    5554:	08 95       	ret

00005556 <TIM1_voidEnableICUIntterrupt>:

void TIM1_voidEnableICUIntterrupt(void)
{
    5556:	df 93       	push	r29
    5558:	cf 93       	push	r28
    555a:	cd b7       	in	r28, 0x3d	; 61
    555c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TICIE1);
    555e:	a9 e5       	ldi	r26, 0x59	; 89
    5560:	b0 e0       	ldi	r27, 0x00	; 0
    5562:	e9 e5       	ldi	r30, 0x59	; 89
    5564:	f0 e0       	ldi	r31, 0x00	; 0
    5566:	80 81       	ld	r24, Z
    5568:	80 62       	ori	r24, 0x20	; 32
    556a:	8c 93       	st	X, r24
}
    556c:	cf 91       	pop	r28
    556e:	df 91       	pop	r29
    5570:	08 95       	ret

00005572 <TIM1_voidDisableICUIntterrupt>:
void TIM1_voidDisableICUIntterrupt(void)
{
    5572:	df 93       	push	r29
    5574:	cf 93       	push	r28
    5576:	cd b7       	in	r28, 0x3d	; 61
    5578:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK, TICIE1);
    557a:	a9 e5       	ldi	r26, 0x59	; 89
    557c:	b0 e0       	ldi	r27, 0x00	; 0
    557e:	e9 e5       	ldi	r30, 0x59	; 89
    5580:	f0 e0       	ldi	r31, 0x00	; 0
    5582:	80 81       	ld	r24, Z
    5584:	8f 7d       	andi	r24, 0xDF	; 223
    5586:	8c 93       	st	X, r24
}
    5588:	cf 91       	pop	r28
    558a:	df 91       	pop	r29
    558c:	08 95       	ret

0000558e <TIM1_voidSetOvfCallback>:

void TIM1_voidSetOvfCallback(pf pfOvfCallbackCpy)
{
    558e:	df 93       	push	r29
    5590:	cf 93       	push	r28
    5592:	00 d0       	rcall	.+0      	; 0x5594 <TIM1_voidSetOvfCallback+0x6>
    5594:	cd b7       	in	r28, 0x3d	; 61
    5596:	de b7       	in	r29, 0x3e	; 62
    5598:	9a 83       	std	Y+2, r25	; 0x02
    559a:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallback = pfOvfCallbackCpy;
    559c:	89 81       	ldd	r24, Y+1	; 0x01
    559e:	9a 81       	ldd	r25, Y+2	; 0x02
    55a0:	90 93 12 02 	sts	0x0212, r25
    55a4:	80 93 11 02 	sts	0x0211, r24
}
    55a8:	0f 90       	pop	r0
    55aa:	0f 90       	pop	r0
    55ac:	cf 91       	pop	r28
    55ae:	df 91       	pop	r29
    55b0:	08 95       	ret

000055b2 <TIM1_voidSetCtcACallback>:
void TIM1_voidSetCtcACallback(pf pfCtcCallbackCpy)
{
    55b2:	df 93       	push	r29
    55b4:	cf 93       	push	r28
    55b6:	00 d0       	rcall	.+0      	; 0x55b8 <TIM1_voidSetCtcACallback+0x6>
    55b8:	cd b7       	in	r28, 0x3d	; 61
    55ba:	de b7       	in	r29, 0x3e	; 62
    55bc:	9a 83       	std	Y+2, r25	; 0x02
    55be:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCtcACallback = pfCtcCallbackCpy;
    55c0:	89 81       	ldd	r24, Y+1	; 0x01
    55c2:	9a 81       	ldd	r25, Y+2	; 0x02
    55c4:	90 93 14 02 	sts	0x0214, r25
    55c8:	80 93 13 02 	sts	0x0213, r24
}
    55cc:	0f 90       	pop	r0
    55ce:	0f 90       	pop	r0
    55d0:	cf 91       	pop	r28
    55d2:	df 91       	pop	r29
    55d4:	08 95       	ret

000055d6 <TIM1_voidSetCtcBCallback>:

void TIM1_voidSetCtcBCallback(pf pfCtcCallbackCpy)
{
    55d6:	df 93       	push	r29
    55d8:	cf 93       	push	r28
    55da:	00 d0       	rcall	.+0      	; 0x55dc <TIM1_voidSetCtcBCallback+0x6>
    55dc:	cd b7       	in	r28, 0x3d	; 61
    55de:	de b7       	in	r29, 0x3e	; 62
    55e0:	9a 83       	std	Y+2, r25	; 0x02
    55e2:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCtcBCallback = pfCtcCallbackCpy;
    55e4:	89 81       	ldd	r24, Y+1	; 0x01
    55e6:	9a 81       	ldd	r25, Y+2	; 0x02
    55e8:	90 93 16 02 	sts	0x0216, r25
    55ec:	80 93 15 02 	sts	0x0215, r24
}
    55f0:	0f 90       	pop	r0
    55f2:	0f 90       	pop	r0
    55f4:	cf 91       	pop	r28
    55f6:	df 91       	pop	r29
    55f8:	08 95       	ret

000055fa <TIM1_voidSetICUCallback>:

void TIM1_voidSetICUCallback(pf pfCtcCallbackCpy)
{
    55fa:	df 93       	push	r29
    55fc:	cf 93       	push	r28
    55fe:	00 d0       	rcall	.+0      	; 0x5600 <TIM1_voidSetICUCallback+0x6>
    5600:	cd b7       	in	r28, 0x3d	; 61
    5602:	de b7       	in	r29, 0x3e	; 62
    5604:	9a 83       	std	Y+2, r25	; 0x02
    5606:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfICUCallBack = pfCtcCallbackCpy;
    5608:	89 81       	ldd	r24, Y+1	; 0x01
    560a:	9a 81       	ldd	r25, Y+2	; 0x02
    560c:	90 93 10 02 	sts	0x0210, r25
    5610:	80 93 0f 02 	sts	0x020F, r24
}
    5614:	0f 90       	pop	r0
    5616:	0f 90       	pop	r0
    5618:	cf 91       	pop	r28
    561a:	df 91       	pop	r29
    561c:	08 95       	ret

0000561e <TIM1_u16GetCntrValue>:

uint16 TIM1_u16GetCntrValue(void)
{
    561e:	df 93       	push	r29
    5620:	cf 93       	push	r28
    5622:	cd b7       	in	r28, 0x3d	; 61
    5624:	de b7       	in	r29, 0x3e	; 62
	return (uint16)TCNT1;
    5626:	ec e4       	ldi	r30, 0x4C	; 76
    5628:	f0 e0       	ldi	r31, 0x00	; 0
    562a:	80 81       	ld	r24, Z
    562c:	91 81       	ldd	r25, Z+1	; 0x01
}
    562e:	cf 91       	pop	r28
    5630:	df 91       	pop	r29
    5632:	08 95       	ret

00005634 <__vector_9>:
/*OVF ISR*/
void __vector_9(void) __attribute__((signal, used));
void __vector_9(void)
{
    5634:	1f 92       	push	r1
    5636:	0f 92       	push	r0
    5638:	0f b6       	in	r0, 0x3f	; 63
    563a:	0f 92       	push	r0
    563c:	11 24       	eor	r1, r1
    563e:	2f 93       	push	r18
    5640:	3f 93       	push	r19
    5642:	4f 93       	push	r20
    5644:	5f 93       	push	r21
    5646:	6f 93       	push	r22
    5648:	7f 93       	push	r23
    564a:	8f 93       	push	r24
    564c:	9f 93       	push	r25
    564e:	af 93       	push	r26
    5650:	bf 93       	push	r27
    5652:	ef 93       	push	r30
    5654:	ff 93       	push	r31
    5656:	df 93       	push	r29
    5658:	cf 93       	push	r28
    565a:	cd b7       	in	r28, 0x3d	; 61
    565c:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfOvfCallback();
    565e:	e0 91 11 02 	lds	r30, 0x0211
    5662:	f0 91 12 02 	lds	r31, 0x0212
    5666:	09 95       	icall
}
    5668:	cf 91       	pop	r28
    566a:	df 91       	pop	r29
    566c:	ff 91       	pop	r31
    566e:	ef 91       	pop	r30
    5670:	bf 91       	pop	r27
    5672:	af 91       	pop	r26
    5674:	9f 91       	pop	r25
    5676:	8f 91       	pop	r24
    5678:	7f 91       	pop	r23
    567a:	6f 91       	pop	r22
    567c:	5f 91       	pop	r21
    567e:	4f 91       	pop	r20
    5680:	3f 91       	pop	r19
    5682:	2f 91       	pop	r18
    5684:	0f 90       	pop	r0
    5686:	0f be       	out	0x3f, r0	; 63
    5688:	0f 90       	pop	r0
    568a:	1f 90       	pop	r1
    568c:	18 95       	reti

0000568e <__vector_7>:
/*CTC A ISR*/
void __vector_7(void) __attribute__((signal, used));
void __vector_7(void)
{
    568e:	1f 92       	push	r1
    5690:	0f 92       	push	r0
    5692:	0f b6       	in	r0, 0x3f	; 63
    5694:	0f 92       	push	r0
    5696:	11 24       	eor	r1, r1
    5698:	2f 93       	push	r18
    569a:	3f 93       	push	r19
    569c:	4f 93       	push	r20
    569e:	5f 93       	push	r21
    56a0:	6f 93       	push	r22
    56a2:	7f 93       	push	r23
    56a4:	8f 93       	push	r24
    56a6:	9f 93       	push	r25
    56a8:	af 93       	push	r26
    56aa:	bf 93       	push	r27
    56ac:	ef 93       	push	r30
    56ae:	ff 93       	push	r31
    56b0:	df 93       	push	r29
    56b2:	cf 93       	push	r28
    56b4:	cd b7       	in	r28, 0x3d	; 61
    56b6:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCtcACallback();
    56b8:	e0 91 13 02 	lds	r30, 0x0213
    56bc:	f0 91 14 02 	lds	r31, 0x0214
    56c0:	09 95       	icall
}
    56c2:	cf 91       	pop	r28
    56c4:	df 91       	pop	r29
    56c6:	ff 91       	pop	r31
    56c8:	ef 91       	pop	r30
    56ca:	bf 91       	pop	r27
    56cc:	af 91       	pop	r26
    56ce:	9f 91       	pop	r25
    56d0:	8f 91       	pop	r24
    56d2:	7f 91       	pop	r23
    56d4:	6f 91       	pop	r22
    56d6:	5f 91       	pop	r21
    56d8:	4f 91       	pop	r20
    56da:	3f 91       	pop	r19
    56dc:	2f 91       	pop	r18
    56de:	0f 90       	pop	r0
    56e0:	0f be       	out	0x3f, r0	; 63
    56e2:	0f 90       	pop	r0
    56e4:	1f 90       	pop	r1
    56e6:	18 95       	reti

000056e8 <__vector_8>:

/*CTC B ISR*/
void __vector_8(void) __attribute__((signal, used));
void __vector_8(void)
{
    56e8:	1f 92       	push	r1
    56ea:	0f 92       	push	r0
    56ec:	0f b6       	in	r0, 0x3f	; 63
    56ee:	0f 92       	push	r0
    56f0:	11 24       	eor	r1, r1
    56f2:	2f 93       	push	r18
    56f4:	3f 93       	push	r19
    56f6:	4f 93       	push	r20
    56f8:	5f 93       	push	r21
    56fa:	6f 93       	push	r22
    56fc:	7f 93       	push	r23
    56fe:	8f 93       	push	r24
    5700:	9f 93       	push	r25
    5702:	af 93       	push	r26
    5704:	bf 93       	push	r27
    5706:	ef 93       	push	r30
    5708:	ff 93       	push	r31
    570a:	df 93       	push	r29
    570c:	cf 93       	push	r28
    570e:	cd b7       	in	r28, 0x3d	; 61
    5710:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCtcBCallback();
    5712:	e0 91 15 02 	lds	r30, 0x0215
    5716:	f0 91 16 02 	lds	r31, 0x0216
    571a:	09 95       	icall
}
    571c:	cf 91       	pop	r28
    571e:	df 91       	pop	r29
    5720:	ff 91       	pop	r31
    5722:	ef 91       	pop	r30
    5724:	bf 91       	pop	r27
    5726:	af 91       	pop	r26
    5728:	9f 91       	pop	r25
    572a:	8f 91       	pop	r24
    572c:	7f 91       	pop	r23
    572e:	6f 91       	pop	r22
    5730:	5f 91       	pop	r21
    5732:	4f 91       	pop	r20
    5734:	3f 91       	pop	r19
    5736:	2f 91       	pop	r18
    5738:	0f 90       	pop	r0
    573a:	0f be       	out	0x3f, r0	; 63
    573c:	0f 90       	pop	r0
    573e:	1f 90       	pop	r1
    5740:	18 95       	reti

00005742 <__vector_6>:
void __vector_6(void) __attribute__((signal, used));
void __vector_6(void)
{
    5742:	1f 92       	push	r1
    5744:	0f 92       	push	r0
    5746:	0f b6       	in	r0, 0x3f	; 63
    5748:	0f 92       	push	r0
    574a:	11 24       	eor	r1, r1
    574c:	2f 93       	push	r18
    574e:	3f 93       	push	r19
    5750:	4f 93       	push	r20
    5752:	5f 93       	push	r21
    5754:	6f 93       	push	r22
    5756:	7f 93       	push	r23
    5758:	8f 93       	push	r24
    575a:	9f 93       	push	r25
    575c:	af 93       	push	r26
    575e:	bf 93       	push	r27
    5760:	ef 93       	push	r30
    5762:	ff 93       	push	r31
    5764:	df 93       	push	r29
    5766:	cf 93       	push	r28
    5768:	cd b7       	in	r28, 0x3d	; 61
    576a:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfICUCallBack();
    576c:	e0 91 0f 02 	lds	r30, 0x020F
    5770:	f0 91 10 02 	lds	r31, 0x0210
    5774:	09 95       	icall
}
    5776:	cf 91       	pop	r28
    5778:	df 91       	pop	r29
    577a:	ff 91       	pop	r31
    577c:	ef 91       	pop	r30
    577e:	bf 91       	pop	r27
    5780:	af 91       	pop	r26
    5782:	9f 91       	pop	r25
    5784:	8f 91       	pop	r24
    5786:	7f 91       	pop	r23
    5788:	6f 91       	pop	r22
    578a:	5f 91       	pop	r21
    578c:	4f 91       	pop	r20
    578e:	3f 91       	pop	r19
    5790:	2f 91       	pop	r18
    5792:	0f 90       	pop	r0
    5794:	0f be       	out	0x3f, r0	; 63
    5796:	0f 90       	pop	r0
    5798:	1f 90       	pop	r1
    579a:	18 95       	reti

0000579c <TIM1_voidPWMAGenerate>:

void TIM1_voidPWMAGenerate(float32 f32DutyCycleCpy)
{
    579c:	cf 92       	push	r12
    579e:	df 92       	push	r13
    57a0:	ef 92       	push	r14
    57a2:	ff 92       	push	r15
    57a4:	0f 93       	push	r16
    57a6:	1f 93       	push	r17
    57a8:	df 93       	push	r29
    57aa:	cf 93       	push	r28
    57ac:	00 d0       	rcall	.+0      	; 0x57ae <TIM1_voidPWMAGenerate+0x12>
    57ae:	00 d0       	rcall	.+0      	; 0x57b0 <TIM1_voidPWMAGenerate+0x14>
    57b0:	cd b7       	in	r28, 0x3d	; 61
    57b2:	de b7       	in	r29, 0x3e	; 62
    57b4:	69 83       	std	Y+1, r22	; 0x01
    57b6:	7a 83       	std	Y+2, r23	; 0x02
    57b8:	8b 83       	std	Y+3, r24	; 0x03
    57ba:	9c 83       	std	Y+4, r25	; 0x04
	//	TCNT1 = 0;
	// if ocr was 0 therefore duty = 0, if OCR was 128 therefore duty cycle is 50%
	OCR1A = ((float32)(f32DutyCycleCpy) / 100) * ICR1;
    57bc:	0f 2e       	mov	r0, r31
    57be:	fa e4       	ldi	r31, 0x4A	; 74
    57c0:	cf 2e       	mov	r12, r31
    57c2:	dd 24       	eor	r13, r13
    57c4:	f0 2d       	mov	r31, r0
    57c6:	69 81       	ldd	r22, Y+1	; 0x01
    57c8:	7a 81       	ldd	r23, Y+2	; 0x02
    57ca:	8b 81       	ldd	r24, Y+3	; 0x03
    57cc:	9c 81       	ldd	r25, Y+4	; 0x04
    57ce:	20 e0       	ldi	r18, 0x00	; 0
    57d0:	30 e0       	ldi	r19, 0x00	; 0
    57d2:	48 ec       	ldi	r20, 0xC8	; 200
    57d4:	52 e4       	ldi	r21, 0x42	; 66
    57d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    57da:	dc 01       	movw	r26, r24
    57dc:	cb 01       	movw	r24, r22
    57de:	7c 01       	movw	r14, r24
    57e0:	8d 01       	movw	r16, r26
    57e2:	e6 e4       	ldi	r30, 0x46	; 70
    57e4:	f0 e0       	ldi	r31, 0x00	; 0
    57e6:	80 81       	ld	r24, Z
    57e8:	91 81       	ldd	r25, Z+1	; 0x01
    57ea:	cc 01       	movw	r24, r24
    57ec:	a0 e0       	ldi	r26, 0x00	; 0
    57ee:	b0 e0       	ldi	r27, 0x00	; 0
    57f0:	bc 01       	movw	r22, r24
    57f2:	cd 01       	movw	r24, r26
    57f4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    57f8:	9b 01       	movw	r18, r22
    57fa:	ac 01       	movw	r20, r24
    57fc:	c8 01       	movw	r24, r16
    57fe:	b7 01       	movw	r22, r14
    5800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5804:	dc 01       	movw	r26, r24
    5806:	cb 01       	movw	r24, r22
    5808:	bc 01       	movw	r22, r24
    580a:	cd 01       	movw	r24, r26
    580c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5810:	dc 01       	movw	r26, r24
    5812:	cb 01       	movw	r24, r22
    5814:	f6 01       	movw	r30, r12
    5816:	91 83       	std	Z+1, r25	; 0x01
    5818:	80 83       	st	Z, r24

	// pwm non inverted mode
	// it means that if ocr =60% MAX then duty cycle = 60%
}
    581a:	0f 90       	pop	r0
    581c:	0f 90       	pop	r0
    581e:	0f 90       	pop	r0
    5820:	0f 90       	pop	r0
    5822:	cf 91       	pop	r28
    5824:	df 91       	pop	r29
    5826:	1f 91       	pop	r17
    5828:	0f 91       	pop	r16
    582a:	ff 90       	pop	r15
    582c:	ef 90       	pop	r14
    582e:	df 90       	pop	r13
    5830:	cf 90       	pop	r12
    5832:	08 95       	ret

00005834 <TIM1_voidPWMBGenerate>:
void TIM1_voidPWMBGenerate(float32 f32DutyCycleCpy)
{
    5834:	cf 92       	push	r12
    5836:	df 92       	push	r13
    5838:	ef 92       	push	r14
    583a:	ff 92       	push	r15
    583c:	0f 93       	push	r16
    583e:	1f 93       	push	r17
    5840:	df 93       	push	r29
    5842:	cf 93       	push	r28
    5844:	00 d0       	rcall	.+0      	; 0x5846 <TIM1_voidPWMBGenerate+0x12>
    5846:	00 d0       	rcall	.+0      	; 0x5848 <TIM1_voidPWMBGenerate+0x14>
    5848:	cd b7       	in	r28, 0x3d	; 61
    584a:	de b7       	in	r29, 0x3e	; 62
    584c:	69 83       	std	Y+1, r22	; 0x01
    584e:	7a 83       	std	Y+2, r23	; 0x02
    5850:	8b 83       	std	Y+3, r24	; 0x03
    5852:	9c 83       	std	Y+4, r25	; 0x04

	OCR1B = ((float32)(f32DutyCycleCpy) / 100) * ICR1;
    5854:	0f 2e       	mov	r0, r31
    5856:	f8 e4       	ldi	r31, 0x48	; 72
    5858:	cf 2e       	mov	r12, r31
    585a:	dd 24       	eor	r13, r13
    585c:	f0 2d       	mov	r31, r0
    585e:	69 81       	ldd	r22, Y+1	; 0x01
    5860:	7a 81       	ldd	r23, Y+2	; 0x02
    5862:	8b 81       	ldd	r24, Y+3	; 0x03
    5864:	9c 81       	ldd	r25, Y+4	; 0x04
    5866:	20 e0       	ldi	r18, 0x00	; 0
    5868:	30 e0       	ldi	r19, 0x00	; 0
    586a:	48 ec       	ldi	r20, 0xC8	; 200
    586c:	52 e4       	ldi	r21, 0x42	; 66
    586e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5872:	dc 01       	movw	r26, r24
    5874:	cb 01       	movw	r24, r22
    5876:	7c 01       	movw	r14, r24
    5878:	8d 01       	movw	r16, r26
    587a:	e6 e4       	ldi	r30, 0x46	; 70
    587c:	f0 e0       	ldi	r31, 0x00	; 0
    587e:	80 81       	ld	r24, Z
    5880:	91 81       	ldd	r25, Z+1	; 0x01
    5882:	cc 01       	movw	r24, r24
    5884:	a0 e0       	ldi	r26, 0x00	; 0
    5886:	b0 e0       	ldi	r27, 0x00	; 0
    5888:	bc 01       	movw	r22, r24
    588a:	cd 01       	movw	r24, r26
    588c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    5890:	9b 01       	movw	r18, r22
    5892:	ac 01       	movw	r20, r24
    5894:	c8 01       	movw	r24, r16
    5896:	b7 01       	movw	r22, r14
    5898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    589c:	dc 01       	movw	r26, r24
    589e:	cb 01       	movw	r24, r22
    58a0:	bc 01       	movw	r22, r24
    58a2:	cd 01       	movw	r24, r26
    58a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58a8:	dc 01       	movw	r26, r24
    58aa:	cb 01       	movw	r24, r22
    58ac:	f6 01       	movw	r30, r12
    58ae:	91 83       	std	Z+1, r25	; 0x01
    58b0:	80 83       	st	Z, r24
}
    58b2:	0f 90       	pop	r0
    58b4:	0f 90       	pop	r0
    58b6:	0f 90       	pop	r0
    58b8:	0f 90       	pop	r0
    58ba:	cf 91       	pop	r28
    58bc:	df 91       	pop	r29
    58be:	1f 91       	pop	r17
    58c0:	0f 91       	pop	r16
    58c2:	ff 90       	pop	r15
    58c4:	ef 90       	pop	r14
    58c6:	df 90       	pop	r13
    58c8:	cf 90       	pop	r12
    58ca:	08 95       	ret

000058cc <TIM2_voidInit>:
pf TIM2_pfOvfCallback =TIM2_Void_dummy ;

uint8 u8_used ,factor;
uint32 counter, delay;
void TIM2_voidInit(void)
{
    58cc:	df 93       	push	r29
    58ce:	cf 93       	push	r28
    58d0:	cd b7       	in	r28, 0x3d	; 61
    58d2:	de b7       	in	r29, 0x3e	; 62
#if   TIM2_MODE == TIM2_NORMAL_MODE
	CLR_BIT(TCCR2 , 6);
    58d4:	a5 e4       	ldi	r26, 0x45	; 69
    58d6:	b0 e0       	ldi	r27, 0x00	; 0
    58d8:	e5 e4       	ldi	r30, 0x45	; 69
    58da:	f0 e0       	ldi	r31, 0x00	; 0
    58dc:	80 81       	ld	r24, Z
    58de:	8f 7b       	andi	r24, 0xBF	; 191
    58e0:	8c 93       	st	X, r24
	CLR_BIT(TCCR2 , 3);
    58e2:	a5 e4       	ldi	r26, 0x45	; 69
    58e4:	b0 e0       	ldi	r27, 0x00	; 0
    58e6:	e5 e4       	ldi	r30, 0x45	; 69
    58e8:	f0 e0       	ldi	r31, 0x00	; 0
    58ea:	80 81       	ld	r24, Z
    58ec:	87 7f       	andi	r24, 0xF7	; 247
    58ee:	8c 93       	st	X, r24
#else
	SET_BIT(TCCR2 , 6);
	SET_BIT(TCCR2 , 3);
#endif

	TCCR2 &= (0xF8);/* clear reg 0b1111 1000 */
    58f0:	a5 e4       	ldi	r26, 0x45	; 69
    58f2:	b0 e0       	ldi	r27, 0x00	; 0
    58f4:	e5 e4       	ldi	r30, 0x45	; 69
    58f6:	f0 e0       	ldi	r31, 0x00	; 0
    58f8:	80 81       	ld	r24, Z
    58fa:	88 7f       	andi	r24, 0xF8	; 248
    58fc:	8c 93       	st	X, r24
	TCCR2 |=((0x07)& TIM2_PRESCALLER) ; /* write in reg */
    58fe:	a5 e4       	ldi	r26, 0x45	; 69
    5900:	b0 e0       	ldi	r27, 0x00	; 0
    5902:	e5 e4       	ldi	r30, 0x45	; 69
    5904:	f0 e0       	ldi	r31, 0x00	; 0
    5906:	80 81       	ld	r24, Z
    5908:	81 60       	ori	r24, 0x01	; 1
    590a:	8c 93       	st	X, r24
	TCNT2 = 0;
    590c:	e4 e4       	ldi	r30, 0x44	; 68
    590e:	f0 e0       	ldi	r31, 0x00	; 0
    5910:	10 82       	st	Z, r1
	OCR2  = 0;
    5912:	e3 e4       	ldi	r30, 0x43	; 67
    5914:	f0 e0       	ldi	r31, 0x00	; 0
    5916:	10 82       	st	Z, r1
	/* Disable Interrupt  OVF CM */
	CLR_BIT(TIMSK , 5) ;
    5918:	a9 e5       	ldi	r26, 0x59	; 89
    591a:	b0 e0       	ldi	r27, 0x00	; 0
    591c:	e9 e5       	ldi	r30, 0x59	; 89
    591e:	f0 e0       	ldi	r31, 0x00	; 0
    5920:	80 81       	ld	r24, Z
    5922:	8f 7d       	andi	r24, 0xDF	; 223
    5924:	8c 93       	st	X, r24
	CLR_BIT(TIMSK , 6) ;
    5926:	a9 e5       	ldi	r26, 0x59	; 89
    5928:	b0 e0       	ldi	r27, 0x00	; 0
    592a:	e9 e5       	ldi	r30, 0x59	; 89
    592c:	f0 e0       	ldi	r31, 0x00	; 0
    592e:	80 81       	ld	r24, Z
    5930:	8f 7b       	andi	r24, 0xBF	; 191
    5932:	8c 93       	st	X, r24
	/* Clear IF flags OVF CM */
	SET_BIT(TIFR  , 6) ;
    5934:	a8 e5       	ldi	r26, 0x58	; 88
    5936:	b0 e0       	ldi	r27, 0x00	; 0
    5938:	e8 e5       	ldi	r30, 0x58	; 88
    593a:	f0 e0       	ldi	r31, 0x00	; 0
    593c:	80 81       	ld	r24, Z
    593e:	80 64       	ori	r24, 0x40	; 64
    5940:	8c 93       	st	X, r24
	SET_BIT(TIFR  , 7) ;
    5942:	a8 e5       	ldi	r26, 0x58	; 88
    5944:	b0 e0       	ldi	r27, 0x00	; 0
    5946:	e8 e5       	ldi	r30, 0x58	; 88
    5948:	f0 e0       	ldi	r31, 0x00	; 0
    594a:	80 81       	ld	r24, Z
    594c:	80 68       	ori	r24, 0x80	; 128
    594e:	8c 93       	st	X, r24

}
    5950:	cf 91       	pop	r28
    5952:	df 91       	pop	r29
    5954:	08 95       	ret

00005956 <TIM2_voidSetPreloadValue>:
void TIM2_voidSetPreloadValue (uint8 u8PreloadValueCpy)
{
    5956:	df 93       	push	r29
    5958:	cf 93       	push	r28
    595a:	0f 92       	push	r0
    595c:	cd b7       	in	r28, 0x3d	; 61
    595e:	de b7       	in	r29, 0x3e	; 62
    5960:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = u8PreloadValueCpy;
    5962:	e4 e4       	ldi	r30, 0x44	; 68
    5964:	f0 e0       	ldi	r31, 0x00	; 0
    5966:	89 81       	ldd	r24, Y+1	; 0x01
    5968:	80 83       	st	Z, r24
}
    596a:	0f 90       	pop	r0
    596c:	cf 91       	pop	r28
    596e:	df 91       	pop	r29
    5970:	08 95       	ret

00005972 <TIM2_voidSetOutputCompareValue>:
void TIM2_voidSetOutputCompareValue (uint8 u8LoadValueCpy)
{
    5972:	df 93       	push	r29
    5974:	cf 93       	push	r28
    5976:	0f 92       	push	r0
    5978:	cd b7       	in	r28, 0x3d	; 61
    597a:	de b7       	in	r29, 0x3e	; 62
    597c:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = u8LoadValueCpy;
    597e:	e3 e4       	ldi	r30, 0x43	; 67
    5980:	f0 e0       	ldi	r31, 0x00	; 0
    5982:	89 81       	ldd	r24, Y+1	; 0x01
    5984:	80 83       	st	Z, r24
}
    5986:	0f 90       	pop	r0
    5988:	cf 91       	pop	r28
    598a:	df 91       	pop	r29
    598c:	08 95       	ret

0000598e <TIM2_voidEnableOVFIntterrupt>:
void TIM2_voidEnableOVFIntterrupt(void)
{
    598e:	df 93       	push	r29
    5990:	cf 93       	push	r28
    5992:	cd b7       	in	r28, 0x3d	; 61
    5994:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 6) ;
    5996:	a9 e5       	ldi	r26, 0x59	; 89
    5998:	b0 e0       	ldi	r27, 0x00	; 0
    599a:	e9 e5       	ldi	r30, 0x59	; 89
    599c:	f0 e0       	ldi	r31, 0x00	; 0
    599e:	80 81       	ld	r24, Z
    59a0:	80 64       	ori	r24, 0x40	; 64
    59a2:	8c 93       	st	X, r24
}
    59a4:	cf 91       	pop	r28
    59a6:	df 91       	pop	r29
    59a8:	08 95       	ret

000059aa <TIM2_voidDisableOVFIntterrupt>:
void TIM2_voidDisableOVFIntterrupt(void)
{
    59aa:	df 93       	push	r29
    59ac:	cf 93       	push	r28
    59ae:	cd b7       	in	r28, 0x3d	; 61
    59b0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 6) ;
    59b2:	a9 e5       	ldi	r26, 0x59	; 89
    59b4:	b0 e0       	ldi	r27, 0x00	; 0
    59b6:	e9 e5       	ldi	r30, 0x59	; 89
    59b8:	f0 e0       	ldi	r31, 0x00	; 0
    59ba:	80 81       	ld	r24, Z
    59bc:	8f 7b       	andi	r24, 0xBF	; 191
    59be:	8c 93       	st	X, r24
}
    59c0:	cf 91       	pop	r28
    59c2:	df 91       	pop	r29
    59c4:	08 95       	ret

000059c6 <TIM2_voidEnableCTCIntterrupt>:
void TIM2_voidEnableCTCIntterrupt(void)
{
    59c6:	df 93       	push	r29
    59c8:	cf 93       	push	r28
    59ca:	cd b7       	in	r28, 0x3d	; 61
    59cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 5) ;
    59ce:	a9 e5       	ldi	r26, 0x59	; 89
    59d0:	b0 e0       	ldi	r27, 0x00	; 0
    59d2:	e9 e5       	ldi	r30, 0x59	; 89
    59d4:	f0 e0       	ldi	r31, 0x00	; 0
    59d6:	80 81       	ld	r24, Z
    59d8:	80 62       	ori	r24, 0x20	; 32
    59da:	8c 93       	st	X, r24
}
    59dc:	cf 91       	pop	r28
    59de:	df 91       	pop	r29
    59e0:	08 95       	ret

000059e2 <TIM2_voidDisableCTCIntterrupt>:
void TIM2_voidDisableCTCIntterrupt(void)
{
    59e2:	df 93       	push	r29
    59e4:	cf 93       	push	r28
    59e6:	cd b7       	in	r28, 0x3d	; 61
    59e8:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK , 5) ;
    59ea:	a9 e5       	ldi	r26, 0x59	; 89
    59ec:	b0 e0       	ldi	r27, 0x00	; 0
    59ee:	e9 e5       	ldi	r30, 0x59	; 89
    59f0:	f0 e0       	ldi	r31, 0x00	; 0
    59f2:	80 81       	ld	r24, Z
    59f4:	8f 7d       	andi	r24, 0xDF	; 223
    59f6:	8c 93       	st	X, r24
}
    59f8:	cf 91       	pop	r28
    59fa:	df 91       	pop	r29
    59fc:	08 95       	ret

000059fe <TIM2_voidSetOvfCallback>:
void TIM2_voidSetOvfCallback(pf pfOvfCallbackCpy)
{
    59fe:	df 93       	push	r29
    5a00:	cf 93       	push	r28
    5a02:	00 d0       	rcall	.+0      	; 0x5a04 <TIM2_voidSetOvfCallback+0x6>
    5a04:	cd b7       	in	r28, 0x3d	; 61
    5a06:	de b7       	in	r29, 0x3e	; 62
    5a08:	9a 83       	std	Y+2, r25	; 0x02
    5a0a:	89 83       	std	Y+1, r24	; 0x01
	TIM2_pfOvfCallback = pfOvfCallbackCpy ;
    5a0c:	89 81       	ldd	r24, Y+1	; 0x01
    5a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a10:	90 93 d9 01 	sts	0x01D9, r25
    5a14:	80 93 d8 01 	sts	0x01D8, r24

}
    5a18:	0f 90       	pop	r0
    5a1a:	0f 90       	pop	r0
    5a1c:	cf 91       	pop	r28
    5a1e:	df 91       	pop	r29
    5a20:	08 95       	ret

00005a22 <TIM2_voidSetCtcCallback>:
void TIM2_voidSetCtcCallback(pf pfCtcCallbackCpy)
{
    5a22:	df 93       	push	r29
    5a24:	cf 93       	push	r28
    5a26:	00 d0       	rcall	.+0      	; 0x5a28 <TIM2_voidSetCtcCallback+0x6>
    5a28:	cd b7       	in	r28, 0x3d	; 61
    5a2a:	de b7       	in	r29, 0x3e	; 62
    5a2c:	9a 83       	std	Y+2, r25	; 0x02
    5a2e:	89 83       	std	Y+1, r24	; 0x01
	TIM2_pfCtcCallback = pfCtcCallbackCpy;
    5a30:	89 81       	ldd	r24, Y+1	; 0x01
    5a32:	9a 81       	ldd	r25, Y+2	; 0x02
    5a34:	90 93 d7 01 	sts	0x01D7, r25
    5a38:	80 93 d6 01 	sts	0x01D6, r24

}
    5a3c:	0f 90       	pop	r0
    5a3e:	0f 90       	pop	r0
    5a40:	cf 91       	pop	r28
    5a42:	df 91       	pop	r29
    5a44:	08 95       	ret

00005a46 <__vector_5>:
/*OVF ISR*/
void __vector_5 (void) __attribute__((signal ,used));
void __vector_5 (void)
{
    5a46:	1f 92       	push	r1
    5a48:	0f 92       	push	r0
    5a4a:	0f b6       	in	r0, 0x3f	; 63
    5a4c:	0f 92       	push	r0
    5a4e:	11 24       	eor	r1, r1
    5a50:	2f 93       	push	r18
    5a52:	3f 93       	push	r19
    5a54:	4f 93       	push	r20
    5a56:	5f 93       	push	r21
    5a58:	6f 93       	push	r22
    5a5a:	7f 93       	push	r23
    5a5c:	8f 93       	push	r24
    5a5e:	9f 93       	push	r25
    5a60:	af 93       	push	r26
    5a62:	bf 93       	push	r27
    5a64:	ef 93       	push	r30
    5a66:	ff 93       	push	r31
    5a68:	df 93       	push	r29
    5a6a:	cf 93       	push	r28
    5a6c:	cd b7       	in	r28, 0x3d	; 61
    5a6e:	de b7       	in	r29, 0x3e	; 62

	if(u8_used){
    5a70:	80 91 0e 02 	lds	r24, 0x020E
    5a74:	88 23       	and	r24, r24
    5a76:	99 f0       	breq	.+38     	; 0x5a9e <__vector_5+0x58>
		counter++;
    5a78:	80 91 01 02 	lds	r24, 0x0201
    5a7c:	90 91 02 02 	lds	r25, 0x0202
    5a80:	a0 91 03 02 	lds	r26, 0x0203
    5a84:	b0 91 04 02 	lds	r27, 0x0204
    5a88:	01 96       	adiw	r24, 0x01	; 1
    5a8a:	a1 1d       	adc	r26, r1
    5a8c:	b1 1d       	adc	r27, r1
    5a8e:	80 93 01 02 	sts	0x0201, r24
    5a92:	90 93 02 02 	sts	0x0202, r25
    5a96:	a0 93 03 02 	sts	0x0203, r26
    5a9a:	b0 93 04 02 	sts	0x0204, r27
	}

	TIM2_pfOvfCallback();
    5a9e:	e0 91 d8 01 	lds	r30, 0x01D8
    5aa2:	f0 91 d9 01 	lds	r31, 0x01D9
    5aa6:	09 95       	icall

}
    5aa8:	cf 91       	pop	r28
    5aaa:	df 91       	pop	r29
    5aac:	ff 91       	pop	r31
    5aae:	ef 91       	pop	r30
    5ab0:	bf 91       	pop	r27
    5ab2:	af 91       	pop	r26
    5ab4:	9f 91       	pop	r25
    5ab6:	8f 91       	pop	r24
    5ab8:	7f 91       	pop	r23
    5aba:	6f 91       	pop	r22
    5abc:	5f 91       	pop	r21
    5abe:	4f 91       	pop	r20
    5ac0:	3f 91       	pop	r19
    5ac2:	2f 91       	pop	r18
    5ac4:	0f 90       	pop	r0
    5ac6:	0f be       	out	0x3f, r0	; 63
    5ac8:	0f 90       	pop	r0
    5aca:	1f 90       	pop	r1
    5acc:	18 95       	reti

00005ace <__vector_4>:
/*CM ISR*/
void __vector_4 (void) __attribute__((signal ,used));
void __vector_4 (void)
{
    5ace:	1f 92       	push	r1
    5ad0:	0f 92       	push	r0
    5ad2:	0f b6       	in	r0, 0x3f	; 63
    5ad4:	0f 92       	push	r0
    5ad6:	11 24       	eor	r1, r1
    5ad8:	2f 93       	push	r18
    5ada:	3f 93       	push	r19
    5adc:	4f 93       	push	r20
    5ade:	5f 93       	push	r21
    5ae0:	6f 93       	push	r22
    5ae2:	7f 93       	push	r23
    5ae4:	8f 93       	push	r24
    5ae6:	9f 93       	push	r25
    5ae8:	af 93       	push	r26
    5aea:	bf 93       	push	r27
    5aec:	ef 93       	push	r30
    5aee:	ff 93       	push	r31
    5af0:	df 93       	push	r29
    5af2:	cf 93       	push	r28
    5af4:	cd b7       	in	r28, 0x3d	; 61
    5af6:	de b7       	in	r29, 0x3e	; 62
		TIM2_pfCtcCallback();
    5af8:	e0 91 d6 01 	lds	r30, 0x01D6
    5afc:	f0 91 d7 01 	lds	r31, 0x01D7
    5b00:	09 95       	icall

}
    5b02:	cf 91       	pop	r28
    5b04:	df 91       	pop	r29
    5b06:	ff 91       	pop	r31
    5b08:	ef 91       	pop	r30
    5b0a:	bf 91       	pop	r27
    5b0c:	af 91       	pop	r26
    5b0e:	9f 91       	pop	r25
    5b10:	8f 91       	pop	r24
    5b12:	7f 91       	pop	r23
    5b14:	6f 91       	pop	r22
    5b16:	5f 91       	pop	r21
    5b18:	4f 91       	pop	r20
    5b1a:	3f 91       	pop	r19
    5b1c:	2f 91       	pop	r18
    5b1e:	0f 90       	pop	r0
    5b20:	0f be       	out	0x3f, r0	; 63
    5b22:	0f 90       	pop	r0
    5b24:	1f 90       	pop	r1
    5b26:	18 95       	reti

00005b28 <TIM2_voidDelay_ms>:
void TIM2_voidDelay_ms(uint32 u32DalayTimeCpy)
{
    5b28:	df 93       	push	r29
    5b2a:	cf 93       	push	r28
    5b2c:	00 d0       	rcall	.+0      	; 0x5b2e <TIM2_voidDelay_ms+0x6>
    5b2e:	00 d0       	rcall	.+0      	; 0x5b30 <TIM2_voidDelay_ms+0x8>
    5b30:	cd b7       	in	r28, 0x3d	; 61
    5b32:	de b7       	in	r29, 0x3e	; 62
    5b34:	69 83       	std	Y+1, r22	; 0x01
    5b36:	7a 83       	std	Y+2, r23	; 0x02
    5b38:	8b 83       	std	Y+3, r24	; 0x03
    5b3a:	9c 83       	std	Y+4, r25	; 0x04
u8_used=1;
    5b3c:	81 e0       	ldi	r24, 0x01	; 1
    5b3e:	80 93 0e 02 	sts	0x020E, r24
TIM2_voidEnableOVFIntterrupt();
    5b42:	0e 94 c7 2c 	call	0x598e	; 0x598e <TIM2_voidEnableOVFIntterrupt>
while(counter!=3);
    5b46:	80 91 01 02 	lds	r24, 0x0201
    5b4a:	90 91 02 02 	lds	r25, 0x0202
    5b4e:	a0 91 03 02 	lds	r26, 0x0203
    5b52:	b0 91 04 02 	lds	r27, 0x0204
    5b56:	83 30       	cpi	r24, 0x03	; 3
    5b58:	91 05       	cpc	r25, r1
    5b5a:	a1 05       	cpc	r26, r1
    5b5c:	b1 05       	cpc	r27, r1
    5b5e:	99 f7       	brne	.-26     	; 0x5b46 <TIM2_voidDelay_ms+0x1e>
while(TIM2_u16GetCntrValue()!=232);
    5b60:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <TIM2_u16GetCntrValue>
    5b64:	88 3e       	cpi	r24, 0xE8	; 232
    5b66:	91 05       	cpc	r25, r1
    5b68:	d9 f7       	brne	.-10     	; 0x5b60 <TIM2_voidDelay_ms+0x38>
counter=0;
    5b6a:	10 92 01 02 	sts	0x0201, r1
    5b6e:	10 92 02 02 	sts	0x0202, r1
    5b72:	10 92 03 02 	sts	0x0203, r1
    5b76:	10 92 04 02 	sts	0x0204, r1
TIM2_voidDisableOVFIntterrupt();
    5b7a:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <TIM2_voidDisableOVFIntterrupt>


}
    5b7e:	0f 90       	pop	r0
    5b80:	0f 90       	pop	r0
    5b82:	0f 90       	pop	r0
    5b84:	0f 90       	pop	r0
    5b86:	cf 91       	pop	r28
    5b88:	df 91       	pop	r29
    5b8a:	08 95       	ret

00005b8c <TIM2_voidDelay_Init>:
void TIM2_voidDelay_Init(void){
    5b8c:	df 93       	push	r29
    5b8e:	cf 93       	push	r28
    5b90:	cd b7       	in	r28, 0x3d	; 61
    5b92:	de b7       	in	r29, 0x3e	; 62
#if   TIM2_MODE == TIM2_NORMAL_MODE
	CLR_BIT(TCCR2 , 6);
    5b94:	a5 e4       	ldi	r26, 0x45	; 69
    5b96:	b0 e0       	ldi	r27, 0x00	; 0
    5b98:	e5 e4       	ldi	r30, 0x45	; 69
    5b9a:	f0 e0       	ldi	r31, 0x00	; 0
    5b9c:	80 81       	ld	r24, Z
    5b9e:	8f 7b       	andi	r24, 0xBF	; 191
    5ba0:	8c 93       	st	X, r24
	CLR_BIT(TCCR2 , 3);
    5ba2:	a5 e4       	ldi	r26, 0x45	; 69
    5ba4:	b0 e0       	ldi	r27, 0x00	; 0
    5ba6:	e5 e4       	ldi	r30, 0x45	; 69
    5ba8:	f0 e0       	ldi	r31, 0x00	; 0
    5baa:	80 81       	ld	r24, Z
    5bac:	87 7f       	andi	r24, 0xF7	; 247
    5bae:	8c 93       	st	X, r24
	SET_BIT(TCCR2 , 3);
#else
	SET_BIT(TCCR2 , 6);
	SET_BIT(TCCR2 , 3);
#endif
	TCCR2 &= (0xF8);/* clear reg 0b1111 1000 */
    5bb0:	a5 e4       	ldi	r26, 0x45	; 69
    5bb2:	b0 e0       	ldi	r27, 0x00	; 0
    5bb4:	e5 e4       	ldi	r30, 0x45	; 69
    5bb6:	f0 e0       	ldi	r31, 0x00	; 0
    5bb8:	80 81       	ld	r24, Z
    5bba:	88 7f       	andi	r24, 0xF8	; 248
    5bbc:	8c 93       	st	X, r24
	TCCR2  |=((0x07)& TIM2_PRESCALLER_8 ) ; /* write in reg */
    5bbe:	a5 e4       	ldi	r26, 0x45	; 69
    5bc0:	b0 e0       	ldi	r27, 0x00	; 0
    5bc2:	e5 e4       	ldi	r30, 0x45	; 69
    5bc4:	f0 e0       	ldi	r31, 0x00	; 0
    5bc6:	80 81       	ld	r24, Z
    5bc8:	82 60       	ori	r24, 0x02	; 2
    5bca:	8c 93       	st	X, r24
	TCNT2=0x00;
    5bcc:	e4 e4       	ldi	r30, 0x44	; 68
    5bce:	f0 e0       	ldi	r31, 0x00	; 0
    5bd0:	10 82       	st	Z, r1
	OCR2  = 0;
    5bd2:	e3 e4       	ldi	r30, 0x43	; 67
    5bd4:	f0 e0       	ldi	r31, 0x00	; 0
    5bd6:	10 82       	st	Z, r1

}
    5bd8:	cf 91       	pop	r28
    5bda:	df 91       	pop	r29
    5bdc:	08 95       	ret

00005bde <TIM2_u16GetCntrValue>:


uint16 TIM2_u16GetCntrValue(void ){
    5bde:	df 93       	push	r29
    5be0:	cf 93       	push	r28
    5be2:	cd b7       	in	r28, 0x3d	; 61
    5be4:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    5be6:	e4 e4       	ldi	r30, 0x44	; 68
    5be8:	f0 e0       	ldi	r31, 0x00	; 0
    5bea:	80 81       	ld	r24, Z
    5bec:	88 2f       	mov	r24, r24
    5bee:	90 e0       	ldi	r25, 0x00	; 0
}
    5bf0:	cf 91       	pop	r28
    5bf2:	df 91       	pop	r29
    5bf4:	08 95       	ret

00005bf6 <TIM2_voidsetCntrValue>:
void TIM2_voidsetCntrValue(void ){
    5bf6:	df 93       	push	r29
    5bf8:	cf 93       	push	r28
    5bfa:	cd b7       	in	r28, 0x3d	; 61
    5bfc:	de b7       	in	r29, 0x3e	; 62
	 TCNT2=0 ;
    5bfe:	e4 e4       	ldi	r30, 0x44	; 68
    5c00:	f0 e0       	ldi	r31, 0x00	; 0
    5c02:	10 82       	st	Z, r1
}
    5c04:	cf 91       	pop	r28
    5c06:	df 91       	pop	r29
    5c08:	08 95       	ret

00005c0a <TIM2_Void_dummy>:

void TIM2_Void_dummy(void){}
    5c0a:	df 93       	push	r29
    5c0c:	cf 93       	push	r28
    5c0e:	cd b7       	in	r28, 0x3d	; 61
    5c10:	de b7       	in	r29, 0x3e	; 62
    5c12:	cf 91       	pop	r28
    5c14:	df 91       	pop	r29
    5c16:	08 95       	ret

00005c18 <main>:
#include"Master_TWI.h"
#include "LCD.h"
#include "KEYPAD.h"
#include "LOCK.h"

void main (void){
    5c18:	df 93       	push	r29
    5c1a:	cf 93       	push	r28
    5c1c:	cd b7       	in	r28, 0x3d	; 61
    5c1e:	de b7       	in	r29, 0x3e	; 62
	GIE_voidDisable();
    5c20:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <GIE_voidDisable>

		DIO_voidInit();
    5c24:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_voidInit>
		LCD_voidInit();
    5c28:	0e 94 4e 10 	call	0x209c	; 0x209c <LCD_voidInit>
		TIM1_voidInit();
    5c2c:	0e 94 b4 29 	call	0x5368	; 0x5368 <TIM1_voidInit>
		 uart_void_intial();
    5c30:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <uart_void_intial>
		KEYPAD_voidInit();
    5c34:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <KEYPAD_voidInit>
		GIE_voidEnable();
    5c38:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <GIE_voidEnable>
	while(1){
		start_void();
    5c3c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <start_void>
    5c40:	fd cf       	rjmp	.-6      	; 0x5c3c <main+0x24>

00005c42 <SERVO_voidMove>:

#include "servo.h"
#include "servo_cfg.h"
#include "servo_priv.h"
void SERVO_voidMove(uint8 ServoNumCpy,float32 f32angleCpy)
{
    5c42:	df 93       	push	r29
    5c44:	cf 93       	push	r28
    5c46:	00 d0       	rcall	.+0      	; 0x5c48 <SERVO_voidMove+0x6>
    5c48:	00 d0       	rcall	.+0      	; 0x5c4a <SERVO_voidMove+0x8>
    5c4a:	0f 92       	push	r0
    5c4c:	cd b7       	in	r28, 0x3d	; 61
    5c4e:	de b7       	in	r29, 0x3e	; 62
    5c50:	89 83       	std	Y+1, r24	; 0x01
    5c52:	4a 83       	std	Y+2, r20	; 0x02
    5c54:	5b 83       	std	Y+3, r21	; 0x03
    5c56:	6c 83       	std	Y+4, r22	; 0x04
    5c58:	7d 83       	std	Y+5, r23	; 0x05

	arrPtoFunc[ServoNumCpy](f32angleCpy);
    5c5a:	89 81       	ldd	r24, Y+1	; 0x01
    5c5c:	88 2f       	mov	r24, r24
    5c5e:	90 e0       	ldi	r25, 0x00	; 0
    5c60:	88 0f       	add	r24, r24
    5c62:	99 1f       	adc	r25, r25
    5c64:	fc 01       	movw	r30, r24
    5c66:	ec 51       	subi	r30, 0x1C	; 28
    5c68:	fe 4f       	sbci	r31, 0xFE	; 254
    5c6a:	01 90       	ld	r0, Z+
    5c6c:	f0 81       	ld	r31, Z
    5c6e:	e0 2d       	mov	r30, r0
    5c70:	8a 81       	ldd	r24, Y+2	; 0x02
    5c72:	9b 81       	ldd	r25, Y+3	; 0x03
    5c74:	ac 81       	ldd	r26, Y+4	; 0x04
    5c76:	bd 81       	ldd	r27, Y+5	; 0x05
    5c78:	bc 01       	movw	r22, r24
    5c7a:	cd 01       	movw	r24, r26
    5c7c:	09 95       	icall
}
    5c7e:	0f 90       	pop	r0
    5c80:	0f 90       	pop	r0
    5c82:	0f 90       	pop	r0
    5c84:	0f 90       	pop	r0
    5c86:	0f 90       	pop	r0
    5c88:	cf 91       	pop	r28
    5c8a:	df 91       	pop	r29
    5c8c:	08 95       	ret

00005c8e <uart_void_intial>:
#include "STD_Types.h"
#include "BIT_Math.h"
#include "uart.h"

void uart_void_intial(){
    5c8e:	df 93       	push	r29
    5c90:	cf 93       	push	r28
    5c92:	cd b7       	in	r28, 0x3d	; 61
    5c94:	de b7       	in	r29, 0x3e	; 62
	UCSRC=(Synchronous_Operation)|(uart_cfg.u8_Parity_Mode)|(uart_cfg.u8_Stop_Bit_Mode)|(uart_cfg.u8_Char_Size)|(uart_cfg.u8_Clock_Polarity);
    5c96:	e0 e4       	ldi	r30, 0x40	; 64
    5c98:	f0 e0       	ldi	r31, 0x00	; 0
    5c9a:	90 91 e6 01 	lds	r25, 0x01E6
    5c9e:	80 91 e7 01 	lds	r24, 0x01E7
    5ca2:	98 2b       	or	r25, r24
    5ca4:	80 91 e8 01 	lds	r24, 0x01E8
    5ca8:	98 2b       	or	r25, r24
    5caa:	80 91 e9 01 	lds	r24, 0x01E9
    5cae:	89 2b       	or	r24, r25
    5cb0:	80 64       	ori	r24, 0x40	; 64
    5cb2:	80 83       	st	Z, r24
	if(uart_cfg.u8_Char_Size==Char_9Bit){
    5cb4:	80 91 e8 01 	lds	r24, 0x01E8
    5cb8:	86 31       	cpi	r24, 0x16	; 22
    5cba:	39 f4       	brne	.+14     	; 0x5cca <uart_void_intial+0x3c>
		SET_BIT(UCSRB , 2);
    5cbc:	aa e2       	ldi	r26, 0x2A	; 42
    5cbe:	b0 e0       	ldi	r27, 0x00	; 0
    5cc0:	ea e2       	ldi	r30, 0x2A	; 42
    5cc2:	f0 e0       	ldi	r31, 0x00	; 0
    5cc4:	80 81       	ld	r24, Z
    5cc6:	84 60       	ori	r24, 0x04	; 4
    5cc8:	8c 93       	st	X, r24
	}
	SET_BIT(UCSRB , 4);/*enable receive */
    5cca:	aa e2       	ldi	r26, 0x2A	; 42
    5ccc:	b0 e0       	ldi	r27, 0x00	; 0
    5cce:	ea e2       	ldi	r30, 0x2A	; 42
    5cd0:	f0 e0       	ldi	r31, 0x00	; 0
    5cd2:	80 81       	ld	r24, Z
    5cd4:	80 61       	ori	r24, 0x10	; 16
    5cd6:	8c 93       	st	X, r24
	SET_BIT(UCSRB , 3);/*enable transmission */
    5cd8:	aa e2       	ldi	r26, 0x2A	; 42
    5cda:	b0 e0       	ldi	r27, 0x00	; 0
    5cdc:	ea e2       	ldi	r30, 0x2A	; 42
    5cde:	f0 e0       	ldi	r31, 0x00	; 0
    5ce0:	80 81       	ld	r24, Z
    5ce2:	88 60       	ori	r24, 0x08	; 8
    5ce4:	8c 93       	st	X, r24
}
    5ce6:	cf 91       	pop	r28
    5ce8:	df 91       	pop	r29
    5cea:	08 95       	ret

00005cec <uart_void_read>:
void uart_void_read (uint16* u16_value_cpy){
    5cec:	df 93       	push	r29
    5cee:	cf 93       	push	r28
    5cf0:	00 d0       	rcall	.+0      	; 0x5cf2 <uart_void_read+0x6>
    5cf2:	cd b7       	in	r28, 0x3d	; 61
    5cf4:	de b7       	in	r29, 0x3e	; 62
    5cf6:	9a 83       	std	Y+2, r25	; 0x02
    5cf8:	89 83       	std	Y+1, r24	; 0x01
	/*SET_BIT(UCSRB , 7); enable  RX Complete Interrupt*/
	while (!(GET_BIT(UCSRA , 7)));
    5cfa:	eb e2       	ldi	r30, 0x2B	; 43
    5cfc:	f0 e0       	ldi	r31, 0x00	; 0
    5cfe:	80 81       	ld	r24, Z
    5d00:	88 23       	and	r24, r24
    5d02:	dc f7       	brge	.-10     	; 0x5cfa <uart_void_read+0xe>
	*u16_value_cpy= UDR;
    5d04:	ec e2       	ldi	r30, 0x2C	; 44
    5d06:	f0 e0       	ldi	r31, 0x00	; 0
    5d08:	80 81       	ld	r24, Z
    5d0a:	88 2f       	mov	r24, r24
    5d0c:	90 e0       	ldi	r25, 0x00	; 0
    5d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    5d10:	fa 81       	ldd	r31, Y+2	; 0x02
    5d12:	91 83       	std	Z+1, r25	; 0x01
    5d14:	80 83       	st	Z, r24
	if ((uart_cfg.u8_Char_Size)==Char_9Bit){
    5d16:	80 91 e8 01 	lds	r24, 0x01E8
    5d1a:	86 31       	cpi	r24, 0x16	; 22
    5d1c:	a1 f4       	brne	.+40     	; 0x5d46 <uart_void_read+0x5a>
	*u16_value_cpy|= ((UCSRB>>1)&0x01)<<8;
    5d1e:	e9 81       	ldd	r30, Y+1	; 0x01
    5d20:	fa 81       	ldd	r31, Y+2	; 0x02
    5d22:	20 81       	ld	r18, Z
    5d24:	31 81       	ldd	r19, Z+1	; 0x01
    5d26:	ea e2       	ldi	r30, 0x2A	; 42
    5d28:	f0 e0       	ldi	r31, 0x00	; 0
    5d2a:	80 81       	ld	r24, Z
    5d2c:	86 95       	lsr	r24
    5d2e:	88 2f       	mov	r24, r24
    5d30:	90 e0       	ldi	r25, 0x00	; 0
    5d32:	81 70       	andi	r24, 0x01	; 1
    5d34:	90 70       	andi	r25, 0x00	; 0
    5d36:	98 2f       	mov	r25, r24
    5d38:	88 27       	eor	r24, r24
    5d3a:	82 2b       	or	r24, r18
    5d3c:	93 2b       	or	r25, r19
    5d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    5d40:	fa 81       	ldd	r31, Y+2	; 0x02
    5d42:	91 83       	std	Z+1, r25	; 0x01
    5d44:	80 83       	st	Z, r24
	}
}
    5d46:	0f 90       	pop	r0
    5d48:	0f 90       	pop	r0
    5d4a:	cf 91       	pop	r28
    5d4c:	df 91       	pop	r29
    5d4e:	08 95       	ret

00005d50 <uart_void_write>:
void uart_void_write (uint16 u16_value_cpy){
    5d50:	df 93       	push	r29
    5d52:	cf 93       	push	r28
    5d54:	00 d0       	rcall	.+0      	; 0x5d56 <uart_void_write+0x6>
    5d56:	cd b7       	in	r28, 0x3d	; 61
    5d58:	de b7       	in	r29, 0x3e	; 62
    5d5a:	9a 83       	std	Y+2, r25	; 0x02
    5d5c:	89 83       	std	Y+1, r24	; 0x01
	/*SET_BIT(UCSRB , 5); enable Data Register Empty Interrupt*/
	while ((UCSRA&0x20)!=0x20);
    5d5e:	eb e2       	ldi	r30, 0x2B	; 43
    5d60:	f0 e0       	ldi	r31, 0x00	; 0
    5d62:	80 81       	ld	r24, Z
    5d64:	88 2f       	mov	r24, r24
    5d66:	90 e0       	ldi	r25, 0x00	; 0
    5d68:	80 72       	andi	r24, 0x20	; 32
    5d6a:	90 70       	andi	r25, 0x00	; 0
    5d6c:	00 97       	sbiw	r24, 0x00	; 0
    5d6e:	b9 f3       	breq	.-18     	; 0x5d5e <uart_void_write+0xe>
	UDR= (u16_value_cpy)&0xff ;
    5d70:	ec e2       	ldi	r30, 0x2C	; 44
    5d72:	f0 e0       	ldi	r31, 0x00	; 0
    5d74:	89 81       	ldd	r24, Y+1	; 0x01
    5d76:	80 83       	st	Z, r24
	if (uart_cfg.u8_Char_Size==Char_9Bit){
    5d78:	80 91 e8 01 	lds	r24, 0x01E8
    5d7c:	86 31       	cpi	r24, 0x16	; 22
    5d7e:	99 f4       	brne	.+38     	; 0x5da6 <uart_void_write+0x56>
	UCSRB&=0xFE;
    5d80:	aa e2       	ldi	r26, 0x2A	; 42
    5d82:	b0 e0       	ldi	r27, 0x00	; 0
    5d84:	ea e2       	ldi	r30, 0x2A	; 42
    5d86:	f0 e0       	ldi	r31, 0x00	; 0
    5d88:	80 81       	ld	r24, Z
    5d8a:	8e 7f       	andi	r24, 0xFE	; 254
    5d8c:	8c 93       	st	X, r24
	UCSRB|=((u16_value_cpy>>8)&0x01);
    5d8e:	aa e2       	ldi	r26, 0x2A	; 42
    5d90:	b0 e0       	ldi	r27, 0x00	; 0
    5d92:	ea e2       	ldi	r30, 0x2A	; 42
    5d94:	f0 e0       	ldi	r31, 0x00	; 0
    5d96:	20 81       	ld	r18, Z
    5d98:	89 81       	ldd	r24, Y+1	; 0x01
    5d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5d9c:	89 2f       	mov	r24, r25
    5d9e:	99 27       	eor	r25, r25
    5da0:	81 70       	andi	r24, 0x01	; 1
    5da2:	82 2b       	or	r24, r18
    5da4:	8c 93       	st	X, r24
	}
	
	
}
    5da6:	0f 90       	pop	r0
    5da8:	0f 90       	pop	r0
    5daa:	cf 91       	pop	r28
    5dac:	df 91       	pop	r29
    5dae:	08 95       	ret

00005db0 <__divmodhi4>:
    5db0:	97 fb       	bst	r25, 7
    5db2:	09 2e       	mov	r0, r25
    5db4:	07 26       	eor	r0, r23
    5db6:	0a d0       	rcall	.+20     	; 0x5dcc <__divmodhi4_neg1>
    5db8:	77 fd       	sbrc	r23, 7
    5dba:	04 d0       	rcall	.+8      	; 0x5dc4 <__divmodhi4_neg2>
    5dbc:	0c d0       	rcall	.+24     	; 0x5dd6 <__udivmodhi4>
    5dbe:	06 d0       	rcall	.+12     	; 0x5dcc <__divmodhi4_neg1>
    5dc0:	00 20       	and	r0, r0
    5dc2:	1a f4       	brpl	.+6      	; 0x5dca <__divmodhi4_exit>

00005dc4 <__divmodhi4_neg2>:
    5dc4:	70 95       	com	r23
    5dc6:	61 95       	neg	r22
    5dc8:	7f 4f       	sbci	r23, 0xFF	; 255

00005dca <__divmodhi4_exit>:
    5dca:	08 95       	ret

00005dcc <__divmodhi4_neg1>:
    5dcc:	f6 f7       	brtc	.-4      	; 0x5dca <__divmodhi4_exit>
    5dce:	90 95       	com	r25
    5dd0:	81 95       	neg	r24
    5dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    5dd4:	08 95       	ret

00005dd6 <__udivmodhi4>:
    5dd6:	aa 1b       	sub	r26, r26
    5dd8:	bb 1b       	sub	r27, r27
    5dda:	51 e1       	ldi	r21, 0x11	; 17
    5ddc:	07 c0       	rjmp	.+14     	; 0x5dec <__udivmodhi4_ep>

00005dde <__udivmodhi4_loop>:
    5dde:	aa 1f       	adc	r26, r26
    5de0:	bb 1f       	adc	r27, r27
    5de2:	a6 17       	cp	r26, r22
    5de4:	b7 07       	cpc	r27, r23
    5de6:	10 f0       	brcs	.+4      	; 0x5dec <__udivmodhi4_ep>
    5de8:	a6 1b       	sub	r26, r22
    5dea:	b7 0b       	sbc	r27, r23

00005dec <__udivmodhi4_ep>:
    5dec:	88 1f       	adc	r24, r24
    5dee:	99 1f       	adc	r25, r25
    5df0:	5a 95       	dec	r21
    5df2:	a9 f7       	brne	.-22     	; 0x5dde <__udivmodhi4_loop>
    5df4:	80 95       	com	r24
    5df6:	90 95       	com	r25
    5df8:	bc 01       	movw	r22, r24
    5dfa:	cd 01       	movw	r24, r26
    5dfc:	08 95       	ret

00005dfe <__prologue_saves__>:
    5dfe:	2f 92       	push	r2
    5e00:	3f 92       	push	r3
    5e02:	4f 92       	push	r4
    5e04:	5f 92       	push	r5
    5e06:	6f 92       	push	r6
    5e08:	7f 92       	push	r7
    5e0a:	8f 92       	push	r8
    5e0c:	9f 92       	push	r9
    5e0e:	af 92       	push	r10
    5e10:	bf 92       	push	r11
    5e12:	cf 92       	push	r12
    5e14:	df 92       	push	r13
    5e16:	ef 92       	push	r14
    5e18:	ff 92       	push	r15
    5e1a:	0f 93       	push	r16
    5e1c:	1f 93       	push	r17
    5e1e:	cf 93       	push	r28
    5e20:	df 93       	push	r29
    5e22:	cd b7       	in	r28, 0x3d	; 61
    5e24:	de b7       	in	r29, 0x3e	; 62
    5e26:	ca 1b       	sub	r28, r26
    5e28:	db 0b       	sbc	r29, r27
    5e2a:	0f b6       	in	r0, 0x3f	; 63
    5e2c:	f8 94       	cli
    5e2e:	de bf       	out	0x3e, r29	; 62
    5e30:	0f be       	out	0x3f, r0	; 63
    5e32:	cd bf       	out	0x3d, r28	; 61
    5e34:	09 94       	ijmp

00005e36 <__epilogue_restores__>:
    5e36:	2a 88       	ldd	r2, Y+18	; 0x12
    5e38:	39 88       	ldd	r3, Y+17	; 0x11
    5e3a:	48 88       	ldd	r4, Y+16	; 0x10
    5e3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e40:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e42:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e44:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e46:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e48:	b9 84       	ldd	r11, Y+9	; 0x09
    5e4a:	c8 84       	ldd	r12, Y+8	; 0x08
    5e4c:	df 80       	ldd	r13, Y+7	; 0x07
    5e4e:	ee 80       	ldd	r14, Y+6	; 0x06
    5e50:	fd 80       	ldd	r15, Y+5	; 0x05
    5e52:	0c 81       	ldd	r16, Y+4	; 0x04
    5e54:	1b 81       	ldd	r17, Y+3	; 0x03
    5e56:	aa 81       	ldd	r26, Y+2	; 0x02
    5e58:	b9 81       	ldd	r27, Y+1	; 0x01
    5e5a:	ce 0f       	add	r28, r30
    5e5c:	d1 1d       	adc	r29, r1
    5e5e:	0f b6       	in	r0, 0x3f	; 63
    5e60:	f8 94       	cli
    5e62:	de bf       	out	0x3e, r29	; 62
    5e64:	0f be       	out	0x3f, r0	; 63
    5e66:	cd bf       	out	0x3d, r28	; 61
    5e68:	ed 01       	movw	r28, r26
    5e6a:	08 95       	ret

00005e6c <_exit>:
    5e6c:	f8 94       	cli

00005e6e <__stop_program>:
    5e6e:	ff cf       	rjmp	.-2      	; 0x5e6e <__stop_program>
